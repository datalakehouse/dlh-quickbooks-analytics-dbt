{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v3.json", "dbt_version": "0.21.1", "generated_at": "2022-03-23T12:54:26.395163Z", "invocation_id": "ac401bff-43bb-4502-a9f4-e7bb93cec807", "env": {}, "project_id": "ea27e47d972e7e8c9b7a20e0d20c308f", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "snowflake"}, "nodes": {"model.dlh_quickbooks.V_CUSTOMERS_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    {{source(var('source_schema'),'CUSTOMER')}}\n),\nrename AS \n(   \nSELECT \n    --MD5\n    MD5( TRIM(COALESCE(ID, '00000000000000000000000000000000')) ) AS K_CUSTOMER_DLHK\n    --BUSINESS KEYS\n    ,ID AS K_CUSTOMER_BK\n    ,CURRENCY_ID AS K_CURRENCY_BK\n    ,SHIPPING_ADDRESS_ID AS K_SHIPPING_ADDRESS_BK\n    ,BILL_ADDRESS_ID AS K_BILL_ADDRESS_BK    \n    ,PAYMENT_METHOD_ID AS K_PAYMENT_METHOD_BK\n    ,PARENT_CUSTOMER_ID AS K_PARENT_CUSTOMER_BK \n    --ATTRIBUTES\n    ,{{full_name('GIVEN_NAME','MIDDLE_NAME', 'FAMILY_NAME')}} AS A_FULL_NAME\n    ,GIVEN_NAME AS A_GIVEN_NAME\n    ,MIDDLE_NAME AS A_MIDDLE_NAME\n    ,FAMILY_NAME AS A_FAMILY_NAME\n    ,DISPLAY_NAME AS A_DISPLAY_NAME\n    ,FULLY_QUALIFIED_NAME AS A_FULLY_QUALIFIED_NAME    \n    ,COMPANY_NAME AS A_COMPANY_NAME    \n    ,PREFERRED_DELIVERY_METHOD AS A_PREFERRED_DELIVERY_METHOD\n    ,JOB AS A_JOB\n    ,NOTES AS A_NOTES\n    ,PRINT_ON_CHECK_NAME AS A_PRINT_ON_CHECK_NAME\n    ,EMAIL AS A_EMAIL\n    ,WEBSITE AS A_WEBSITE\n    ,PHONE_NUMBER AS A_PHONE_NUMBER\n    ,ALTERNATE_PHONE_NUMBER AS A_ALTERNATE_PHONE_NUMBER    \n    ,MOBILE_NUMBER AS A_MOBILE_NUMBER\n    ,FAX_NUMBER AS A_FAX_NUMBER\n    ,SYNC_TOKEN AS A_SYNC_TOKEN\n    --TIMESTAMP\n    ,CREATED_AT AS A_CREATED_AT_DTS\n    ,UPDATED_AT AS A_UPDATED_AT_DTS\n    --METRICS\n    ,BALANCE_WITH_JOBS::decimal(15,2) AS M_BALANCE_WITH_JOBS\n    ,BALANCE::decimal(15,2) AS M_BALANCE  \n    \n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\n  FROM\n      source    \n)\n\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dlh_quickbooks.full_name"], "nodes": ["source.dlh_quickbooks.DEMO_QUICKBOOKS.CUSTOMER"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "staging", "CUSTOMERS", "V_CUSTOMERS_STG"], "unique_id": "model.dlh_quickbooks.V_CUSTOMERS_STG", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "staging/CUSTOMERS/V_CUSTOMERS_STG.sql", "original_file_path": "models/staging/CUSTOMERS/V_CUSTOMERS_STG.sql", "name": "V_CUSTOMERS_STG", "alias": "V_CUSTOMERS_STG", "checksum": {"name": "sha256", "checksum": "998222e55ea5524a59a266b51be50601adb4d4fadbecd5373c2fde55c4d24ac1"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_QUICKBOOKS", "CUSTOMER"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/staging/CUSTOMERS/V_CUSTOMERS_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "view", "schema": "QUICKBOOKS", "tags": ["staging", "daily"]}, "created_at": 1648040066, "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"CUSTOMER\"\n),\nrename AS \n(   \nSELECT \n    --MD5\n    MD5( TRIM(COALESCE(ID, '00000000000000000000000000000000')) ) AS K_CUSTOMER_DLHK\n    --BUSINESS KEYS\n    ,ID AS K_CUSTOMER_BK\n    ,CURRENCY_ID AS K_CURRENCY_BK\n    ,SHIPPING_ADDRESS_ID AS K_SHIPPING_ADDRESS_BK\n    ,BILL_ADDRESS_ID AS K_BILL_ADDRESS_BK    \n    ,PAYMENT_METHOD_ID AS K_PAYMENT_METHOD_BK\n    ,PARENT_CUSTOMER_ID AS K_PARENT_CUSTOMER_BK \n    --ATTRIBUTES\n    ,\n    (COALESCE(GIVEN_NAME,'') || ' ' || COALESCE(MIDDLE_NAME || ' ','') || COALESCE(FAMILY_NAME,''))\n AS A_FULL_NAME\n    ,GIVEN_NAME AS A_GIVEN_NAME\n    ,MIDDLE_NAME AS A_MIDDLE_NAME\n    ,FAMILY_NAME AS A_FAMILY_NAME\n    ,DISPLAY_NAME AS A_DISPLAY_NAME\n    ,FULLY_QUALIFIED_NAME AS A_FULLY_QUALIFIED_NAME    \n    ,COMPANY_NAME AS A_COMPANY_NAME    \n    ,PREFERRED_DELIVERY_METHOD AS A_PREFERRED_DELIVERY_METHOD\n    ,JOB AS A_JOB\n    ,NOTES AS A_NOTES\n    ,PRINT_ON_CHECK_NAME AS A_PRINT_ON_CHECK_NAME\n    ,EMAIL AS A_EMAIL\n    ,WEBSITE AS A_WEBSITE\n    ,PHONE_NUMBER AS A_PHONE_NUMBER\n    ,ALTERNATE_PHONE_NUMBER AS A_ALTERNATE_PHONE_NUMBER    \n    ,MOBILE_NUMBER AS A_MOBILE_NUMBER\n    ,FAX_NUMBER AS A_FAX_NUMBER\n    ,SYNC_TOKEN AS A_SYNC_TOKEN\n    --TIMESTAMP\n    ,CREATED_AT AS A_CREATED_AT_DTS\n    ,UPDATED_AT AS A_UPDATED_AT_DTS\n    --METRICS\n    ,BALANCE_WITH_JOBS::decimal(15,2) AS M_BALANCE_WITH_JOBS\n    ,BALANCE::decimal(15,2) AS M_BALANCE  \n    \n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'ac401bff-43bb-4502-a9f4-e7bb93cec807' AS MD_INTGR_ID\n  FROM\n      source    \n)\n\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_CUSTOMERS_STG"}, "model.dlh_quickbooks.V_PAYMENT_LINE_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    {{source(var('source_schema'),'PAYMENT_LINE')}}\n),\nrename AS \n(   \nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(CONCAT(P.PAYMENT_ID,'-',P.INDEX),'00000000000000000000000000000000')) ) AS K_PAYMENT_LINE_DLHK\n    ,MD5( TRIM(COALESCE(P.PAYMENT_ID,'00000000000000000000000000000000')) ) AS K_PAYMENT_DLHK\n    --BUSINESS_KEYS\n    ,P.PAYMENT_ID AS K_PAYMENT_BK    \n    ,P.CREDIT_CARD_CHARGE_ID AS K_CREDIT_CARD_CHARGE_BK\n    ,P.CREDIT_CARD_CREDIT_ID AS K_CREDIT_CARD_CREDIT_BK\n    ,P.CREDIT_MEMO_ID AS K_CREDIT_MEMO_BK\n    ,P.DEPOSIT_ID AS K_DEPOSIT_BK\n    ,P.EXPENSE_ID AS K_EXPENSE_BK\n    ,P.INVOICE_ID AS K_INVOICE_BK\n    ,P.JOURNAL_ENTRY_ID AS K_JOURNAL_ENTRY_BK\n    ,P.CHECK_ID AS K_CHECK_BK\n    --ATTRIBUTES\n    ,P.INDEX AS A_INDEX\n    --METRIC\n    ,P.AMOUNT::DECIMAL(15,2) AS M_AMOUNT\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID \n  FROM\n    source  P\n)\n\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_quickbooks.DEMO_QUICKBOOKS.PAYMENT_LINE"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "staging", "PAYMENTS", "V_PAYMENT_LINE_STG"], "unique_id": "model.dlh_quickbooks.V_PAYMENT_LINE_STG", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "staging/PAYMENTS/V_PAYMENT_LINE_STG.sql", "original_file_path": "models/staging/PAYMENTS/V_PAYMENT_LINE_STG.sql", "name": "V_PAYMENT_LINE_STG", "alias": "V_PAYMENT_LINE_STG", "checksum": {"name": "sha256", "checksum": "f3bc6aa5a688c8d6e90f13bda21d5889b32694e00175720e28a8b7662b9e78ae"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_QUICKBOOKS", "PAYMENT_LINE"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/staging/PAYMENTS/V_PAYMENT_LINE_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "view", "schema": "QUICKBOOKS", "tags": ["staging", "daily"]}, "created_at": 1648040066, "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"PAYMENT_LINE\"\n),\nrename AS \n(   \nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(CONCAT(P.PAYMENT_ID,'-',P.INDEX),'00000000000000000000000000000000')) ) AS K_PAYMENT_LINE_DLHK\n    ,MD5( TRIM(COALESCE(P.PAYMENT_ID,'00000000000000000000000000000000')) ) AS K_PAYMENT_DLHK\n    --BUSINESS_KEYS\n    ,P.PAYMENT_ID AS K_PAYMENT_BK    \n    ,P.CREDIT_CARD_CHARGE_ID AS K_CREDIT_CARD_CHARGE_BK\n    ,P.CREDIT_CARD_CREDIT_ID AS K_CREDIT_CARD_CREDIT_BK\n    ,P.CREDIT_MEMO_ID AS K_CREDIT_MEMO_BK\n    ,P.DEPOSIT_ID AS K_DEPOSIT_BK\n    ,P.EXPENSE_ID AS K_EXPENSE_BK\n    ,P.INVOICE_ID AS K_INVOICE_BK\n    ,P.JOURNAL_ENTRY_ID AS K_JOURNAL_ENTRY_BK\n    ,P.CHECK_ID AS K_CHECK_BK\n    --ATTRIBUTES\n    ,P.INDEX AS A_INDEX\n    --METRIC\n    ,P.AMOUNT::DECIMAL(15,2) AS M_AMOUNT\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'ac401bff-43bb-4502-a9f4-e7bb93cec807' AS MD_INTGR_ID \n  FROM\n    source  P\n)\n\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_PAYMENT_LINE_STG"}, "model.dlh_quickbooks.V_PAYMENTS_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\nWITH PAYMENTS AS (\n    SELECT *\n    FROM {{ref('V_QKB_PAYMENT_HEADER_STG')}}\n),\n\nPAYMENT_LINES AS (\n    SELECT *\n    FROM {{ref('V_QKB_PAYMENT_LINE_STG')}}\n),\n\nFINAL AS (\n    SELECT\n        --DLHK\n        PAYMENT_LINES.K_PAYMENT_LINE_DLHK\n        ,PAYMENTS.K_CURRENCY_DLHK\n        ,PAYMENTS.K_CUSTOMER_DLHK\n        ,PAYMENTS.K_DEPOSIT_TO_ACCOUNT_DLHK\n        ,PAYMENTS.K_RECEIVABLE_ACCOUNT_DLHK\n        \n        --BK\n        ,PAYMENTS.K_PAYMENT_BK\n        ,PAYMENTS.K_CREDIT_CARD_CCTRANS_BK\n        ,PAYMENTS.K_CURRENCY_BK\n        ,PAYMENTS.K_CUSTOMER_BK\n        ,PAYMENTS.K_DEPOSIT_TO_ACCOUNT_BK    \n        ,PAYMENTS.K_PAYMENT_METHOD_BK\n        ,PAYMENTS.K_RECEIVABLE_ACCOUNT_BK\n\n        ,PAYMENT_LINES.K_CREDIT_CARD_CHARGE_BK\n        ,PAYMENT_LINES.K_CREDIT_CARD_CREDIT_BK\n        ,PAYMENT_LINES.K_CREDIT_MEMO_BK\n        ,PAYMENT_LINES.K_DEPOSIT_BK\n        ,PAYMENT_LINES.K_EXPENSE_BK\n        ,PAYMENT_LINES.K_INVOICE_BK\n        ,PAYMENT_LINES.K_JOURNAL_ENTRY_BK\n        ,PAYMENT_LINES.K_CHECK_BK\n        --ATTRIBUTES \n        \n        ,PAYMENT_LINES.A_INDEX\n        ,PAYMENTS.A_CREATED_AT_DTS\n        ,PAYMENTS.A_UPDATED_AT_DTS\n        ,PAYMENTS.A_CREDIT_CARD_AUTH_CODE\n        ,PAYMENTS.A_CREDIT_CARD_BILLING_ADDRESS_STREET\n        ,PAYMENTS.A_CREDIT_CARD_CC_EXPIRY_MONTH\n        ,PAYMENTS.A_CREDIT_CARD_CC_EXPIRY_YEAR\n        ,PAYMENTS.A_CREDIT_CARD_NAME_ON_ACCOUNT\n        ,PAYMENTS.A_CREDIT_CARD_POSTAL_CODE\n        ,PAYMENTS.A_CREDIT_CARD_STATUS\n        ,PAYMENTS.A_CREDIT_CARD_TRANSACTION_AUTHORIZATION_TIME\n        ,PAYMENTS.A_CREDIT_CARD_TYPE\n        ,PAYMENTS.A_PRIVATE_NOTE\n        ,PAYMENTS.A_REFERENCE_NUMBER\n        ,PAYMENTS.A_SYNC_TOKEN\n        ,PAYMENTS.A_TRANSACTION_DATE\n        ,PAYMENTS.A_TRANSACTION_SOURCE\n        ,PAYMENTS.A_TRANSACTION_STATUS\n        --BOOLEAN\n        ,PAYMENTS.B_CREDIT_CARD_PROCESS_PAYMENT\n        ,PAYMENTS.B_PROCESS_PAYMENT\n        --METRICS\n        ,PAYMENT_LINES.M_AMOUNT      \n         --METADATA\n        ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n        ,'{{invocation_id}}' AS MD_INTGR_ID\n    FROM PAYMENTS\n\n    INNER JOIN PAYMENT_LINES \n        ON PAYMENTS.K_PAYMENT_DLHK = PAYMENT_LINES.K_PAYMENT_DLHK\n    \n)\n\nSELECT *\nFROM FINAL", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_quickbooks.V_PAYMENT_HEADER_STG", "model.dlh_quickbooks.V_PAYMENT_LINE_STG"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "staging", "PAYMENTS", "V_PAYMENTS_STG"], "unique_id": "model.dlh_quickbooks.V_PAYMENTS_STG", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "staging/PAYMENTS/V_PAYMENTS_STG.sql", "original_file_path": "models/staging/PAYMENTS/V_PAYMENTS_STG.sql", "name": "V_PAYMENTS_STG", "alias": "V_PAYMENTS_STG", "checksum": {"name": "sha256", "checksum": "18ddd60256e31b1a05a8b21cf5e7521802d632465308bd7ce110ab3f6c328621"}, "tags": ["staging", "daily"], "refs": [["V_PAYMENT_HEADER_STG"], ["V_PAYMENT_LINE_STG"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/staging/PAYMENTS/V_PAYMENTS_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "view", "schema": "QUICKBOOKS", "tags": ["staging", "daily"]}, "created_at": 1648040066, "compiled_sql": "\n\nWITH PAYMENTS AS (\n    SELECT *\n    FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_PAYMENT_HEADER_STG\n),\n\nPAYMENT_LINES AS (\n    SELECT *\n    FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_PAYMENT_LINE_STG\n),\n\nFINAL AS (\n    SELECT\n        --DLHK\n        PAYMENT_LINES.K_PAYMENT_LINE_DLHK\n        ,PAYMENTS.K_CURRENCY_DLHK\n        ,PAYMENTS.K_CUSTOMER_DLHK\n        ,PAYMENTS.K_DEPOSIT_TO_ACCOUNT_DLHK\n        ,PAYMENTS.K_RECEIVABLE_ACCOUNT_DLHK\n        \n        --BK\n        ,PAYMENTS.K_PAYMENT_BK\n        ,PAYMENTS.K_CREDIT_CARD_CCTRANS_BK\n        ,PAYMENTS.K_CURRENCY_BK\n        ,PAYMENTS.K_CUSTOMER_BK\n        ,PAYMENTS.K_DEPOSIT_TO_ACCOUNT_BK    \n        ,PAYMENTS.K_PAYMENT_METHOD_BK\n        ,PAYMENTS.K_RECEIVABLE_ACCOUNT_BK\n\n        ,PAYMENT_LINES.K_CREDIT_CARD_CHARGE_BK\n        ,PAYMENT_LINES.K_CREDIT_CARD_CREDIT_BK\n        ,PAYMENT_LINES.K_CREDIT_MEMO_BK\n        ,PAYMENT_LINES.K_DEPOSIT_BK\n        ,PAYMENT_LINES.K_EXPENSE_BK\n        ,PAYMENT_LINES.K_INVOICE_BK\n        ,PAYMENT_LINES.K_JOURNAL_ENTRY_BK\n        ,PAYMENT_LINES.K_CHECK_BK\n        --ATTRIBUTES \n        \n        ,PAYMENT_LINES.A_INDEX\n        ,PAYMENTS.A_CREATED_AT_DTS\n        ,PAYMENTS.A_UPDATED_AT_DTS\n        ,PAYMENTS.A_CREDIT_CARD_AUTH_CODE\n        ,PAYMENTS.A_CREDIT_CARD_BILLING_ADDRESS_STREET\n        ,PAYMENTS.A_CREDIT_CARD_CC_EXPIRY_MONTH\n        ,PAYMENTS.A_CREDIT_CARD_CC_EXPIRY_YEAR\n        ,PAYMENTS.A_CREDIT_CARD_NAME_ON_ACCOUNT\n        ,PAYMENTS.A_CREDIT_CARD_POSTAL_CODE\n        ,PAYMENTS.A_CREDIT_CARD_STATUS\n        ,PAYMENTS.A_CREDIT_CARD_TRANSACTION_AUTHORIZATION_TIME\n        ,PAYMENTS.A_CREDIT_CARD_TYPE\n        ,PAYMENTS.A_PRIVATE_NOTE\n        ,PAYMENTS.A_REFERENCE_NUMBER\n        ,PAYMENTS.A_SYNC_TOKEN\n        ,PAYMENTS.A_TRANSACTION_DATE\n        ,PAYMENTS.A_TRANSACTION_SOURCE\n        ,PAYMENTS.A_TRANSACTION_STATUS\n        --BOOLEAN\n        ,PAYMENTS.B_CREDIT_CARD_PROCESS_PAYMENT\n        ,PAYMENTS.B_PROCESS_PAYMENT\n        --METRICS\n        ,PAYMENT_LINES.M_AMOUNT      \n         --METADATA\n        ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n        ,'ac401bff-43bb-4502-a9f4-e7bb93cec807' AS MD_INTGR_ID\n    FROM PAYMENTS\n\n    INNER JOIN PAYMENT_LINES \n        ON PAYMENTS.K_PAYMENT_DLHK = PAYMENT_LINES.K_PAYMENT_DLHK\n    \n)\n\nSELECT *\nFROM FINAL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_PAYMENTS_STG"}, "model.dlh_quickbooks.V_PAYMENT_HEADER_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    {{source(var('source_schema'),'PAYMENT')}}\n),\naccounts AS (\n    SELECT * FROM {{ref('W_QKB_ACCOUNTS_D')}}\n),\ncurrency AS (\n    SELECT * FROM {{ref('W_QKB_CURRENCY_D')}}\n),\n\ncustomers AS (\n    SELECT * FROM {{ref('W_QKB_CUSTOMERS_D')}}\n),\n\nrename AS \n(   \nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(P.ID,'00000000000000000000000000000000')) ) AS K_PAYMENT_DLHK\n    ,C.K_CURRENCY_DLHK\n    ,CUS.K_CUSTOMER_DLHK\n    ,A_DEPOSIT.K_ACCOUNT_DLHK AS K_DEPOSIT_TO_ACCOUNT_DLHK\n    ,A_RECEIVABLE.K_ACCOUNT_DLHK AS K_RECEIVABLE_ACCOUNT_DLHK\n    --BUSINESS KEYS\n    ,P.ID AS K_PAYMENT_BK\n    ,P.CREDIT_CARD_CCTRANS_ID AS K_CREDIT_CARD_CCTRANS_BK\n    ,P.CURRENCY_ID AS K_CURRENCY_BK\n    ,P.CUSTOMER_ID AS K_CUSTOMER_BK\n    ,P.DEPOSIT_TO_ACCOUNT_ID AS K_DEPOSIT_TO_ACCOUNT_BK    \n    ,P.PAYMENT_METHOD_ID AS K_PAYMENT_METHOD_BK\n    ,P.RECEIVABLE_ACCOUNT_ID AS K_RECEIVABLE_ACCOUNT_BK\n\n    --ATTRIBUTES\n    ,P.CREATED_AT AS A_CREATED_AT_DTS\n    ,P.UPDATED_AT AS A_UPDATED_AT_DTS\n    ,P.CREDIT_CARD_AUTH_CODE AS A_CREDIT_CARD_AUTH_CODE\n    ,P.CREDIT_CARD_BILLING_ADDRESS_STREET AS A_CREDIT_CARD_BILLING_ADDRESS_STREET\n    ,P.CREDIT_CARD_CC_EXPIRY_MONTH AS A_CREDIT_CARD_CC_EXPIRY_MONTH\n    ,P.CREDIT_CARD_CC_EXPIRY_YEAR AS A_CREDIT_CARD_CC_EXPIRY_YEAR\n    ,P.CREDIT_CARD_NAME_ON_ACCOUNT AS A_CREDIT_CARD_NAME_ON_ACCOUNT\n    ,P.CREDIT_CARD_POSTAL_CODE AS A_CREDIT_CARD_POSTAL_CODE\n    ,P.CREDIT_CARD_STATUS AS A_CREDIT_CARD_STATUS\n    ,P.CREDIT_CARD_TRANSACTION_AUTHORIZATION_TIME AS A_CREDIT_CARD_TRANSACTION_AUTHORIZATION_TIME\n    ,P.CREDIT_CARD_TYPE AS A_CREDIT_CARD_TYPE\n    ,P.PRIVATE_NOTE AS A_PRIVATE_NOTE\n    ,P.REFERENCE_NUMBER AS A_REFERENCE_NUMBER\n    ,P.SYNC_TOKEN AS A_SYNC_TOKEN\n    ,P.TRANSACTION_DATE AS A_TRANSACTION_DATE\n    ,P.TRANSACTION_SOURCE AS A_TRANSACTION_SOURCE\n    ,P.TRANSACTION_STATUS AS A_TRANSACTION_STATUS\n    --BOOLEAN\n    ,P.CREDIT_CARD_PROCESS_PAYMENT AS B_CREDIT_CARD_PROCESS_PAYMENT\n    ,P.PROCESS_PAYMENT AS B_PROCESS_PAYMENT\n    --METRICS\n    ,P.CREDIT_CARD_AMOUNT::DECIMAL(15,2) AS M_CREDIT_CARD_AMOUNT\n    ,P.EXCHANGE_RATE::DECIMAL(15,2) AS M_EXCHANGE_RATE\n    ,P.TOTAL_AMOUNT::DECIMAL(15,2) AS M_TOTAL_AMOUNT\n    ,P.UNAPPLIED_AMOUNT::DECIMAL(15,2) AS M_UNAPPLIED_AMOUNT\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID \n  FROM\n    source  P\n    LEFT JOIN currency C ON C.K_CURRENCY_BK = P.CURRENCY_ID    \n    LEFT JOIN customers CUS ON CUS.K_CUSTOMER_BK = P.CUSTOMER_ID    \n    LEFT JOIN accounts A_DEPOSIT ON A_DEPOSIT.K_ACCOUNT_BK = P.DEPOSIT_TO_ACCOUNT_ID\n    LEFT JOIN accounts A_RECEIVABLE ON A_RECEIVABLE.K_ACCOUNT_BK = P.RECEIVABLE_ACCOUNT_ID\n)\n\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_quickbooks.DEMO_QUICKBOOKS.PAYMENT", "model.dlh_quickbooks.W_ACCOUNTS_D", "model.dlh_quickbooks.W_CURRENCY_D", "model.dlh_quickbooks.W_CUSTOMERS_D"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "staging", "PAYMENTS", "V_PAYMENT_HEADER_STG"], "unique_id": "model.dlh_quickbooks.V_PAYMENT_HEADER_STG", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "staging/PAYMENTS/V_PAYMENT_HEADER_STG.sql", "original_file_path": "models/staging/PAYMENTS/V_PAYMENT_HEADER_STG.sql", "name": "V_PAYMENT_HEADER_STG", "alias": "V_PAYMENT_HEADER_STG", "checksum": {"name": "sha256", "checksum": "95bc0b8732c18d82966a07cd42767958be6586765e1783088638e884d63de5f5"}, "tags": ["staging", "daily"], "refs": [["W_ACCOUNTS_D"], ["W_CURRENCY_D"], ["W_CUSTOMERS_D"]], "sources": [["DEMO_QUICKBOOKS", "PAYMENT"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/staging/PAYMENTS/V_PAYMENT_HEADER_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "view", "schema": "QUICKBOOKS", "tags": ["staging", "daily"]}, "created_at": 1648040066, "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"PAYMENT\"\n),\naccounts AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_ACCOUNTS_D\n),\ncurrency AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_CURRENCY_D\n),\n\ncustomers AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_CUSTOMERS_D\n),\n\nrename AS \n(   \nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(P.ID,'00000000000000000000000000000000')) ) AS K_PAYMENT_DLHK\n    ,C.K_CURRENCY_DLHK\n    ,CUS.K_CUSTOMER_DLHK\n    ,A_DEPOSIT.K_ACCOUNT_DLHK AS K_DEPOSIT_TO_ACCOUNT_DLHK\n    ,A_RECEIVABLE.K_ACCOUNT_DLHK AS K_RECEIVABLE_ACCOUNT_DLHK\n    --BUSINESS KEYS\n    ,P.ID AS K_PAYMENT_BK\n    ,P.CREDIT_CARD_CCTRANS_ID AS K_CREDIT_CARD_CCTRANS_BK\n    ,P.CURRENCY_ID AS K_CURRENCY_BK\n    ,P.CUSTOMER_ID AS K_CUSTOMER_BK\n    ,P.DEPOSIT_TO_ACCOUNT_ID AS K_DEPOSIT_TO_ACCOUNT_BK    \n    ,P.PAYMENT_METHOD_ID AS K_PAYMENT_METHOD_BK\n    ,P.RECEIVABLE_ACCOUNT_ID AS K_RECEIVABLE_ACCOUNT_BK\n\n    --ATTRIBUTES\n    ,P.CREATED_AT AS A_CREATED_AT_DTS\n    ,P.UPDATED_AT AS A_UPDATED_AT_DTS\n    ,P.CREDIT_CARD_AUTH_CODE AS A_CREDIT_CARD_AUTH_CODE\n    ,P.CREDIT_CARD_BILLING_ADDRESS_STREET AS A_CREDIT_CARD_BILLING_ADDRESS_STREET\n    ,P.CREDIT_CARD_CC_EXPIRY_MONTH AS A_CREDIT_CARD_CC_EXPIRY_MONTH\n    ,P.CREDIT_CARD_CC_EXPIRY_YEAR AS A_CREDIT_CARD_CC_EXPIRY_YEAR\n    ,P.CREDIT_CARD_NAME_ON_ACCOUNT AS A_CREDIT_CARD_NAME_ON_ACCOUNT\n    ,P.CREDIT_CARD_POSTAL_CODE AS A_CREDIT_CARD_POSTAL_CODE\n    ,P.CREDIT_CARD_STATUS AS A_CREDIT_CARD_STATUS\n    ,P.CREDIT_CARD_TRANSACTION_AUTHORIZATION_TIME AS A_CREDIT_CARD_TRANSACTION_AUTHORIZATION_TIME\n    ,P.CREDIT_CARD_TYPE AS A_CREDIT_CARD_TYPE\n    ,P.PRIVATE_NOTE AS A_PRIVATE_NOTE\n    ,P.REFERENCE_NUMBER AS A_REFERENCE_NUMBER\n    ,P.SYNC_TOKEN AS A_SYNC_TOKEN\n    ,P.TRANSACTION_DATE AS A_TRANSACTION_DATE\n    ,P.TRANSACTION_SOURCE AS A_TRANSACTION_SOURCE\n    ,P.TRANSACTION_STATUS AS A_TRANSACTION_STATUS\n    --BOOLEAN\n    ,P.CREDIT_CARD_PROCESS_PAYMENT AS B_CREDIT_CARD_PROCESS_PAYMENT\n    ,P.PROCESS_PAYMENT AS B_PROCESS_PAYMENT\n    --METRICS\n    ,P.CREDIT_CARD_AMOUNT::DECIMAL(15,2) AS M_CREDIT_CARD_AMOUNT\n    ,P.EXCHANGE_RATE::DECIMAL(15,2) AS M_EXCHANGE_RATE\n    ,P.TOTAL_AMOUNT::DECIMAL(15,2) AS M_TOTAL_AMOUNT\n    ,P.UNAPPLIED_AMOUNT::DECIMAL(15,2) AS M_UNAPPLIED_AMOUNT\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'ac401bff-43bb-4502-a9f4-e7bb93cec807' AS MD_INTGR_ID \n  FROM\n    source  P\n    LEFT JOIN currency C ON C.K_CURRENCY_BK = P.CURRENCY_ID    \n    LEFT JOIN customers CUS ON CUS.K_CUSTOMER_BK = P.CUSTOMER_ID    \n    LEFT JOIN accounts A_DEPOSIT ON A_DEPOSIT.K_ACCOUNT_BK = P.DEPOSIT_TO_ACCOUNT_ID\n    LEFT JOIN accounts A_RECEIVABLE ON A_RECEIVABLE.K_ACCOUNT_BK = P.RECEIVABLE_ACCOUNT_ID\n)\n\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_PAYMENT_HEADER_STG"}, "model.dlh_quickbooks.V_BILL_HEADER_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\nWITH source AS(\n    SELECT * FROM  {{source(var('source_schema'),'BILL')}}\n),\nterm AS (\n  SELECT  *  FROM  {{ref('W_QKB_TERM_D')}}\n),\nvendors AS (\n    SELECT * FROM {{ref('W_QKB_VENDORS_D')}}\n),\naccounts AS (\n    SELECT * FROM {{ref('W_QKB_ACCOUNTS_D')}}\n),\ncurrency AS (\n    SELECT * FROM {{ref('W_QKB_CURRENCY_D')}}\n),\nbills_linked AS (\n    SELECT * FROM {{source(var('source_schema'),'BILL_LINKED_TXN')}}\n),\nbill_payment AS (\n    SELECT * FROM {{source(var('source_schema'),'BILL_PAYMENT')}}\n),\nbill_payment_lines as (\n    select *\n    from {{source(var('source_schema'),'BILL_PAYMENT_LINE')}}\n    where bill_id is not null\n),\nbills_pay as\n(\n    SELECT\n    b.ID as BILL_ID\n    ,MIN(bp.TRANSACTION_DATE) AS INITIAL_PAYMENT_DATE\n    ,MAX(bp.TRANSACTION_DATE) AS FINAL_PAYMENT_DATE\n    ,SUM(COALESCE(bp.TOTAL_AMOUNT,0))::decimal(15,2) AS PAYMENT_AMOUNT\n    ,SUM(COALESCE(bpl.AMOUNT,0))::decimal(15,2) AS PAYMENT_LINE_AMOUNT\n    FROM\n    bills_linked bl\n    INNER JOIN source as b on b.ID = bl.BILL_ID\n    INNER JOIN bill_payment as bp on bp.ID = bl.BILL_PAYMENT_ID\n    LEFT JOIN bill_payment_lines bpl ON bpl.BILL_PAYMENT_ID = bp.ID AND bpl.BILL_ID = B.ID\nGROUP BY 1\n),\nrename AS (\nSELECT\n    --DLHK  \n    MD5( TRIM(COALESCE(b.ID,'00000000000000000000000000000000')) ) AS K_BILL_DLHK\n    ,t.K_TERM_DLHK AS K_SALES_TERM_DLHK\n    ,v.K_VENDOR_DLHK\n    ,a.K_ACCOUNT_DLHK AS K_PAYABLE_ACCOUNT_DLHK\n    ,c.K_CURRENCY_DLHK\n    --BK\n    ,b.ID AS K_BILL_BK\n    ,t.K_TERM_BK AS K_SALES_TERM_BK\n    ,v.K_VENDOR_BK\n    ,a.K_ACCOUNT_BK AS K_PAYABLE_ACCOUNT_BK\n    ,c.K_CURRENCY_BK\n    --ATTRIBUTES\n    ,b.SYNC_TOKEN AS A_SYNC_TOKEN\n    ,b.PRIVATE_NOTE AS A_PRIVATE_NOTE\n    ,b.DOC_NUMBER AS A_DOC_NUMBER\n    ,b.GLOBAL_TAX_CALCULATION AS A_GLOBAL_TAX_CALCULATION\n    ,b.CREATED_AT AS A_CREATED_AT_DTS\n    ,b.UPDATED_AT AS A_UPDATED_AT_DTS\n    ,b.DUE_DATE AS A_DUE_DATE\n    ,b.TRANSACTION_DATE AS A_TRANSACTION_DATE\n    ,bp.INITIAL_PAYMENT_DATE AS A_INITIAL_PAYMENT_DATE\n    ,bp.FINAL_PAYMENT_DATE AS A_FINAL_PAYMENT_DATE\n    \n    --METRICS\n    ,b.TOTAL_AMOUNT::decimal(15,2) AS M_TOTAL_AMOUNT\n    ,bp.PAYMENT_AMOUNT AS M_PAYMENT_AMOUNT\n    ,bp.PAYMENT_LINE_AMOUNT AS M_PAYMENT_LINE_AMOUNT\n    ,b.HOME_BALANCE::decimal(15,2) AS M_HOME_BALANCE\n    ,b.EXCHANGE_RATE::decimal(15,2) AS M_EXCHANGE_RATE\n    ,b.BALANCE::decimal(15,2) AS M_BALANCE\n\n     --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\nFROM\nsource as b\nLEFT JOIN term as t on t.K_TERM_BK = b.SALES_TERM_ID\nLEFT JOIN vendors as v on v.K_VENDOR_BK = b.VENDOR_ID\nLEFT JOIN accounts AS a on a.K_ACCOUNT_BK = b.PAYABLE_ACCOUNT_ID\nLEFT JOIN currency AS c on c.K_CURRENCY_BK = b.CURRENCY_ID\nLEFT JOIN bills_pay as bp on bp.BILL_ID = b.ID\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL", "source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL_LINKED_TXN", "source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL_PAYMENT", "source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL_PAYMENT_LINE", "model.dlh_quickbooks.W_TERM_D", "model.dlh_quickbooks.W_VENDORS_D", "model.dlh_quickbooks.W_ACCOUNTS_D", "model.dlh_quickbooks.W_CURRENCY_D"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "staging", "BILL", "V_BILL_HEADER_STG"], "unique_id": "model.dlh_quickbooks.V_BILL_HEADER_STG", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "staging/BILL/V_BILL_HEADER_STG.sql", "original_file_path": "models/staging/BILL/V_BILL_HEADER_STG.sql", "name": "V_BILL_HEADER_STG", "alias": "V_BILL_HEADER_STG", "checksum": {"name": "sha256", "checksum": "6471b67dfbd6008acd9ce44515266a7aca691519aa8175cd25217001a33aa2b8"}, "tags": ["staging", "daily"], "refs": [["W_TERM_D"], ["W_VENDORS_D"], ["W_ACCOUNTS_D"], ["W_CURRENCY_D"]], "sources": [["DEMO_QUICKBOOKS", "BILL"], ["DEMO_QUICKBOOKS", "BILL_LINKED_TXN"], ["DEMO_QUICKBOOKS", "BILL_PAYMENT"], ["DEMO_QUICKBOOKS", "BILL_PAYMENT_LINE"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/staging/BILL/V_BILL_HEADER_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "view", "schema": "QUICKBOOKS", "tags": ["staging", "daily"]}, "created_at": 1648040066, "compiled_sql": "\n\nWITH source AS(\n    SELECT * FROM  DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"BILL\"\n),\nterm AS (\n  SELECT  *  FROM  DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_TERM_D\n),\nvendors AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_VENDORS_D\n),\naccounts AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_ACCOUNTS_D\n),\ncurrency AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_CURRENCY_D\n),\nbills_linked AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"BILL_LINKED_TXN\"\n),\nbill_payment AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"BILL_PAYMENT\"\n),\nbill_payment_lines as (\n    select *\n    from DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"BILL_PAYMENT_LINE\"\n    where bill_id is not null\n),\nbills_pay as\n(\n    SELECT\n    b.ID as BILL_ID\n    ,MIN(bp.TRANSACTION_DATE) AS INITIAL_PAYMENT_DATE\n    ,MAX(bp.TRANSACTION_DATE) AS FINAL_PAYMENT_DATE\n    ,SUM(COALESCE(bp.TOTAL_AMOUNT,0))::decimal(15,2) AS PAYMENT_AMOUNT\n    ,SUM(COALESCE(bpl.AMOUNT,0))::decimal(15,2) AS PAYMENT_LINE_AMOUNT\n    FROM\n    bills_linked bl\n    INNER JOIN source as b on b.ID = bl.BILL_ID\n    INNER JOIN bill_payment as bp on bp.ID = bl.BILL_PAYMENT_ID\n    LEFT JOIN bill_payment_lines bpl ON bpl.BILL_PAYMENT_ID = bp.ID AND bpl.BILL_ID = B.ID\nGROUP BY 1\n),\nrename AS (\nSELECT\n    --DLHK  \n    MD5( TRIM(COALESCE(b.ID,'00000000000000000000000000000000')) ) AS K_BILL_DLHK\n    ,t.K_TERM_DLHK AS K_SALES_TERM_DLHK\n    ,v.K_VENDOR_DLHK\n    ,a.K_ACCOUNT_DLHK AS K_PAYABLE_ACCOUNT_DLHK\n    ,c.K_CURRENCY_DLHK\n    --BK\n    ,b.ID AS K_BILL_BK\n    ,t.K_TERM_BK AS K_SALES_TERM_BK\n    ,v.K_VENDOR_BK\n    ,a.K_ACCOUNT_BK AS K_PAYABLE_ACCOUNT_BK\n    ,c.K_CURRENCY_BK\n    --ATTRIBUTES\n    ,b.SYNC_TOKEN AS A_SYNC_TOKEN\n    ,b.PRIVATE_NOTE AS A_PRIVATE_NOTE\n    ,b.DOC_NUMBER AS A_DOC_NUMBER\n    ,b.GLOBAL_TAX_CALCULATION AS A_GLOBAL_TAX_CALCULATION\n    ,b.CREATED_AT AS A_CREATED_AT_DTS\n    ,b.UPDATED_AT AS A_UPDATED_AT_DTS\n    ,b.DUE_DATE AS A_DUE_DATE\n    ,b.TRANSACTION_DATE AS A_TRANSACTION_DATE\n    ,bp.INITIAL_PAYMENT_DATE AS A_INITIAL_PAYMENT_DATE\n    ,bp.FINAL_PAYMENT_DATE AS A_FINAL_PAYMENT_DATE\n    \n    --METRICS\n    ,b.TOTAL_AMOUNT::decimal(15,2) AS M_TOTAL_AMOUNT\n    ,bp.PAYMENT_AMOUNT AS M_PAYMENT_AMOUNT\n    ,bp.PAYMENT_LINE_AMOUNT AS M_PAYMENT_LINE_AMOUNT\n    ,b.HOME_BALANCE::decimal(15,2) AS M_HOME_BALANCE\n    ,b.EXCHANGE_RATE::decimal(15,2) AS M_EXCHANGE_RATE\n    ,b.BALANCE::decimal(15,2) AS M_BALANCE\n\n     --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'ac401bff-43bb-4502-a9f4-e7bb93cec807' AS MD_INTGR_ID\nFROM\nsource as b\nLEFT JOIN term as t on t.K_TERM_BK = b.SALES_TERM_ID\nLEFT JOIN vendors as v on v.K_VENDOR_BK = b.VENDOR_ID\nLEFT JOIN accounts AS a on a.K_ACCOUNT_BK = b.PAYABLE_ACCOUNT_ID\nLEFT JOIN currency AS c on c.K_CURRENCY_BK = b.CURRENCY_ID\nLEFT JOIN bills_pay as bp on bp.BILL_ID = b.ID\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_BILL_HEADER_STG"}, "model.dlh_quickbooks.V_BILLS_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\nWITH BILLS AS (\n    SELECT *\n    FROM {{ref('V_QKB_BILL_HEADER_STG')}}\n),\n\nBILL_LINES AS (\n    SELECT *\n    FROM {{ref('V_QKB_BILL_LINES_STG')}}\n),\nITEMS AS (\n    SELECT *\n    FROM {{ref('W_QKB_ITEMS_D')}}\n),\nFINAL AS (\n    SELECT\n        --DLHK\n        BILL_LINES.K_BILL_LINE_DLHK\n        ,BILLS.K_BILL_DLHK     \n        ,BILLS.K_SALES_TERM_DLHK\n        ,BILLS.K_VENDOR_DLHK\n        ,BILLS.K_PAYABLE_ACCOUNT_DLHK AS K_BILL_PAYABLE_ACCOUNT_DLHK\n        ,BILLS.K_CURRENCY_DLHK AS K_BILL_CURRENCY_DLHK\n        \n        ,BILL_LINES.K_ITEM_EXPENSE_CUSTOMER_DLHK\n        ,BILL_LINES.K_ITEM_EXPENSE_DLHK\n        ,BILL_LINES.K_ACCOUNT_EXPENSE_CUSTOMER_DLHK\n        ,BILL_LINES.K_ACCOUNT_EXPENSE_DLHK\n        ,COALESCE(BILL_LINES.K_ACCOUNT_EXPENSE_DLHK,BILL_LINES.K_ITEM_EXPENSE_ACCOUNT_DLHK) AS K_ACCOUNT_DLHK\n        ,COALESCE(BILL_LINES.K_ACCOUNT_EXPENSE_CUSTOMER_DLHK,BILL_LINES.K_ITEM_EXPENSE_CUSTOMER_DLHK) AS K_CUSTOMER_DLHK\n        --BK\n        ,BILLS.K_BILL_BK\n        ,BILLS.K_SALES_TERM_BK\n        ,BILLS.K_VENDOR_BK\n        ,BILLS.K_PAYABLE_ACCOUNT_BK AS K_BILL_PAYABLE_ACCOUNT_BK\n        ,BILLS.K_CURRENCY_BK AS K_BILL_CURRENCY_BK\n        ,COALESCE(BILL_LINES.K_ACCOUNT_EXPENSE_BK,BILL_LINES.K_ITEM_EXPENSE_ACCOUNT_BK) AS K_ACCOUNT_BK\n        ,COALESCE(BILL_LINES.K_ACCOUNT_EXPENSE_CUSTOMER_BK,BILL_LINES.K_ITEM_EXPENSE_CUSTOMER_BK) AS K_CUSTOMER_BK\n        ,BILL_LINES.K_ITEM_EXPENSE_TAX_CODE_BK\n        ,BILL_LINES.K_ITEM_EXPENSE_CLASS_BK        \n        ,BILL_LINES.K_ITEM_EXPENSE_CUSTOMER_BK\n        ,BILL_LINES.K_ITEM_EXPENSE_ITEM_BK\n        ,BILL_LINES.K_ACCOUNT_EXPENSE_TAX_CODE_BK\n        ,BILL_LINES.K_ACCOUNT_EXPENSE_CLASS_BK\n        ,BILL_LINES.K_ACCOUNT_EXPENSE_CUSTOMER_BK\n        ,BILL_LINES.K_ACCOUNT_EXPENSE_BK\n        --ATTRIBUTES\n        ,BILL_LINES.A_INDEX AS A_BILL_LINE_INDEX\n        ,COALESCE(BILL_LINES.A_ACCOUNT_EXPENSE_BILLABLE_STATUS,BILL_LINES.A_ITEM_EXPENSE_BILLABLE_STATUS) AS A_BILLABLE_STATUS        \n        ,coalesce(BILL_LINES.A_DESCRIPTION, ITEMS.A_ITEM_NAME) as A_DESCRIPTION\n        ,BILLS.A_DOC_NUMBER\n        ,BILLS.A_TRANSACTION_DATE\n        ,BILLS.A_INITIAL_PAYMENT_DATE\n        ,BILLS.A_FINAL_PAYMENT_DATE\n        --METRICS\n        ,BILL_LINES.M_AMOUNT\n        ,BILL_LINES.M_ACCOUNT_EXPENSE_TAX_AMOUNT        \n        ,BILL_LINES.M_ITEM_EXPENSE_UNIT_PRICE\n        ,BILL_LINES.M_ITEM_EXPENSE_QUANTITY\n\n         --METADATA\n        ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n        ,'{{invocation_id}}' AS MD_INTGR_ID\n    FROM BILLS\n\n    INNER JOIN BILL_LINES \n        ON BILLS.K_BILL_DLHK = BILL_LINES.K_BILL_DLHK\n    LEFT JOIN ITEMS\n        ON ITEMS.K_ITEM_DLHK = BILL_LINES.K_ITEM_EXPENSE_DLHK\n)\n\nSELECT *\nFROM FINAL", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_quickbooks.V_BILL_HEADER_STG", "model.dlh_quickbooks.V_BILL_LINES_STG", "model.dlh_quickbooks.W_ITEMS_D"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "staging", "BILL", "V_BILLS_STG"], "unique_id": "model.dlh_quickbooks.V_BILLS_STG", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "staging/BILL/V_BILLS_STG.sql", "original_file_path": "models/staging/BILL/V_BILLS_STG.sql", "name": "V_BILLS_STG", "alias": "V_BILLS_STG", "checksum": {"name": "sha256", "checksum": "e67aac890b8f0475c5d7ac167aac1520d5b4cd6dbd52381e8dac592879fbb1fc"}, "tags": ["staging", "daily"], "refs": [["V_BILL_HEADER_STG"], ["V_BILL_LINES_STG"], ["W_ITEMS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/staging/BILL/V_BILLS_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "view", "schema": "QUICKBOOKS", "tags": ["staging", "daily"]}, "created_at": 1648040066, "compiled_sql": "\n\nWITH BILLS AS (\n    SELECT *\n    FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_BILL_HEADER_STG\n),\n\nBILL_LINES AS (\n    SELECT *\n    FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_BILL_LINES_STG\n),\nITEMS AS (\n    SELECT *\n    FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_ITEMS_D\n),\nFINAL AS (\n    SELECT\n        --DLHK\n        BILL_LINES.K_BILL_LINE_DLHK\n        ,BILLS.K_BILL_DLHK     \n        ,BILLS.K_SALES_TERM_DLHK\n        ,BILLS.K_VENDOR_DLHK\n        ,BILLS.K_PAYABLE_ACCOUNT_DLHK AS K_BILL_PAYABLE_ACCOUNT_DLHK\n        ,BILLS.K_CURRENCY_DLHK AS K_BILL_CURRENCY_DLHK\n        \n        ,BILL_LINES.K_ITEM_EXPENSE_CUSTOMER_DLHK\n        ,BILL_LINES.K_ITEM_EXPENSE_DLHK\n        ,BILL_LINES.K_ACCOUNT_EXPENSE_CUSTOMER_DLHK\n        ,BILL_LINES.K_ACCOUNT_EXPENSE_DLHK\n        ,COALESCE(BILL_LINES.K_ACCOUNT_EXPENSE_DLHK,BILL_LINES.K_ITEM_EXPENSE_ACCOUNT_DLHK) AS K_ACCOUNT_DLHK\n        ,COALESCE(BILL_LINES.K_ACCOUNT_EXPENSE_CUSTOMER_DLHK,BILL_LINES.K_ITEM_EXPENSE_CUSTOMER_DLHK) AS K_CUSTOMER_DLHK\n        --BK\n        ,BILLS.K_BILL_BK\n        ,BILLS.K_SALES_TERM_BK\n        ,BILLS.K_VENDOR_BK\n        ,BILLS.K_PAYABLE_ACCOUNT_BK AS K_BILL_PAYABLE_ACCOUNT_BK\n        ,BILLS.K_CURRENCY_BK AS K_BILL_CURRENCY_BK\n        ,COALESCE(BILL_LINES.K_ACCOUNT_EXPENSE_BK,BILL_LINES.K_ITEM_EXPENSE_ACCOUNT_BK) AS K_ACCOUNT_BK\n        ,COALESCE(BILL_LINES.K_ACCOUNT_EXPENSE_CUSTOMER_BK,BILL_LINES.K_ITEM_EXPENSE_CUSTOMER_BK) AS K_CUSTOMER_BK\n        ,BILL_LINES.K_ITEM_EXPENSE_TAX_CODE_BK\n        ,BILL_LINES.K_ITEM_EXPENSE_CLASS_BK        \n        ,BILL_LINES.K_ITEM_EXPENSE_CUSTOMER_BK\n        ,BILL_LINES.K_ITEM_EXPENSE_ITEM_BK\n        ,BILL_LINES.K_ACCOUNT_EXPENSE_TAX_CODE_BK\n        ,BILL_LINES.K_ACCOUNT_EXPENSE_CLASS_BK\n        ,BILL_LINES.K_ACCOUNT_EXPENSE_CUSTOMER_BK\n        ,BILL_LINES.K_ACCOUNT_EXPENSE_BK\n        --ATTRIBUTES\n        ,BILL_LINES.A_INDEX AS A_BILL_LINE_INDEX\n        ,COALESCE(BILL_LINES.A_ACCOUNT_EXPENSE_BILLABLE_STATUS,BILL_LINES.A_ITEM_EXPENSE_BILLABLE_STATUS) AS A_BILLABLE_STATUS        \n        ,coalesce(BILL_LINES.A_DESCRIPTION, ITEMS.A_ITEM_NAME) as A_DESCRIPTION\n        ,BILLS.A_DOC_NUMBER\n        ,BILLS.A_TRANSACTION_DATE\n        ,BILLS.A_INITIAL_PAYMENT_DATE\n        ,BILLS.A_FINAL_PAYMENT_DATE\n        --METRICS\n        ,BILL_LINES.M_AMOUNT\n        ,BILL_LINES.M_ACCOUNT_EXPENSE_TAX_AMOUNT        \n        ,BILL_LINES.M_ITEM_EXPENSE_UNIT_PRICE\n        ,BILL_LINES.M_ITEM_EXPENSE_QUANTITY\n\n         --METADATA\n        ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n        ,'ac401bff-43bb-4502-a9f4-e7bb93cec807' AS MD_INTGR_ID\n    FROM BILLS\n\n    INNER JOIN BILL_LINES \n        ON BILLS.K_BILL_DLHK = BILL_LINES.K_BILL_DLHK\n    LEFT JOIN ITEMS\n        ON ITEMS.K_ITEM_DLHK = BILL_LINES.K_ITEM_EXPENSE_DLHK\n)\n\nSELECT *\nFROM FINAL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_BILLS_STG"}, "model.dlh_quickbooks.V_BILL_LINES_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\nWITH source AS(\n    SELECT * FROM  {{source(var('source_schema'),'BILL_LINE')}}\n),\nitems AS (\n    SELECT * FROM {{ref('W_QKB_ITEMS_D')}}\n),\ncustomers AS (\n    SELECT * FROM {{ref('W_QKB_CUSTOMERS_D')}}\n),\naccounts AS (\n    SELECT * FROM {{ref('W_QKB_ACCOUNTS_D')}}\n),\nrename AS (\nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(CONCAT(S.BILL_ID,'-',INDEX),'00000000000000000000000000000000')) ) AS K_BILL_LINE_DLHK\n    ,MD5( TRIM(COALESCE(S.BILL_ID,'00000000000000000000000000000000')) ) AS K_BILL_DLHK\n    ,C.K_CUSTOMER_DLHK AS K_ITEM_EXPENSE_CUSTOMER_DLHK\n    ,I.K_ITEM_DLHK AS K_ITEM_EXPENSE_DLHK\n    ,I.K_EXPENSE_ACCOUNT_DLHK AS K_ITEM_EXPENSE_ACCOUNT_DLHK\n    ,C_ACCOUNT.K_CUSTOMER_DLHK AS K_ACCOUNT_EXPENSE_CUSTOMER_DLHK\n    ,A.K_ACCOUNT_DLHK AS K_ACCOUNT_EXPENSE_DLHK\n    --BUSINESS KEYS\n    ,S.BILL_ID AS K_BILL_BK\n    ,NULLIF(S.ITEM_EXPENSE_TAX_CODE_ID,'NON') AS K_ITEM_EXPENSE_TAX_CODE_BK\n    ,S.ITEM_EXPENSE_CLASS_ID AS K_ITEM_EXPENSE_CLASS_BK\n    ,S.ITEM_EXPENSE_CUSTOMER_ID AS K_ITEM_EXPENSE_CUSTOMER_BK\n    ,S.ITEM_EXPENSE_ITEM_ID AS K_ITEM_EXPENSE_ITEM_BK\n    ,I.K_EXPENSE_ACCOUNT_DLHK AS K_ITEM_EXPENSE_ACCOUNT_BK\n    ,NULLIF(S.ACCOUNT_EXPENSE_TAX_CODE_ID,'NON') AS K_ACCOUNT_EXPENSE_TAX_CODE_BK\n    ,S.ACCOUNT_EXPENSE_CLASS_ID AS K_ACCOUNT_EXPENSE_CLASS_BK\n    ,S.ACCOUNT_EXPENSE_CUSTOMER_ID AS K_ACCOUNT_EXPENSE_CUSTOMER_BK\n    ,S.ACCOUNT_EXPENSE_ACCOUNT_ID AS K_ACCOUNT_EXPENSE_BK\n    --ATTRIBUTES\n    ,S.INDEX AS A_INDEX    \n    ,S.DESCRIPTION AS A_DESCRIPTION\n    ,S.ITEM_EXPENSE_BILLABLE_STATUS AS A_ITEM_EXPENSE_BILLABLE_STATUS      \n    ,S.ACCOUNT_EXPENSE_BILLABLE_STATUS AS A_ACCOUNT_EXPENSE_BILLABLE_STATUS    \n    --METRICS\n    ,S.ACCOUNT_EXPENSE_TAX_AMOUNT::decimal(15,2) AS M_ACCOUNT_EXPENSE_TAX_AMOUNT\n    ,S.AMOUNT::decimal(15,2) AS M_AMOUNT\n    ,S.ITEM_EXPENSE_UNIT_PRICE::decimal(15,2) as M_ITEM_EXPENSE_UNIT_PRICE\n    ,S.ITEM_EXPENSE_QUANTITY AS M_ITEM_EXPENSE_QUANTITY\n\n     --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\nFROM\n    source as S\n    LEFT JOIN items I on I.K_ITEM_BK = S.ITEM_EXPENSE_ITEM_ID\n    LEFT JOIN customers C on C.K_CUSTOMER_BK = S.ITEM_EXPENSE_CUSTOMER_ID\n    LEFT JOIN customers C_ACCOUNT on C_ACCOUNT.K_CUSTOMER_BK = S.ACCOUNT_EXPENSE_CUSTOMER_ID\n    LEFT JOIN accounts A on A.K_ACCOUNT_BK = S.ACCOUNT_EXPENSE_ACCOUNT_ID\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL_LINE", "model.dlh_quickbooks.W_ITEMS_D", "model.dlh_quickbooks.W_CUSTOMERS_D", "model.dlh_quickbooks.W_ACCOUNTS_D"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "staging", "BILL", "V_BILL_LINES_STG"], "unique_id": "model.dlh_quickbooks.V_BILL_LINES_STG", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "staging/BILL/V_BILL_LINES_STG.sql", "original_file_path": "models/staging/BILL/V_BILL_LINES_STG.sql", "name": "V_BILL_LINES_STG", "alias": "V_BILL_LINES_STG", "checksum": {"name": "sha256", "checksum": "b302bd54e6d0f91c69af05f90e10434f2d2d1b2870a31b29cc3bd25f57da2c0b"}, "tags": ["staging", "daily"], "refs": [["W_ITEMS_D"], ["W_CUSTOMERS_D"], ["W_ACCOUNTS_D"]], "sources": [["DEMO_QUICKBOOKS", "BILL_LINE"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/staging/BILL/V_BILL_LINES_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "view", "schema": "QUICKBOOKS", "tags": ["staging", "daily"]}, "created_at": 1648040066, "compiled_sql": "\n\nWITH source AS(\n    SELECT * FROM  DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"BILL_LINE\"\n),\nitems AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_ITEMS_D\n),\ncustomers AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_CUSTOMERS_D\n),\naccounts AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_ACCOUNTS_D\n),\nrename AS (\nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(CONCAT(S.BILL_ID,'-',INDEX),'00000000000000000000000000000000')) ) AS K_BILL_LINE_DLHK\n    ,MD5( TRIM(COALESCE(S.BILL_ID,'00000000000000000000000000000000')) ) AS K_BILL_DLHK\n    ,C.K_CUSTOMER_DLHK AS K_ITEM_EXPENSE_CUSTOMER_DLHK\n    ,I.K_ITEM_DLHK AS K_ITEM_EXPENSE_DLHK\n    ,I.K_EXPENSE_ACCOUNT_DLHK AS K_ITEM_EXPENSE_ACCOUNT_DLHK\n    ,C_ACCOUNT.K_CUSTOMER_DLHK AS K_ACCOUNT_EXPENSE_CUSTOMER_DLHK\n    ,A.K_ACCOUNT_DLHK AS K_ACCOUNT_EXPENSE_DLHK\n    --BUSINESS KEYS\n    ,S.BILL_ID AS K_BILL_BK\n    ,NULLIF(S.ITEM_EXPENSE_TAX_CODE_ID,'NON') AS K_ITEM_EXPENSE_TAX_CODE_BK\n    ,S.ITEM_EXPENSE_CLASS_ID AS K_ITEM_EXPENSE_CLASS_BK\n    ,S.ITEM_EXPENSE_CUSTOMER_ID AS K_ITEM_EXPENSE_CUSTOMER_BK\n    ,S.ITEM_EXPENSE_ITEM_ID AS K_ITEM_EXPENSE_ITEM_BK\n    ,I.K_EXPENSE_ACCOUNT_DLHK AS K_ITEM_EXPENSE_ACCOUNT_BK\n    ,NULLIF(S.ACCOUNT_EXPENSE_TAX_CODE_ID,'NON') AS K_ACCOUNT_EXPENSE_TAX_CODE_BK\n    ,S.ACCOUNT_EXPENSE_CLASS_ID AS K_ACCOUNT_EXPENSE_CLASS_BK\n    ,S.ACCOUNT_EXPENSE_CUSTOMER_ID AS K_ACCOUNT_EXPENSE_CUSTOMER_BK\n    ,S.ACCOUNT_EXPENSE_ACCOUNT_ID AS K_ACCOUNT_EXPENSE_BK\n    --ATTRIBUTES\n    ,S.INDEX AS A_INDEX    \n    ,S.DESCRIPTION AS A_DESCRIPTION\n    ,S.ITEM_EXPENSE_BILLABLE_STATUS AS A_ITEM_EXPENSE_BILLABLE_STATUS      \n    ,S.ACCOUNT_EXPENSE_BILLABLE_STATUS AS A_ACCOUNT_EXPENSE_BILLABLE_STATUS    \n    --METRICS\n    ,S.ACCOUNT_EXPENSE_TAX_AMOUNT::decimal(15,2) AS M_ACCOUNT_EXPENSE_TAX_AMOUNT\n    ,S.AMOUNT::decimal(15,2) AS M_AMOUNT\n    ,S.ITEM_EXPENSE_UNIT_PRICE::decimal(15,2) as M_ITEM_EXPENSE_UNIT_PRICE\n    ,S.ITEM_EXPENSE_QUANTITY AS M_ITEM_EXPENSE_QUANTITY\n\n     --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'ac401bff-43bb-4502-a9f4-e7bb93cec807' AS MD_INTGR_ID\nFROM\n    source as S\n    LEFT JOIN items I on I.K_ITEM_BK = S.ITEM_EXPENSE_ITEM_ID\n    LEFT JOIN customers C on C.K_CUSTOMER_BK = S.ITEM_EXPENSE_CUSTOMER_ID\n    LEFT JOIN customers C_ACCOUNT on C_ACCOUNT.K_CUSTOMER_BK = S.ACCOUNT_EXPENSE_CUSTOMER_ID\n    LEFT JOIN accounts A on A.K_ACCOUNT_BK = S.ACCOUNT_EXPENSE_ACCOUNT_ID\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_BILL_LINES_STG"}, "model.dlh_quickbooks.V_INVOICE_LINE_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    {{source(var('source_schema'),'INVOICE_LINE')}}\n),\naccounts AS (\n    SELECT * FROM {{ref('W_QKB_ACCOUNTS_D')}}\n),\n\nclass AS (\n    SELECT * FROM {{ref('W_QKB_CLASS_D')}}\n),\nitem AS (\n    SELECT * FROM {{ref('W_QKB_ITEMS_D')}}\n),\nrename AS \n(   \nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(CONCAT(I.ID,'-',I.INDEX),'00000000000000000000000000000000')) ) AS K_INVOICE_LINE_DLHK\n    ,MD5( TRIM(COALESCE(I.ID,'00000000000000000000000000000000')) ) AS K_INVOICE_DLHK\n    ,IT.K_ITEM_DLHK AS K_SALES_ITEM_ITEM_DLHK\n    ,CLS.K_CLASS_BK AS K_SALES_ITEM_CLASS_DLHK\n    ,A_DISCOUNT.K_ACCOUNT_DLHK AS K_DISCOUNT_ACCOUNT_DLHK\n    ,A_SALES_ACCOUNT.K_ACCOUNT_DLHK AS K_SALES_ITEM_ACCOUNT_DLHK\n    --BUSINESS KEYS\n    ,I.BUNDLE_ID AS K_BUNDLE_BK\n    ,I.DESCRIPTION_TAX_CODE_ID AS K_DESCRIPTION_TAX_CODE_BK\n    ,I.DISCOUNT_ACCOUNT_ID AS K_DISCOUNT_ACCOUNT_BK\n    ,I.DISCOUNT_CLASS_ID AS K_DISCOUNT_CLASS_BK\n    ,I.DISCOUNT_TAX_CODE_ID AS K_DISCOUNT_TAX_CODE_BK    \n    ,I.INVOICE_ID AS K_INVOICE_BK\n    ,I.SALES_ITEM_ACCOUNT_ID AS K_SALES_ITEM_ACCOUNT_BK\n    ,I.SALES_ITEM_CLASS_ID AS K_SALES_ITEM_CLASS_BK\n    ,I.SALES_ITEM_ITEM_ID AS K_SALES_ITEM_ITEM_BK\n    ,I.SALES_ITEM_TAX_CODE_ID AS K_SALES_ITEM_TAX_CODE_BK\n    ,I.SUB_TOTAL_ITEM_ID AS K_SUB_TOTAL_ITEM_BK\n    --ATTRIBUTES\n    ,I.DESCRIPTION AS A_DESCRIPTION\n    ,I.DESCRIPTION_SERVICE_DATE AS A_DESCRIPTION_SERVICE_DATE\n    ,I.DETAIL_TYPE AS A_DETAIL_TYPE\n    ,I.INDEX AS A_INDEX\n    ,I.LINE_NUM AS A_LINE_NUM\n    ,I.SALES_ITEM_SERVICE_DATE AS A_SALES_ITEM_SERVICE_DATE\n    --BOOLEAN\n    ,I.DISCOUNT_PERCENT_BASED AS B_DISCOUNT_PERCENT_BASED\n    --METRICS\n    ,I.AMOUNT::DECIMAL(15,2) AS M_AMOUNT\n    ,I.BUNDLE_QUANTITY::DECIMAL(15,2) AS M_BUNDLE_QUANTITY\n    ,I.DISCOUNT_DISCOUNT_PERCENT::DECIMAL(15,2) AS M_DISCOUNT_DISCOUNT_PERCENT\n    ,I.SALES_ITEM_DISCOUNT_AMOUNT::DECIMAL(15,2) AS M_SALES_ITEM_DISCOUNT_AMOUNT\n    ,I.SALES_ITEM_DISCOUNT_RATE::DECIMAL(15,2) AS M_SALES_ITEM_DISCOUNT_RATE\n    ,I.SALES_ITEM_QUANTITY::DECIMAL(15,2) AS M_SALES_ITEM_QUANTITY\n    ,I.SALES_ITEM_UNIT_PRICE::DECIMAL(15,2) AS M_SALES_ITEM_UNIT_PRICE\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID \nFROM  \n    source  I\n    LEFT JOIN item IT on IT.K_ITEM_DLHK = I.SALES_ITEM_ITEM_ID\n    LEFT JOIN class CLS on CLS.K_CLASS_BK = I.SALES_ITEM_CLASS_ID\n    LEFT JOIN accounts A_DISCOUNT ON A_DISCOUNT.K_ACCOUNT_BK = I.DISCOUNT_ACCOUNT_ID\n    LEFT JOIN accounts A_SALES_ACCOUNT ON A_SALES_ACCOUNT.K_ACCOUNT_BK = I.SALES_ITEM_ACCOUNT_ID\n)\n\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_quickbooks.DEMO_QUICKBOOKS.INVOICE_LINE", "model.dlh_quickbooks.W_ACCOUNTS_D", "model.dlh_quickbooks.W_CLASS_D", "model.dlh_quickbooks.W_ITEMS_D"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "staging", "INVOICES", "V_INVOICE_LINE_STG"], "unique_id": "model.dlh_quickbooks.V_INVOICE_LINE_STG", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "staging/INVOICES/V_INVOICE_LINE_STG.sql", "original_file_path": "models/staging/INVOICES/V_INVOICE_LINE_STG.sql", "name": "V_INVOICE_LINE_STG", "alias": "V_INVOICE_LINE_STG", "checksum": {"name": "sha256", "checksum": "0270fdadfff0a11ae595e19234524249ca045582e01be9a44cea8e8b0fc18f74"}, "tags": ["staging", "daily"], "refs": [["W_ACCOUNTS_D"], ["W_CLASS_D"], ["W_ITEMS_D"]], "sources": [["DEMO_QUICKBOOKS", "INVOICE_LINE"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/staging/INVOICES/V_INVOICE_LINE_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "view", "schema": "QUICKBOOKS", "tags": ["staging", "daily"]}, "created_at": 1648040066, "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"INVOICE_LINE\"\n),\naccounts AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_ACCOUNTS_D\n),\n\nclass AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_CLASS_D\n),\nitem AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_ITEMS_D\n),\nrename AS \n(   \nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(CONCAT(I.ID,'-',I.INDEX),'00000000000000000000000000000000')) ) AS K_INVOICE_LINE_DLHK\n    ,MD5( TRIM(COALESCE(I.ID,'00000000000000000000000000000000')) ) AS K_INVOICE_DLHK\n    ,IT.K_ITEM_DLHK AS K_SALES_ITEM_ITEM_DLHK\n    ,CLS.K_CLASS_BK AS K_SALES_ITEM_CLASS_DLHK\n    ,A_DISCOUNT.K_ACCOUNT_DLHK AS K_DISCOUNT_ACCOUNT_DLHK\n    ,A_SALES_ACCOUNT.K_ACCOUNT_DLHK AS K_SALES_ITEM_ACCOUNT_DLHK\n    --BUSINESS KEYS\n    ,I.BUNDLE_ID AS K_BUNDLE_BK\n    ,I.DESCRIPTION_TAX_CODE_ID AS K_DESCRIPTION_TAX_CODE_BK\n    ,I.DISCOUNT_ACCOUNT_ID AS K_DISCOUNT_ACCOUNT_BK\n    ,I.DISCOUNT_CLASS_ID AS K_DISCOUNT_CLASS_BK\n    ,I.DISCOUNT_TAX_CODE_ID AS K_DISCOUNT_TAX_CODE_BK    \n    ,I.INVOICE_ID AS K_INVOICE_BK\n    ,I.SALES_ITEM_ACCOUNT_ID AS K_SALES_ITEM_ACCOUNT_BK\n    ,I.SALES_ITEM_CLASS_ID AS K_SALES_ITEM_CLASS_BK\n    ,I.SALES_ITEM_ITEM_ID AS K_SALES_ITEM_ITEM_BK\n    ,I.SALES_ITEM_TAX_CODE_ID AS K_SALES_ITEM_TAX_CODE_BK\n    ,I.SUB_TOTAL_ITEM_ID AS K_SUB_TOTAL_ITEM_BK\n    --ATTRIBUTES\n    ,I.DESCRIPTION AS A_DESCRIPTION\n    ,I.DESCRIPTION_SERVICE_DATE AS A_DESCRIPTION_SERVICE_DATE\n    ,I.DETAIL_TYPE AS A_DETAIL_TYPE\n    ,I.INDEX AS A_INDEX\n    ,I.LINE_NUM AS A_LINE_NUM\n    ,I.SALES_ITEM_SERVICE_DATE AS A_SALES_ITEM_SERVICE_DATE\n    --BOOLEAN\n    ,I.DISCOUNT_PERCENT_BASED AS B_DISCOUNT_PERCENT_BASED\n    --METRICS\n    ,I.AMOUNT::DECIMAL(15,2) AS M_AMOUNT\n    ,I.BUNDLE_QUANTITY::DECIMAL(15,2) AS M_BUNDLE_QUANTITY\n    ,I.DISCOUNT_DISCOUNT_PERCENT::DECIMAL(15,2) AS M_DISCOUNT_DISCOUNT_PERCENT\n    ,I.SALES_ITEM_DISCOUNT_AMOUNT::DECIMAL(15,2) AS M_SALES_ITEM_DISCOUNT_AMOUNT\n    ,I.SALES_ITEM_DISCOUNT_RATE::DECIMAL(15,2) AS M_SALES_ITEM_DISCOUNT_RATE\n    ,I.SALES_ITEM_QUANTITY::DECIMAL(15,2) AS M_SALES_ITEM_QUANTITY\n    ,I.SALES_ITEM_UNIT_PRICE::DECIMAL(15,2) AS M_SALES_ITEM_UNIT_PRICE\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'ac401bff-43bb-4502-a9f4-e7bb93cec807' AS MD_INTGR_ID \nFROM  \n    source  I\n    LEFT JOIN item IT on IT.K_ITEM_DLHK = I.SALES_ITEM_ITEM_ID\n    LEFT JOIN class CLS on CLS.K_CLASS_BK = I.SALES_ITEM_CLASS_ID\n    LEFT JOIN accounts A_DISCOUNT ON A_DISCOUNT.K_ACCOUNT_BK = I.DISCOUNT_ACCOUNT_ID\n    LEFT JOIN accounts A_SALES_ACCOUNT ON A_SALES_ACCOUNT.K_ACCOUNT_BK = I.SALES_ITEM_ACCOUNT_ID\n)\n\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_INVOICE_LINE_STG"}, "model.dlh_quickbooks.V_INVOICE_HEADER_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    {{source(var('source_schema'),'INVOICE')}}\n),\naccounts AS (\n    SELECT * FROM {{ref('W_QKB_ACCOUNTS_D')}}\n),\ncurrency AS (\n    SELECT * FROM {{ref('W_QKB_CURRENCY_D')}}\n),\nclass AS (\n    SELECT * FROM {{ref('W_QKB_CLASS_D')}}\n),\ncustomers AS (\n    SELECT * FROM {{ref('W_QKB_CUSTOMERS_D')}}\n),\nterm AS (\n  SELECT  *  FROM  {{ref('W_QKB_TERM_D')}}\n),\npayments AS (\n  SELECT  *  FROM  {{ref('W_QKB_PAYMENTS_F')}}\n),\ninvoice_linked AS (\n  SELECT  *  FROM  {{source(var('source_schema'),'INVOICE_LINKED_TXN')}}\n),\ninvoice_payment AS (\n  SELECT \n    IL.INVOICE_ID,\n    SUM(P.M_AMOUNT) PAYMENT_AMOUNT,\n    MAX(P.A_TRANSACTION_DATE) AS TRANSACTION_DATE,\n    MAX(P.A_TRANSACTION_STATUS) AS TRANSACTION_STATUS\n  FROM \n  invoice_linked IL\n  INNER JOIN source S on S.ID = IL.INVOICE_ID \n  INNER JOIN payments P ON P.K_PAYMENT_BK = IL.PAYMENT_ID\n  GROUP BY \n  IL.INVOICE_ID\n),\nrename AS \n(   \nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(I.ID,'00000000000000000000000000000000')) ) AS K_INVOICE_DLHK\n    ,T.K_TERM_DLHK\n    ,C.K_CURRENCY_DLHK\n    ,CUS.K_CUSTOMER_DLHK\n    ,A.K_ACCOUNT_DLHK AS K_DEPOSIT_TO_ACCOUNT_DLHK\n    --BK\n    ,I.ID AS K_INVOICE_BK\n    ,I.SALES_TERM_ID AS K_SALES_TERM_BK\n    ,I.BILLING_ADDRESS_ID AS K_BILLING_ADDRESS_BK\n    ,I.CURRENCY_ID AS K_CURRENCY_BK\n    ,I.CLASS_ID AS K_CLASS_BK\n    ,I.DEPARTMENT_ID AS K_DEPARTMENT_BK\n    ,I.CUSTOMER_ID AS K_CUSTOMER_BK\n    ,I.SHIPPING_ADDRESS_ID AS K_SHIPPING_ADDRESS_BK\n    ,I.TAX_CODE_ID AS K_TAX_CODE_BK\n    ,I.DEPOSIT_TO_ACCOUNT_ID AS K_DEPOSIT_TO_ACCOUNT_BK       \n    --ATTRIBUTES    \n    ,I.DOC_NUMBER AS A_DOC_NUMBER\n    ,I.TRANSACTION_DATE AS A_TRANSACTION_DATE\n    ,I.BILLING_BCC_EMAIL AS A_BILLING_BCC_EMAIL\n    ,I.TRANSACTION_SOURCE AS A_TRANSACTION_SOURCE  \n    \n    ,I.BILLING_EMAIL AS A_BILLING_EMAIL\n    ,I.SYNC_TOKEN AS A_SYNC_TOKEN\n    ,I.CREATED_AT AS A_CREATED_AT_DTS\n    ,I.UPDATED_AT AS A_UPDATED_AT_DTS\n    ,I.SHIP_DATE AS A_SHIP_DATE\n    ,I.GLOBAL_TAX_CALCULATION AS A_GLOBAL_TAX_CALCULATION    \n    ,I.DELIVERY_TYPE AS A_DELIVERY_TYPE    \n    ,I.PRINT_STATUS AS A_PRINT_STATUS\n    ,I.DELIVERY_TIME AS A_DELIVERY_TIME\n    ,I.BILLING_CC_EMAIL AS A_BILLING_CC_EMAIL\n    ,I.CUSTOMER_MEMO AS A_CUSTOMER_MEMO\n    ,I.DUE_DATE AS A_DUE_DATE\n    ,I.EMAIL_STATUS AS A_EMAIL_STATUS    \n    ,I.PRIVATE_NOTE AS A_PRIVATE_NOTE\n    ,I.TRACKING_NUMBER AS A_TRACKING_NUMBER \n    ,IP.TRANSACTION_DATE AS A_PAYMENT_DATE\n    ,IP.TRANSACTION_STATUS AS A_PAYMENT_STATUS\n    --METRICS\n    ,IP.PAYMENT_AMOUNT::DECIMAL(15,2) AS A_PAYMENT_AMOUNT\n    ,I.DEPOSIT::DECIMAL(15,2) AS M_DEPOSIT\n    ,I.TOTAL_AMOUNT::DECIMAL(15,2) AS M_TOTAL_AMOUNT\n    ,I.EXCHANGE_RATE::DECIMAL(15,2) AS M_EXCHANGE_RATE    \n    ,I.TOTAL_TAX::DECIMAL(15,2) AS M_TOTAL_TAX\n    ,I.HOME_TOTAL_AMOUNT::DECIMAL(15,2) AS M_HOME_TOTAL_AMOUNT\n    ,I.BALANCE::DECIMAL(15,2) AS M_BALANCE\n    ,I.HOME_BALANCE::DECIMAL(15,2) AS M_HOME_BALANCE      \n    --BOLEAN\n    ,I.ALLOW_IPNPAYMENT AS B_ALLOW_IPNPAYMENT\n    ,I.ALLOW_ONLINE_ACHPAYMENT AS B_ALLOW_ONLINE_ACHPAYMENT\n    ,I.APPLY_TAX_AFTER_DISCOUNT AS B_APPLY_TAX_AFTER_DISCOUNT\n    ,I.ALLOW_ONLINE_CREDIT_CARD_PAYMENT AS B_ALLOW_ONLINE_CREDIT_CARD_PAYMENT\n    ,I.ALLOW_ONLINE_PAYMENT AS B_ALLOW_ONLINE_PAYMENT\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID \nFROM  \n    source  I\n    LEFT JOIN currency C ON C.K_CURRENCY_BK = I.CURRENCY_ID\n    LEFT JOIN term T ON t.K_TERM_BK = I.SALES_TERM_ID\n    LEFT JOIN customers CUS ON CUS.K_CUSTOMER_BK = I.CUSTOMER_ID\n    LEFT JOIN class CLS on CLS.K_CLASS_BK = I.CLASS_ID\n    LEFT JOIN accounts A ON A.K_ACCOUNT_BK = I.DEPOSIT_TO_ACCOUNT_ID\n    LEFT JOIN invoice_payment IP ON IP.INVOICE_ID = I.ID\n)\n\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_quickbooks.DEMO_QUICKBOOKS.INVOICE", "source.dlh_quickbooks.DEMO_QUICKBOOKS.INVOICE_LINKED_TXN", "model.dlh_quickbooks.W_ACCOUNTS_D", "model.dlh_quickbooks.W_CURRENCY_D", "model.dlh_quickbooks.W_CLASS_D", "model.dlh_quickbooks.W_CUSTOMERS_D", "model.dlh_quickbooks.W_TERM_D", "model.dlh_quickbooks.W_PAYMENTS_F"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "staging", "INVOICES", "V_INVOICE_HEADER_STG"], "unique_id": "model.dlh_quickbooks.V_INVOICE_HEADER_STG", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "staging/INVOICES/V_INVOICE_HEADER_STG.sql", "original_file_path": "models/staging/INVOICES/V_INVOICE_HEADER_STG.sql", "name": "V_INVOICE_HEADER_STG", "alias": "V_INVOICE_HEADER_STG", "checksum": {"name": "sha256", "checksum": "e65d0a9158a37a8670931f1df11229da1dc7ede15337269b4a7f38a258c686f3"}, "tags": ["staging", "daily"], "refs": [["W_ACCOUNTS_D"], ["W_CURRENCY_D"], ["W_CLASS_D"], ["W_CUSTOMERS_D"], ["W_TERM_D"], ["W_PAYMENTS_F"]], "sources": [["DEMO_QUICKBOOKS", "INVOICE"], ["DEMO_QUICKBOOKS", "INVOICE_LINKED_TXN"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/staging/INVOICES/V_INVOICE_HEADER_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "view", "schema": "QUICKBOOKS", "tags": ["staging", "daily"]}, "created_at": 1648040066, "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"INVOICE\"\n),\naccounts AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_ACCOUNTS_D\n),\ncurrency AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_CURRENCY_D\n),\nclass AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_CLASS_D\n),\ncustomers AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_CUSTOMERS_D\n),\nterm AS (\n  SELECT  *  FROM  DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_TERM_D\n),\npayments AS (\n  SELECT  *  FROM  DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_PAYMENTS_F\n),\ninvoice_linked AS (\n  SELECT  *  FROM  DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"INVOICE_LINKED_TXN\"\n),\ninvoice_payment AS (\n  SELECT \n    IL.INVOICE_ID,\n    SUM(P.M_AMOUNT) PAYMENT_AMOUNT,\n    MAX(P.A_TRANSACTION_DATE) AS TRANSACTION_DATE,\n    MAX(P.A_TRANSACTION_STATUS) AS TRANSACTION_STATUS\n  FROM \n  invoice_linked IL\n  INNER JOIN source S on S.ID = IL.INVOICE_ID \n  INNER JOIN payments P ON P.K_PAYMENT_BK = IL.PAYMENT_ID\n  GROUP BY \n  IL.INVOICE_ID\n),\nrename AS \n(   \nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(I.ID,'00000000000000000000000000000000')) ) AS K_INVOICE_DLHK\n    ,T.K_TERM_DLHK\n    ,C.K_CURRENCY_DLHK\n    ,CUS.K_CUSTOMER_DLHK\n    ,A.K_ACCOUNT_DLHK AS K_DEPOSIT_TO_ACCOUNT_DLHK\n    --BK\n    ,I.ID AS K_INVOICE_BK\n    ,I.SALES_TERM_ID AS K_SALES_TERM_BK\n    ,I.BILLING_ADDRESS_ID AS K_BILLING_ADDRESS_BK\n    ,I.CURRENCY_ID AS K_CURRENCY_BK\n    ,I.CLASS_ID AS K_CLASS_BK\n    ,I.DEPARTMENT_ID AS K_DEPARTMENT_BK\n    ,I.CUSTOMER_ID AS K_CUSTOMER_BK\n    ,I.SHIPPING_ADDRESS_ID AS K_SHIPPING_ADDRESS_BK\n    ,I.TAX_CODE_ID AS K_TAX_CODE_BK\n    ,I.DEPOSIT_TO_ACCOUNT_ID AS K_DEPOSIT_TO_ACCOUNT_BK       \n    --ATTRIBUTES    \n    ,I.DOC_NUMBER AS A_DOC_NUMBER\n    ,I.TRANSACTION_DATE AS A_TRANSACTION_DATE\n    ,I.BILLING_BCC_EMAIL AS A_BILLING_BCC_EMAIL\n    ,I.TRANSACTION_SOURCE AS A_TRANSACTION_SOURCE  \n    \n    ,I.BILLING_EMAIL AS A_BILLING_EMAIL\n    ,I.SYNC_TOKEN AS A_SYNC_TOKEN\n    ,I.CREATED_AT AS A_CREATED_AT_DTS\n    ,I.UPDATED_AT AS A_UPDATED_AT_DTS\n    ,I.SHIP_DATE AS A_SHIP_DATE\n    ,I.GLOBAL_TAX_CALCULATION AS A_GLOBAL_TAX_CALCULATION    \n    ,I.DELIVERY_TYPE AS A_DELIVERY_TYPE    \n    ,I.PRINT_STATUS AS A_PRINT_STATUS\n    ,I.DELIVERY_TIME AS A_DELIVERY_TIME\n    ,I.BILLING_CC_EMAIL AS A_BILLING_CC_EMAIL\n    ,I.CUSTOMER_MEMO AS A_CUSTOMER_MEMO\n    ,I.DUE_DATE AS A_DUE_DATE\n    ,I.EMAIL_STATUS AS A_EMAIL_STATUS    \n    ,I.PRIVATE_NOTE AS A_PRIVATE_NOTE\n    ,I.TRACKING_NUMBER AS A_TRACKING_NUMBER \n    ,IP.TRANSACTION_DATE AS A_PAYMENT_DATE\n    ,IP.TRANSACTION_STATUS AS A_PAYMENT_STATUS\n    --METRICS\n    ,IP.PAYMENT_AMOUNT::DECIMAL(15,2) AS A_PAYMENT_AMOUNT\n    ,I.DEPOSIT::DECIMAL(15,2) AS M_DEPOSIT\n    ,I.TOTAL_AMOUNT::DECIMAL(15,2) AS M_TOTAL_AMOUNT\n    ,I.EXCHANGE_RATE::DECIMAL(15,2) AS M_EXCHANGE_RATE    \n    ,I.TOTAL_TAX::DECIMAL(15,2) AS M_TOTAL_TAX\n    ,I.HOME_TOTAL_AMOUNT::DECIMAL(15,2) AS M_HOME_TOTAL_AMOUNT\n    ,I.BALANCE::DECIMAL(15,2) AS M_BALANCE\n    ,I.HOME_BALANCE::DECIMAL(15,2) AS M_HOME_BALANCE      \n    --BOLEAN\n    ,I.ALLOW_IPNPAYMENT AS B_ALLOW_IPNPAYMENT\n    ,I.ALLOW_ONLINE_ACHPAYMENT AS B_ALLOW_ONLINE_ACHPAYMENT\n    ,I.APPLY_TAX_AFTER_DISCOUNT AS B_APPLY_TAX_AFTER_DISCOUNT\n    ,I.ALLOW_ONLINE_CREDIT_CARD_PAYMENT AS B_ALLOW_ONLINE_CREDIT_CARD_PAYMENT\n    ,I.ALLOW_ONLINE_PAYMENT AS B_ALLOW_ONLINE_PAYMENT\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'ac401bff-43bb-4502-a9f4-e7bb93cec807' AS MD_INTGR_ID \nFROM  \n    source  I\n    LEFT JOIN currency C ON C.K_CURRENCY_BK = I.CURRENCY_ID\n    LEFT JOIN term T ON t.K_TERM_BK = I.SALES_TERM_ID\n    LEFT JOIN customers CUS ON CUS.K_CUSTOMER_BK = I.CUSTOMER_ID\n    LEFT JOIN class CLS on CLS.K_CLASS_BK = I.CLASS_ID\n    LEFT JOIN accounts A ON A.K_ACCOUNT_BK = I.DEPOSIT_TO_ACCOUNT_ID\n    LEFT JOIN invoice_payment IP ON IP.INVOICE_ID = I.ID\n)\n\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_INVOICE_HEADER_STG"}, "model.dlh_quickbooks.V_INVOICE_LINE_BUNDLE_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    {{source(var('source_schema'),'INVOICE_LINE_BUNDLE')}}\n),\ninvoice_line AS (\n    SELECT * FROM {{ref('V_QKB_INVOICE_LINE_STG')}}\n),\naccounts AS (\n    SELECT * FROM {{ref('W_QKB_ACCOUNTS_D')}}\n),\n\nclass AS (\n    SELECT * FROM {{ref('W_QKB_CLASS_D')}}\n),\nitem AS (\n    SELECT * FROM {{ref('W_QKB_ITEMS_D')}}\n),\nrename AS \n(   \nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(CONCAT(I.INVOICE_ID,'-',I.INVOICE_LINE_INDEX,'-',I.INDEX),'00000000000000000000000000000000')) ) AS K_INVOICE_LINE_BUNDLE_DLHK\n    ,IL.K_INVOICE_LINE_DLHK    \n    ,IL.K_INVOICE_DLHK\n    ,IT.K_ITEM_DLHK\n    ,CLS.K_CLASS_DLHK\n    ,A.K_ACCOUNT_DLHK\n    --BUSINESS KEYS\n    ,I.INVOICE_ID AS K_INVOICE_BK\n    ,I.ITEM_ID AS K_ITEM_BK\n    ,I.CLASS_ID AS K_CLASS_BK\n    ,I.ACCOUNT_ID AS K_ACCOUNT_BK\n    ,I.TAX_CODE_ID AS K_TAX_CODE_BK\n    --ATTRIBUTES\n    ,I.INVOICE_LINE_INDEX AS A_INVOICE_LINE_INDEX    \n    ,I.INDEX AS A_INDEX\n    ,I.DESCRIPTION AS A_DESCRIPTION\n    ,I.LINE_NUM AS A_LINE_NUM\n    ,I.SERVICE_DATE AS A_SERVICE_DATE\n    --METRICS\n    ,I.AMOUNT::DECIMAL(15,2) AS M_AMOUNT\n    ,I.UNIT_PRICE::DECIMAL(15,2) AS M_UNIT_PRICE\n    ,I.QUANTITY::DECIMAL(15,2) AS M_QUANTITY\n    ,I.DISCOUNT_RATE::DECIMAL(15,2) AS M_DISCOUNT_RATE\n    ,I.DISCOUNT_AMOUNT::DECIMAL(15,2) AS M_DISCOUNT_AMOUNT    \n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID \nFROM  \n    source  I\n    LEFT JOIN invoice_line IL ON IL.K_INVOICE_BK = I.INVOICE_ID AND I.INVOICE_LINE_INDEX = IL.A_INDEX\n    LEFT JOIN item IT on IT.K_ITEM_DLHK = I.ITEM_ID\n    LEFT JOIN class CLS on CLS.K_CLASS_BK = I.CLASS_ID\n    LEFT JOIN accounts A ON A.K_ACCOUNT_BK = I.ACCOUNT_ID    \n)\n\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_quickbooks.DEMO_QUICKBOOKS.INVOICE_LINE_BUNDLE", "model.dlh_quickbooks.V_INVOICE_LINE_STG", "model.dlh_quickbooks.W_ACCOUNTS_D", "model.dlh_quickbooks.W_CLASS_D", "model.dlh_quickbooks.W_ITEMS_D"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "staging", "INVOICES", "V_INVOICE_LINE_BUNDLE_STG"], "unique_id": "model.dlh_quickbooks.V_INVOICE_LINE_BUNDLE_STG", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "staging/INVOICES/V_INVOICE_LINE_BUNDLE_STG.sql", "original_file_path": "models/staging/INVOICES/V_INVOICE_LINE_BUNDLE_STG.sql", "name": "V_INVOICE_LINE_BUNDLE_STG", "alias": "V_INVOICE_LINE_BUNDLE_STG", "checksum": {"name": "sha256", "checksum": "846fa0c599a36c78afa3b106ce36cba29fc021828f517281dba493576dd2e45e"}, "tags": ["staging", "daily"], "refs": [["V_INVOICE_LINE_STG"], ["W_ACCOUNTS_D"], ["W_CLASS_D"], ["W_ITEMS_D"]], "sources": [["DEMO_QUICKBOOKS", "INVOICE_LINE_BUNDLE"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/staging/INVOICES/V_INVOICE_LINE_BUNDLE_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "view", "schema": "QUICKBOOKS", "tags": ["staging", "daily"]}, "created_at": 1648040066, "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"INVOICE_LINE_BUNDLE\"\n),\ninvoice_line AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_INVOICE_LINE_STG\n),\naccounts AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_ACCOUNTS_D\n),\n\nclass AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_CLASS_D\n),\nitem AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_ITEMS_D\n),\nrename AS \n(   \nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(CONCAT(I.INVOICE_ID,'-',I.INVOICE_LINE_INDEX,'-',I.INDEX),'00000000000000000000000000000000')) ) AS K_INVOICE_LINE_BUNDLE_DLHK\n    ,IL.K_INVOICE_LINE_DLHK    \n    ,IL.K_INVOICE_DLHK\n    ,IT.K_ITEM_DLHK\n    ,CLS.K_CLASS_DLHK\n    ,A.K_ACCOUNT_DLHK\n    --BUSINESS KEYS\n    ,I.INVOICE_ID AS K_INVOICE_BK\n    ,I.ITEM_ID AS K_ITEM_BK\n    ,I.CLASS_ID AS K_CLASS_BK\n    ,I.ACCOUNT_ID AS K_ACCOUNT_BK\n    ,I.TAX_CODE_ID AS K_TAX_CODE_BK\n    --ATTRIBUTES\n    ,I.INVOICE_LINE_INDEX AS A_INVOICE_LINE_INDEX    \n    ,I.INDEX AS A_INDEX\n    ,I.DESCRIPTION AS A_DESCRIPTION\n    ,I.LINE_NUM AS A_LINE_NUM\n    ,I.SERVICE_DATE AS A_SERVICE_DATE\n    --METRICS\n    ,I.AMOUNT::DECIMAL(15,2) AS M_AMOUNT\n    ,I.UNIT_PRICE::DECIMAL(15,2) AS M_UNIT_PRICE\n    ,I.QUANTITY::DECIMAL(15,2) AS M_QUANTITY\n    ,I.DISCOUNT_RATE::DECIMAL(15,2) AS M_DISCOUNT_RATE\n    ,I.DISCOUNT_AMOUNT::DECIMAL(15,2) AS M_DISCOUNT_AMOUNT    \n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'ac401bff-43bb-4502-a9f4-e7bb93cec807' AS MD_INTGR_ID \nFROM  \n    source  I\n    LEFT JOIN invoice_line IL ON IL.K_INVOICE_BK = I.INVOICE_ID AND I.INVOICE_LINE_INDEX = IL.A_INDEX\n    LEFT JOIN item IT on IT.K_ITEM_DLHK = I.ITEM_ID\n    LEFT JOIN class CLS on CLS.K_CLASS_BK = I.CLASS_ID\n    LEFT JOIN accounts A ON A.K_ACCOUNT_BK = I.ACCOUNT_ID    \n)\n\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_INVOICE_LINE_BUNDLE_STG"}, "model.dlh_quickbooks.V_INVOICES_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\nWITH INVOICE AS (\n    SELECT *\n    FROM {{ref('V_QKB_INVOICE_HEADER_STG')}}\n),\n\nINVOICE_LINE AS (\n    SELECT *\n    FROM {{ref('V_QKB_INVOICE_LINE_STG')}}\n),\nINVOICE_LINE_BUNDLE AS (\n    SELECT *\n    FROM {{ref('V_QKB_INVOICE_LINE_BUNDLE_STG')}}\n),\nFINAL AS (\n    SELECT\n    --DLHK\n    ILB.K_INVOICE_LINE_BUNDLE_DLHK\n    ,IL.K_INVOICE_LINE_DLHK\n    ,I.K_INVOICE_DLHK\n    ,I.K_TERM_DLHK\n    ,I.K_CURRENCY_DLHK\n    ,I.K_CUSTOMER_DLHK\n    ,I.K_DEPOSIT_TO_ACCOUNT_DLHK\n    \n\n    ,IL.K_SALES_ITEM_ITEM_DLHK\n    ,IL.K_SALES_ITEM_CLASS_DLHK\n    ,IL.K_DISCOUNT_ACCOUNT_DLHK\n    ,IL.K_SALES_ITEM_ACCOUNT_DLHK\n    \n    ,ILB.K_ITEM_DLHK AS K_INVOICE_LINE_BUNDLE_ITEM_DLHK\n    ,ILB.K_CLASS_DLHK AS K_INVOICE_LINE_BUNDLE_CLASS_DLHK\n    ,ILB.K_ACCOUNT_DLHK AS K_INVOICE_LINE_BUNDLE_ACCOUNT_DLHK\n\n\n    --BK\n    ,I.K_INVOICE_BK\n    ,I.K_SALES_TERM_BK\n    ,I.K_BILLING_ADDRESS_BK\n    ,I.K_CURRENCY_BK\n    ,I.K_CLASS_BK\n    ,I.K_DEPARTMENT_BK\n    ,I.K_CUSTOMER_BK\n    ,I.K_SHIPPING_ADDRESS_BK\n    ,I.K_TAX_CODE_BK\n    ,I.K_DEPOSIT_TO_ACCOUNT_BK\n\n    ,IL.K_BUNDLE_BK\n    ,IL.K_DESCRIPTION_TAX_CODE_BK\n    ,IL.K_DISCOUNT_ACCOUNT_BK\n    ,IL.K_DISCOUNT_CLASS_BK\n    ,IL.K_DISCOUNT_TAX_CODE_BK    \n    ,IL.K_SALES_ITEM_ACCOUNT_BK\n    ,IL.K_SALES_ITEM_CLASS_BK\n    ,IL.K_SALES_ITEM_ITEM_BK\n    ,IL.K_SALES_ITEM_TAX_CODE_BK\n    ,IL.K_SUB_TOTAL_ITEM_BK\n    --ATTRIBUTES\n    ,I.A_DOC_NUMBER\n    ,I.A_TRANSACTION_DATE\n    ,I.A_BILLING_BCC_EMAIL\n    ,I.A_TRANSACTION_SOURCE\n    ,I.A_BILLING_EMAIL\n    ,I.A_SYNC_TOKEN\n    ,I.A_CREATED_AT_DTS\n    ,I.A_UPDATED_AT_DTS\n    ,I.A_SHIP_DATE\n    ,I.A_GLOBAL_TAX_CALCULATION\n    ,I.A_DELIVERY_TYPE\n    ,I.A_PRINT_STATUS\n    ,I.A_DELIVERY_TIME\n    ,I.A_BILLING_CC_EMAIL\n    ,I.A_CUSTOMER_MEMO\n    ,I.A_DUE_DATE\n    ,I.A_EMAIL_STATUS\n    ,I.A_PRIVATE_NOTE\n    ,I.A_TRACKING_NUMBER\n    ,I.A_PAYMENT_DATE\n    ,I.A_PAYMENT_STATUS\n    ,I.A_PAYMENT_AMOUNT\n\n    ,IL.A_DESCRIPTION AS A_INVOICE_LINE_DESCRIPTION\n    ,IL.A_DESCRIPTION_SERVICE_DATE\n    ,IL.A_DETAIL_TYPE\n    ,IL.A_INDEX\n    ,IL.A_LINE_NUM\n    ,IL.A_SALES_ITEM_SERVICE_DATE\n    \n    ,ILB.A_DESCRIPTION AS A_INVOICE_LINE_BUNDLE_DESCRIPTION\n    ,ILB.A_LINE_NUM AS A_INVOICE_LINE_BUNDLE_LINE_NUM\n    ,ILB.A_SERVICE_DATE AS A_INVOICE_LINE_BUNDLE_SERVICE_DATE\n    --METRICS\n    /*,I.M_DEPOSIT\n    ,I.M_TOTAL_AMOUNT\n    ,I.M_EXCHANGE_RATE\n    ,I.M_TOTAL_TAX\n    ,I.M_HOME_TOTAL_AMOUNT\n    ,I.M_BALANCE\n    ,I.M_HOME_BALANCE*/\n    \n    ,IL.M_AMOUNT\n    ,IL.M_BUNDLE_QUANTITY\n    ,IL.M_DISCOUNT_DISCOUNT_PERCENT\n    ,IL.M_SALES_ITEM_DISCOUNT_AMOUNT\n    ,IL.M_SALES_ITEM_DISCOUNT_RATE\n    ,IL.M_SALES_ITEM_QUANTITY\n    ,IL.M_SALES_ITEM_UNIT_PRICE\n\n    ,ILB.M_AMOUNT AS M_INVOICE_LINE_BUNDLE_AMOUNT\n    ,ILB.M_UNIT_PRICE AS M_INVOICE_LINE_BUNDLE_UNIT_PRICE\n    ,ILB.M_QUANTITY AS M_INVOICE_LINE_BUNDLE_QUANTITY\n    ,ILB.M_DISCOUNT_AMOUNT AS M_INVOICE_LINE_DISCOUNT_AMOUNT\n    ,ILB.M_DISCOUNT_RATE AS M_INVOICE_LINE_BUNDLE_DISCOUNT_RATE\n    --BOOLEAN\n    ,I.B_ALLOW_IPNPAYMENT\n    ,I.B_ALLOW_ONLINE_ACHPAYMENT\n    ,I.B_APPLY_TAX_AFTER_DISCOUNT\n    ,I.B_ALLOW_ONLINE_CREDIT_CARD_PAYMENT\n    ,I.B_ALLOW_ONLINE_PAYMENT\n\n    ,IL.B_DISCOUNT_PERCENT_BASED\n\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\n    FROM INVOICE I\n\n    INNER JOIN INVOICE_LINE IL \n        ON I.K_INVOICE_DLHK = IL.K_INVOICE_DLHK\n    LEFT JOIN INVOICE_LINE_BUNDLE ILB\n        ON IL.K_INVOICE_LINE_DLHK = ILB.K_INVOICE_LINE_DLHK\n)\n\nSELECT *\nFROM FINAL", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_quickbooks.V_INVOICE_HEADER_STG", "model.dlh_quickbooks.V_INVOICE_LINE_STG", "model.dlh_quickbooks.V_INVOICE_LINE_BUNDLE_STG"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "staging", "INVOICES", "V_INVOICES_STG"], "unique_id": "model.dlh_quickbooks.V_INVOICES_STG", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "staging/INVOICES/V_INVOICES_STG.sql", "original_file_path": "models/staging/INVOICES/V_INVOICES_STG.sql", "name": "V_INVOICES_STG", "alias": "V_INVOICES_STG", "checksum": {"name": "sha256", "checksum": "ca0b2b1dbcda964ad91234a2b8c348df2cec4e76f34eee5fdbd246f895d32093"}, "tags": ["staging", "daily"], "refs": [["V_INVOICE_HEADER_STG"], ["V_INVOICE_LINE_STG"], ["V_INVOICE_LINE_BUNDLE_STG"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/staging/INVOICES/V_INVOICES_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "view", "schema": "QUICKBOOKS", "tags": ["staging", "daily"]}, "created_at": 1648040066, "compiled_sql": "\n\nWITH INVOICE AS (\n    SELECT *\n    FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_INVOICE_HEADER_STG\n),\n\nINVOICE_LINE AS (\n    SELECT *\n    FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_INVOICE_LINE_STG\n),\nINVOICE_LINE_BUNDLE AS (\n    SELECT *\n    FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_INVOICE_LINE_BUNDLE_STG\n),\nFINAL AS (\n    SELECT\n    --DLHK\n    ILB.K_INVOICE_LINE_BUNDLE_DLHK\n    ,IL.K_INVOICE_LINE_DLHK\n    ,I.K_INVOICE_DLHK\n    ,I.K_TERM_DLHK\n    ,I.K_CURRENCY_DLHK\n    ,I.K_CUSTOMER_DLHK\n    ,I.K_DEPOSIT_TO_ACCOUNT_DLHK\n    \n\n    ,IL.K_SALES_ITEM_ITEM_DLHK\n    ,IL.K_SALES_ITEM_CLASS_DLHK\n    ,IL.K_DISCOUNT_ACCOUNT_DLHK\n    ,IL.K_SALES_ITEM_ACCOUNT_DLHK\n    \n    ,ILB.K_ITEM_DLHK AS K_INVOICE_LINE_BUNDLE_ITEM_DLHK\n    ,ILB.K_CLASS_DLHK AS K_INVOICE_LINE_BUNDLE_CLASS_DLHK\n    ,ILB.K_ACCOUNT_DLHK AS K_INVOICE_LINE_BUNDLE_ACCOUNT_DLHK\n\n\n    --BK\n    ,I.K_INVOICE_BK\n    ,I.K_SALES_TERM_BK\n    ,I.K_BILLING_ADDRESS_BK\n    ,I.K_CURRENCY_BK\n    ,I.K_CLASS_BK\n    ,I.K_DEPARTMENT_BK\n    ,I.K_CUSTOMER_BK\n    ,I.K_SHIPPING_ADDRESS_BK\n    ,I.K_TAX_CODE_BK\n    ,I.K_DEPOSIT_TO_ACCOUNT_BK\n\n    ,IL.K_BUNDLE_BK\n    ,IL.K_DESCRIPTION_TAX_CODE_BK\n    ,IL.K_DISCOUNT_ACCOUNT_BK\n    ,IL.K_DISCOUNT_CLASS_BK\n    ,IL.K_DISCOUNT_TAX_CODE_BK    \n    ,IL.K_SALES_ITEM_ACCOUNT_BK\n    ,IL.K_SALES_ITEM_CLASS_BK\n    ,IL.K_SALES_ITEM_ITEM_BK\n    ,IL.K_SALES_ITEM_TAX_CODE_BK\n    ,IL.K_SUB_TOTAL_ITEM_BK\n    --ATTRIBUTES\n    ,I.A_DOC_NUMBER\n    ,I.A_TRANSACTION_DATE\n    ,I.A_BILLING_BCC_EMAIL\n    ,I.A_TRANSACTION_SOURCE\n    ,I.A_BILLING_EMAIL\n    ,I.A_SYNC_TOKEN\n    ,I.A_CREATED_AT_DTS\n    ,I.A_UPDATED_AT_DTS\n    ,I.A_SHIP_DATE\n    ,I.A_GLOBAL_TAX_CALCULATION\n    ,I.A_DELIVERY_TYPE\n    ,I.A_PRINT_STATUS\n    ,I.A_DELIVERY_TIME\n    ,I.A_BILLING_CC_EMAIL\n    ,I.A_CUSTOMER_MEMO\n    ,I.A_DUE_DATE\n    ,I.A_EMAIL_STATUS\n    ,I.A_PRIVATE_NOTE\n    ,I.A_TRACKING_NUMBER\n    ,I.A_PAYMENT_DATE\n    ,I.A_PAYMENT_STATUS\n    ,I.A_PAYMENT_AMOUNT\n\n    ,IL.A_DESCRIPTION AS A_INVOICE_LINE_DESCRIPTION\n    ,IL.A_DESCRIPTION_SERVICE_DATE\n    ,IL.A_DETAIL_TYPE\n    ,IL.A_INDEX\n    ,IL.A_LINE_NUM\n    ,IL.A_SALES_ITEM_SERVICE_DATE\n    \n    ,ILB.A_DESCRIPTION AS A_INVOICE_LINE_BUNDLE_DESCRIPTION\n    ,ILB.A_LINE_NUM AS A_INVOICE_LINE_BUNDLE_LINE_NUM\n    ,ILB.A_SERVICE_DATE AS A_INVOICE_LINE_BUNDLE_SERVICE_DATE\n    --METRICS\n    /*,I.M_DEPOSIT\n    ,I.M_TOTAL_AMOUNT\n    ,I.M_EXCHANGE_RATE\n    ,I.M_TOTAL_TAX\n    ,I.M_HOME_TOTAL_AMOUNT\n    ,I.M_BALANCE\n    ,I.M_HOME_BALANCE*/\n    \n    ,IL.M_AMOUNT\n    ,IL.M_BUNDLE_QUANTITY\n    ,IL.M_DISCOUNT_DISCOUNT_PERCENT\n    ,IL.M_SALES_ITEM_DISCOUNT_AMOUNT\n    ,IL.M_SALES_ITEM_DISCOUNT_RATE\n    ,IL.M_SALES_ITEM_QUANTITY\n    ,IL.M_SALES_ITEM_UNIT_PRICE\n\n    ,ILB.M_AMOUNT AS M_INVOICE_LINE_BUNDLE_AMOUNT\n    ,ILB.M_UNIT_PRICE AS M_INVOICE_LINE_BUNDLE_UNIT_PRICE\n    ,ILB.M_QUANTITY AS M_INVOICE_LINE_BUNDLE_QUANTITY\n    ,ILB.M_DISCOUNT_AMOUNT AS M_INVOICE_LINE_DISCOUNT_AMOUNT\n    ,ILB.M_DISCOUNT_RATE AS M_INVOICE_LINE_BUNDLE_DISCOUNT_RATE\n    --BOOLEAN\n    ,I.B_ALLOW_IPNPAYMENT\n    ,I.B_ALLOW_ONLINE_ACHPAYMENT\n    ,I.B_APPLY_TAX_AFTER_DISCOUNT\n    ,I.B_ALLOW_ONLINE_CREDIT_CARD_PAYMENT\n    ,I.B_ALLOW_ONLINE_PAYMENT\n\n    ,IL.B_DISCOUNT_PERCENT_BASED\n\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'ac401bff-43bb-4502-a9f4-e7bb93cec807' AS MD_INTGR_ID\n    FROM INVOICE I\n\n    INNER JOIN INVOICE_LINE IL \n        ON I.K_INVOICE_DLHK = IL.K_INVOICE_DLHK\n    LEFT JOIN INVOICE_LINE_BUNDLE ILB\n        ON IL.K_INVOICE_LINE_DLHK = ILB.K_INVOICE_LINE_DLHK\n)\n\nSELECT *\nFROM FINAL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_INVOICES_STG"}, "model.dlh_quickbooks.V_TERM_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\nWITH source as \n(\nSELECT  *  FROM  {{source(var('source_schema'),'TERM')}}\n),\nrename AS \n(\nSELECT\n    MD5( TRIM(COALESCE(ID,'00000000000000000000000000000000')) ) AS K_TERM_DLHK\n    ,ID AS K_TERM_BK\n    ,DISCOUNT_DAYS AS A_DISCOUNT_DAYS\n    ,DISCOUNT_PERCENT AS A_DISCOUNT_PERCENT\n    ,NAME AS A_NAME    \n    ,TYPE AS A_TYPE\n    ,DUE_DAYS AS A_DUE_DAYS\n    ,SYNC_TOKEN AS A_SYNC_TOKEN\n    ,DAY_OF_MONTH_DUE AS A_DAY_OF_MONTH\n    ,DUE_NEXT_MONTH_DAYS AS DUE_NEXT_MONTH_DAYS\n    ,DISCOUNT_DAY_OF_MONTH AS A_DISCOUNT_DAY_OF_MONTH\n    ,ACTIVE AS B_ACTIVE\nFROM\n    source\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_quickbooks.DEMO_QUICKBOOKS.TERM"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "staging", "TERM", "V_TERM_STG"], "unique_id": "model.dlh_quickbooks.V_TERM_STG", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "staging/TERM/V_TERM_STG.sql", "original_file_path": "models/staging/TERM/V_TERM_STG.sql", "name": "V_TERM_STG", "alias": "V_TERM_STG", "checksum": {"name": "sha256", "checksum": "16389b5fccead89cf73732938a8b924c5e9d29a03c112577ce819f738d829607"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_QUICKBOOKS", "TERM"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/staging/TERM/V_TERM_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "view", "schema": "QUICKBOOKS", "tags": ["staging", "daily"]}, "created_at": 1648040066, "compiled_sql": "\n\nWITH source as \n(\nSELECT  *  FROM  DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"TERM\"\n),\nrename AS \n(\nSELECT\n    MD5( TRIM(COALESCE(ID,'00000000000000000000000000000000')) ) AS K_TERM_DLHK\n    ,ID AS K_TERM_BK\n    ,DISCOUNT_DAYS AS A_DISCOUNT_DAYS\n    ,DISCOUNT_PERCENT AS A_DISCOUNT_PERCENT\n    ,NAME AS A_NAME    \n    ,TYPE AS A_TYPE\n    ,DUE_DAYS AS A_DUE_DAYS\n    ,SYNC_TOKEN AS A_SYNC_TOKEN\n    ,DAY_OF_MONTH_DUE AS A_DAY_OF_MONTH\n    ,DUE_NEXT_MONTH_DAYS AS DUE_NEXT_MONTH_DAYS\n    ,DISCOUNT_DAY_OF_MONTH AS A_DISCOUNT_DAY_OF_MONTH\n    ,ACTIVE AS B_ACTIVE\nFROM\n    source\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_TERM_STG"}, "model.dlh_quickbooks.V_DATE_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\nSELECT \n     to_date('2015-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS') as DD, /*<<Modify date for preferred table start date*/\n\t\t\tseq1() as Sl,row_number() over (order by Sl) as row_numbers,\n\t\t\tdateadd(day,row_numbers,DD) as V_DATE,\n\t\t\tcase when date_part(dd, V_DATE) < 10 and date_part(mm, V_DATE) > 9 then\n\t\t\t\tdate_part(year, V_DATE)||date_part(mm, V_DATE)||'0'||date_part(dd, V_DATE)\n\t\t\t\t when date_part(dd, V_DATE) < 10 and  date_part(mm, V_DATE) < 10 then \n\t\t\t\t date_part(year, V_DATE)||'0'||date_part(mm, V_DATE)||'0'||date_part(dd, V_DATE)\n\t\t\t\t when date_part(dd, V_DATE) > 9 and  date_part(mm, V_DATE) < 10 then\n\t\t\t\t date_part(year, V_DATE)||'0'||date_part(mm, V_DATE)||date_part(dd, V_DATE)\n\t\t\t\t when date_part(dd, V_DATE) > 9 and  date_part(mm, V_DATE) > 9 then\n\t\t\t\t date_part(year, V_DATE)||date_part(mm, V_DATE)||date_part(dd, V_DATE) end as DATE_KEY,\n\t\t\tV_DATE as DATE_COLUMN,\n\t\t\tdayname(dateadd(day,row_numbers,DD)) as DAY_NAME_1,\n\t\t\tcase \n\t\t\t\twhen dayname(dateadd(day,row_numbers,DD)) = 'Mon' then 'Monday'\n\t\t\t\twhen dayname(dateadd(day,row_numbers,DD)) = 'Tue' then 'Tuesday'\n\t\t\t\twhen dayname(dateadd(day,row_numbers,DD)) = 'Wed' then 'Wednesday'\n\t\t\t\twhen dayname(dateadd(day,row_numbers,DD)) = 'Thu' then 'Thursday'\n\t\t\t\twhen dayname(dateadd(day,row_numbers,DD)) = 'Fri' then 'Friday'\n\t\t\t\twhen dayname(dateadd(day,row_numbers,DD)) = 'Sat' then 'Saturday'\n\t\t\t\twhen dayname(dateadd(day,row_numbers,DD)) = 'Sun' then 'Sunday' end ||', '||\n\t\t\tcase when monthname(dateadd(day,row_numbers,DD)) ='Jan' then 'January'\n\t\t\t\t   when monthname(dateadd(day,row_numbers,DD)) ='Feb' then 'February'\n\t\t\t\t   when monthname(dateadd(day,row_numbers,DD)) ='Mar' then 'March'\n\t\t\t\t   when monthname(dateadd(day,row_numbers,DD)) ='Apr' then 'April'\n\t\t\t\t   when monthname(dateadd(day,row_numbers,DD)) ='May' then 'May'\n\t\t\t\t   when monthname(dateadd(day,row_numbers,DD)) ='Jun' then 'June'\n\t\t\t\t   when monthname(dateadd(day,row_numbers,DD)) ='Jul' then 'July'\n\t\t\t\t   when monthname(dateadd(day,row_numbers,DD)) ='Aug' then 'August'\n\t\t\t\t   when monthname(dateadd(day,row_numbers,DD)) ='Sep' then 'September'\n\t\t\t\t   when monthname(dateadd(day,row_numbers,DD)) ='Oct' then 'October'\n\t\t\t\t   when monthname(dateadd(day,row_numbers,DD)) ='Nov' then 'November'\n\t\t\t\t   when monthname(dateadd(day,row_numbers,DD)) ='Dec' then 'December' end\n\t\t\t\t   ||' '|| to_varchar(dateadd(day,row_numbers,DD), ' dd, yyyy') as FULL_DATE_DESC,\n\t\t\tdateadd(day,row_numbers,DD) as V_DATE_1,\n\t\t\tdayofweek(V_DATE_1)+1 as DAY_NUM_IN_WEEK,\n\t\t\tDate_part(dd,V_DATE_1) as DAY_NUM_IN_MONTH,\n\t\t\tdayofyear(V_DATE_1) as DAY_NUM_IN_YEAR,\n\t\t\tcase \n\t\t\t\twhen dayname(V_DATE_1) = 'Mon' then 'Monday'\n\t\t\t\twhen dayname(V_DATE_1) = 'Tue' then 'Tuesday'\n\t\t\t\twhen dayname(V_DATE_1) = 'Wed' then 'Wednesday'\n\t\t\t\twhen dayname(V_DATE_1) = 'Thu' then 'Thursday'\n\t\t\t\twhen dayname(V_DATE_1) = 'Fri' then 'Friday'\n\t\t\t\twhen dayname(V_DATE_1) = 'Sat' then 'Saturday'\n\t\t\t\twhen dayname(V_DATE_1) = 'Sun' then 'Sunday' end as\tDAY_NAME,\n\t\t\tdayname(dateadd(day,row_numbers,DD)) as DAY_ABBREV,\n\t\t\tcase  \n\t\t\t\twhen dayname(V_DATE_1) = 'Sun' and dayname(V_DATE_1) = 'Sat' then \n                 'Not-Weekday'\n\t\t\t\telse 'Weekday' end as WEEKDAY_IND,\n\t\t\t case \n\t\t\t\twhen (DATE_KEY = date_part(year, V_DATE)||'0101' or DATE_KEY = date_part(year, V_DATE)||'0704' or\n\t\t\t\tDATE_KEY = date_part(year, V_DATE)||'1225' or DATE_KEY = date_part(year, V_DATE)||'1226') then  \n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Wed' \n\t\t\t\tand dateadd(day,-2,last_day(V_DATE_1)) = V_DATE_1  then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Thu' \n\t\t\t\tand dateadd(day,-3,last_day(V_DATE_1)) = V_DATE_1  then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Fri' \n\t\t\t\tand dateadd(day,-4,last_day(V_DATE_1)) = V_DATE_1 then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Sat' \n\t\t\t\tand dateadd(day,-5,last_day(V_DATE_1)) = V_DATE_1  then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Sun' \n\t\t\t\tand dateadd(day,-6,last_day(V_DATE_1)) = V_DATE_1 then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Mon' \n\t\t\t\tand last_day(V_DATE_1) = V_DATE_1 then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Tue' \n\t\t\t\tand dateadd(day,-1 ,last_day(V_DATE_1)) = V_DATE_1  then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Wed' \n\t\t\t\tand dateadd(day,5,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Thu' \n\t\t\t\tand dateadd(day,4,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Fri' \n\t\t\t\tand dateadd(day,3,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sat' \n\t\t\t\tand dateadd(day,2,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sun' \n\t\t\t\tand dateadd(day,1,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Mon' \n\t\t\t\tand date_part(year, V_DATE_1)||'-09-01' = V_DATE_1 then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Tue' \n\t\t\t\tand dateadd(day,6 ,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Wed' \n\t\t\t\tand (dateadd(day,23,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1  or \n\t\t\t\t\t dateadd(day,22,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Thu' \n\t\t\t\tand ( dateadd(day,22,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n\t\t\t\t\t dateadd(day,21,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Fri' \n\t\t\t\tand ( dateadd(day,21,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n\t\t\t\t\t dateadd(day,20,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n\t\t\t\t 'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sat' \n\t\t\t\tand ( dateadd(day,27,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n\t\t\t\t\t dateadd(day,26,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sun' \n\t\t\t\tand ( dateadd(day,26,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n\t\t\t\t\t dateadd(day,25,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Mon' \n\t\t\t\tand (dateadd(day,25,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n\t\t\t\t\t dateadd(day,24,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Tue' \n\t\t\t\tand (dateadd(day,24,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n\t\t\t\t\t dateadd(day,23,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n\t\t\t\t 'Holiday'    \n\t\t\t\telse\n\t\t\t\t'Not-Holiday' end as US_HOLIDAY_IND,\n\t\t\t/*Modify the following for Company Specific Holidays*/\n\t\t\tcase \n\t\t\t\twhen (DATE_KEY = date_part(year, V_DATE)||'0101' or DATE_KEY = date_part(year, V_DATE)||'0219'\n\t\t\t\tor DATE_KEY = date_part(year, V_DATE)||'0528' or DATE_KEY = date_part(year, V_DATE)||'0704' \n\t\t\t\tor DATE_KEY = date_part(year, V_DATE)||'1225' )then \n\t\t\t\t'Holiday'               \n                when monthname(V_DATE_1) ='Mar' and dayname(last_day(V_DATE_1)) = 'Fri' \n\t\t\t\tand last_day(V_DATE_1) = V_DATE_1 then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Mar' and dayname(last_day(V_DATE_1)) = 'Sat' \n\t\t\t\tand dateadd(day,-1,last_day(V_DATE_1)) = V_DATE_1  then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Mar' and dayname(last_day(V_DATE_1)) = 'Sun' \n\t\t\t\tand dateadd(day,-2,last_day(V_DATE_1)) = V_DATE_1 then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Tue'\n                and dateadd(day,3,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Wed' \n\t\t\t\tand dateadd(day,2,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Thu'\n                and dateadd(day,1,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Fri' \n\t\t\t\tand date_part(year, V_DATE_1)||'-04-01' = V_DATE_1 then\n\t\t\t\t'Holiday'\n                when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Wed' \n\t\t\t\tand dateadd(day,5,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Thu' \n\t\t\t\tand dateadd(day,4,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Fri' \n\t\t\t\tand dateadd(day,3,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Sat' \n\t\t\t\tand dateadd(day,2,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Sun' \n\t\t\t\tand dateadd(day,1,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Mon' \n                and date_part(year, V_DATE_1)||'-04-01'= V_DATE_1 then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Tue' \n\t\t\t\tand dateadd(day,6 ,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\n\t\t\t\t'Holiday'   \n\t\t\t\twhen monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Wed' \n\t\t\t\tand dateadd(day,5,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Thu' \n\t\t\t\tand dateadd(day,4,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Fri' \n\t\t\t\tand dateadd(day,3,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sat' \n\t\t\t\tand dateadd(day,2,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sun' \n\t\t\t\tand dateadd(day,1,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Mon' \n                and date_part(year, V_DATE_1)||'-09-01' = V_DATE_1 then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Tue' \n\t\t\t\tand dateadd(day,6 ,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Wed' \n\t\t\t\tand dateadd(day,23,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Thu' \n\t\t\t\tand dateadd(day,22,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Fri' \n\t\t\t\tand dateadd(day,21,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1  then\n\t\t\t\t 'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sat' \n\t\t\t\tand dateadd(day,27,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sun' \n\t\t\t\tand dateadd(day,26,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Mon' \n\t\t\t\tand dateadd(day,25,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Tue' \n\t\t\t\tand dateadd(day,24,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1  then\n\t\t\t\t 'Holiday'     \n\t\t\t\telse\n\t\t\t\t'Not-Holiday' end as COMPANY_HOLIDAY_IND,\n\t\t\tcase                                           \n\t\t\t\twhen last_day(V_DATE_1) = V_DATE_1 then \n\t\t\t\t'Month-end'\n\t\t\t\telse 'Not-Month-end' end as MONTH_END_IND,\n\t\t\t\t\t\n\t\t\tcase when date_part(mm,date_trunc('week',V_DATE_1)) < 10 and date_part(dd,date_trunc('week',V_DATE_1)) < 10 then\n\t\t\t\t\t  date_part(yyyy,date_trunc('week',V_DATE_1))||'0'||\n\t\t\t\t\t  date_part(mm,date_trunc('week',V_DATE_1))||'0'||\n\t\t\t\t\t  date_part(dd,date_trunc('week',V_DATE_1))  \n\t\t\t\t when date_part(mm,date_trunc('week',V_DATE_1)) < 10 and date_part(dd,date_trunc('week',V_DATE_1)) > 9 then\n\t\t\t\t\t\tdate_part(yyyy,date_trunc('week',V_DATE_1))||'0'||\n\t\t\t\t\t\tdate_part(mm,date_trunc('week',V_DATE_1))||date_part(dd,date_trunc('week',V_DATE_1))    \n\t\t\t\t when date_part(mm,date_trunc('week',V_DATE_1)) > 9 and date_part(dd,date_trunc('week',V_DATE_1)) < 10 then\n\t\t\t\t\t\tdate_part(yyyy,date_trunc('week',V_DATE_1))||date_part(mm,date_trunc('week',V_DATE_1))||\n\t\t\t\t\t\t'0'||date_part(dd,date_trunc('week',V_DATE_1))    \n\t\t\t\twhen date_part(mm,date_trunc('week',V_DATE_1)) > 9 and date_part(dd,date_trunc('week',V_DATE_1)) > 9 then\n\t\t\t\t\t\tdate_part(yyyy,date_trunc('week',V_DATE_1))||\n\t\t\t\t\t\tdate_part(mm,date_trunc('week',V_DATE_1))||\n\t\t\t\t\t\tdate_part(dd,date_trunc('week',V_DATE_1)) end as WEEK_BEGIN_DATE_NKEY,\n\t\t\tdate_trunc('week',V_DATE_1) as WEEK_BEGIN_DATE,\n\n\t\t\tcase when  date_part(mm,last_day(V_DATE_1,'week')) < 10 and date_part(dd,last_day(V_DATE_1,'week')) < 10 then\n\t\t\t\t\t  date_part(yyyy,last_day(V_DATE_1,'week'))||'0'||\n\t\t\t\t\t  date_part(mm,last_day(V_DATE_1,'week'))||'0'||\n\t\t\t\t\t  date_part(dd,last_day(V_DATE_1,'week')) \n\t\t\t\t when  date_part(mm,last_day(V_DATE_1,'week')) < 10 and date_part(dd,last_day(V_DATE_1,'week')) > 9 then\n\t\t\t\t\t  date_part(yyyy,last_day(V_DATE_1,'week'))||'0'||\n\t\t\t\t\t  date_part(mm,last_day(V_DATE_1,'week'))||date_part(dd,last_day(V_DATE_1,'week'))   \n\t\t\t\t when  date_part(mm,last_day(V_DATE_1,'week')) > 9 and date_part(dd,last_day(V_DATE_1,'week')) < 10  then\n\t\t\t\t\t  date_part(yyyy,last_day(V_DATE_1,'week'))||date_part(mm,last_day(V_DATE_1,'week'))||'0'||\n\t\t\t\t\t  date_part(dd,last_day(V_DATE_1,'week'))   \n\t\t\t\t when  date_part(mm,last_day(V_DATE_1,'week')) > 9 and date_part(dd,last_day(V_DATE_1,'week')) > 9 then\n\t\t\t\t\t  date_part(yyyy,last_day(V_DATE_1,'week'))||\n\t\t\t\t\t  date_part(mm,last_day(V_DATE_1,'week'))||\n\t\t\t\t\t  date_part(dd,last_day(V_DATE_1,'week')) end as WEEK_END_DATE_NKEY,\n\t\t\tlast_day(V_DATE_1,'week') as WEEK_END_DATE,\n\t\t\tweek(V_DATE_1) as WEEK_NUM_IN_YEAR,\n\t\t\tcase when monthname(V_DATE_1) ='Jan' then 'January'\n\t\t\t\t   when monthname(V_DATE_1) ='Feb' then 'February'\n\t\t\t\t   when monthname(V_DATE_1) ='Mar' then 'March'\n\t\t\t\t   when monthname(V_DATE_1) ='Apr' then 'April'\n\t\t\t\t   when monthname(V_DATE_1) ='May' then 'May'\n\t\t\t\t   when monthname(V_DATE_1) ='Jun' then 'June'\n\t\t\t\t   when monthname(V_DATE_1) ='Jul' then 'July'\n\t\t\t\t   when monthname(V_DATE_1) ='Aug' then 'August'\n\t\t\t\t   when monthname(V_DATE_1) ='Sep' then 'September'\n\t\t\t\t   when monthname(V_DATE_1) ='Oct' then 'October'\n\t\t\t\t   when monthname(V_DATE_1) ='Nov' then 'November'\n\t\t\t\t   when monthname(V_DATE_1) ='Dec' then 'December' end as MONTH_NAME,\n\t\t\tmonthname(V_DATE_1) as MONTH_ABBREV,\n\t\t\tmonth(V_DATE_1) as MONTH_NUM_IN_YEAR,\n\t\t\tcase when month(V_DATE_1) < 10 then \n\t\t\tyear(V_DATE_1)||'-0'||month(V_DATE_1)   \n\t\t\telse year(V_DATE_1)||'-'||month(V_DATE_1) end as YEARMONTH,\n\t\t\tquarter(V_DATE_1) as CURRENT_QUARTER,\n\t\t\tyear(V_DATE_1)||'-0'||quarter(V_DATE_1) as YEARQUARTER,\n\t\t\tyear(V_DATE_1) as CURRENT_YEAR,\n\t\t\t/*Modify the following based on company fiscal year - assumes Jan 01*/\n            to_date(year(V_DATE_1)||'-01-01','YYYY-MM-DD') as FISCAL_CUR_YEAR,\n            to_date(year(V_DATE_1) -1||'-01-01','YYYY-MM-DD') as FISCAL_PREV_YEAR,\n\t\t\tcase when   V_DATE_1 < FISCAL_CUR_YEAR then\n\t\t\tdatediff('week', FISCAL_PREV_YEAR,V_DATE_1)\n\t\t\telse \n\t\t\tdatediff('week', FISCAL_CUR_YEAR,V_DATE_1)  end as FISCAL_WEEK_NUM  ,\n\t\t\tdecode(datediff('MONTH',FISCAL_CUR_YEAR, V_DATE_1)+1 ,-2,10,-1,11,0,12,\n                   datediff('MONTH',FISCAL_CUR_YEAR, V_DATE_1)+1 ) as FISCAL_MONTH_NUM,\n\t\t\tconcat( year(FISCAL_CUR_YEAR) \n\t\t\t\t   ,case when to_number(FISCAL_MONTH_NUM) = 10 or \n\t\t\t\t\t\t\tto_number(FISCAL_MONTH_NUM) = 11 or \n                            to_number(FISCAL_MONTH_NUM) = 12  then\n\t\t\t\t\t\t\t'-'||FISCAL_MONTH_NUM\n\t\t\t\t\telse  concat('-0',FISCAL_MONTH_NUM) end ) as FISCAL_YEARMONTH,\n\t\t\tcase when quarter(V_DATE_1) = 4 then 4\n\t\t\t\t when quarter(V_DATE_1) = 3 then 3\n\t\t\t\t when quarter(V_DATE_1) = 2 then 2\n\t\t\t\t when quarter(V_DATE_1) = 1 then 1 end as FISCAL_QUARTER,\n\t\t\t\n\t\t\tcase when   V_DATE_1 < FISCAL_CUR_YEAR then\n\t\t\t\t\tyear(FISCAL_CUR_YEAR)\n\t\t\t\t\telse year(FISCAL_CUR_YEAR)+1 end\n\t\t\t\t\t||'-0'||case when quarter(V_DATE_1) = 4 then 4\n\t\t\t\t\t when quarter(V_DATE_1) = 3 then 3\n\t\t\t\t\t when quarter(V_DATE_1) = 2 then 2\n\t\t\t\t\t when quarter(V_DATE_1) = 1 then 1 end as FISCAL_YEARQUARTER,\n\t\t\tcase when quarter(V_DATE_1) = 4  then 2 when quarter(V_DATE_1) = 3 then 2\n\t\t\t\twhen quarter(V_DATE_1) = 1  then 1 when quarter(V_DATE_1) = 2 then 1\n\t\t\tend as FISCAL_HALFYEAR,\n\t\t\tyear(FISCAL_CUR_YEAR) as FISCAL_YEAR,\n\t\t\tto_timestamp_ntz(V_DATE) as SQL_TIMESTAMP,\n\t\t\t'Y' as CURRENT_ROW_IND,\n\t\t\tto_date(current_timestamp) as EFFECTIVE_DATE,\n\t\t\tto_date('9999-12-31') as EXPIRA_DATE\n\t\t\tfrom table(generator(rowcount => 8401)) /*<< Set to generate 20 years. Modify rowcount to increase or decrease size*/", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "staging", "DATE", "V_DATE_STG"], "unique_id": "model.dlh_quickbooks.V_DATE_STG", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "staging/DATE/V_DATE_STG.sql", "original_file_path": "models/staging/DATE/V_DATE_STG.sql", "name": "V_DATE_STG", "alias": "V_DATE_STG", "checksum": {"name": "sha256", "checksum": "fd27fc3ba6596a94b633c433dc5f0614ff0241fec940f7117c4b6d69e92de894"}, "tags": ["staging", "daily"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/staging/DATE/V_DATE_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "view", "schema": "QUICKBOOKS", "tags": ["staging", "daily"]}, "created_at": 1648040066, "compiled_sql": "\n\nSELECT \n     to_date('2015-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS') as DD, /*<<Modify date for preferred table start date*/\n\t\t\tseq1() as Sl,row_number() over (order by Sl) as row_numbers,\n\t\t\tdateadd(day,row_numbers,DD) as V_DATE,\n\t\t\tcase when date_part(dd, V_DATE) < 10 and date_part(mm, V_DATE) > 9 then\n\t\t\t\tdate_part(year, V_DATE)||date_part(mm, V_DATE)||'0'||date_part(dd, V_DATE)\n\t\t\t\t when date_part(dd, V_DATE) < 10 and  date_part(mm, V_DATE) < 10 then \n\t\t\t\t date_part(year, V_DATE)||'0'||date_part(mm, V_DATE)||'0'||date_part(dd, V_DATE)\n\t\t\t\t when date_part(dd, V_DATE) > 9 and  date_part(mm, V_DATE) < 10 then\n\t\t\t\t date_part(year, V_DATE)||'0'||date_part(mm, V_DATE)||date_part(dd, V_DATE)\n\t\t\t\t when date_part(dd, V_DATE) > 9 and  date_part(mm, V_DATE) > 9 then\n\t\t\t\t date_part(year, V_DATE)||date_part(mm, V_DATE)||date_part(dd, V_DATE) end as DATE_KEY,\n\t\t\tV_DATE as DATE_COLUMN,\n\t\t\tdayname(dateadd(day,row_numbers,DD)) as DAY_NAME_1,\n\t\t\tcase \n\t\t\t\twhen dayname(dateadd(day,row_numbers,DD)) = 'Mon' then 'Monday'\n\t\t\t\twhen dayname(dateadd(day,row_numbers,DD)) = 'Tue' then 'Tuesday'\n\t\t\t\twhen dayname(dateadd(day,row_numbers,DD)) = 'Wed' then 'Wednesday'\n\t\t\t\twhen dayname(dateadd(day,row_numbers,DD)) = 'Thu' then 'Thursday'\n\t\t\t\twhen dayname(dateadd(day,row_numbers,DD)) = 'Fri' then 'Friday'\n\t\t\t\twhen dayname(dateadd(day,row_numbers,DD)) = 'Sat' then 'Saturday'\n\t\t\t\twhen dayname(dateadd(day,row_numbers,DD)) = 'Sun' then 'Sunday' end ||', '||\n\t\t\tcase when monthname(dateadd(day,row_numbers,DD)) ='Jan' then 'January'\n\t\t\t\t   when monthname(dateadd(day,row_numbers,DD)) ='Feb' then 'February'\n\t\t\t\t   when monthname(dateadd(day,row_numbers,DD)) ='Mar' then 'March'\n\t\t\t\t   when monthname(dateadd(day,row_numbers,DD)) ='Apr' then 'April'\n\t\t\t\t   when monthname(dateadd(day,row_numbers,DD)) ='May' then 'May'\n\t\t\t\t   when monthname(dateadd(day,row_numbers,DD)) ='Jun' then 'June'\n\t\t\t\t   when monthname(dateadd(day,row_numbers,DD)) ='Jul' then 'July'\n\t\t\t\t   when monthname(dateadd(day,row_numbers,DD)) ='Aug' then 'August'\n\t\t\t\t   when monthname(dateadd(day,row_numbers,DD)) ='Sep' then 'September'\n\t\t\t\t   when monthname(dateadd(day,row_numbers,DD)) ='Oct' then 'October'\n\t\t\t\t   when monthname(dateadd(day,row_numbers,DD)) ='Nov' then 'November'\n\t\t\t\t   when monthname(dateadd(day,row_numbers,DD)) ='Dec' then 'December' end\n\t\t\t\t   ||' '|| to_varchar(dateadd(day,row_numbers,DD), ' dd, yyyy') as FULL_DATE_DESC,\n\t\t\tdateadd(day,row_numbers,DD) as V_DATE_1,\n\t\t\tdayofweek(V_DATE_1)+1 as DAY_NUM_IN_WEEK,\n\t\t\tDate_part(dd,V_DATE_1) as DAY_NUM_IN_MONTH,\n\t\t\tdayofyear(V_DATE_1) as DAY_NUM_IN_YEAR,\n\t\t\tcase \n\t\t\t\twhen dayname(V_DATE_1) = 'Mon' then 'Monday'\n\t\t\t\twhen dayname(V_DATE_1) = 'Tue' then 'Tuesday'\n\t\t\t\twhen dayname(V_DATE_1) = 'Wed' then 'Wednesday'\n\t\t\t\twhen dayname(V_DATE_1) = 'Thu' then 'Thursday'\n\t\t\t\twhen dayname(V_DATE_1) = 'Fri' then 'Friday'\n\t\t\t\twhen dayname(V_DATE_1) = 'Sat' then 'Saturday'\n\t\t\t\twhen dayname(V_DATE_1) = 'Sun' then 'Sunday' end as\tDAY_NAME,\n\t\t\tdayname(dateadd(day,row_numbers,DD)) as DAY_ABBREV,\n\t\t\tcase  \n\t\t\t\twhen dayname(V_DATE_1) = 'Sun' and dayname(V_DATE_1) = 'Sat' then \n                 'Not-Weekday'\n\t\t\t\telse 'Weekday' end as WEEKDAY_IND,\n\t\t\t case \n\t\t\t\twhen (DATE_KEY = date_part(year, V_DATE)||'0101' or DATE_KEY = date_part(year, V_DATE)||'0704' or\n\t\t\t\tDATE_KEY = date_part(year, V_DATE)||'1225' or DATE_KEY = date_part(year, V_DATE)||'1226') then  \n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Wed' \n\t\t\t\tand dateadd(day,-2,last_day(V_DATE_1)) = V_DATE_1  then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Thu' \n\t\t\t\tand dateadd(day,-3,last_day(V_DATE_1)) = V_DATE_1  then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Fri' \n\t\t\t\tand dateadd(day,-4,last_day(V_DATE_1)) = V_DATE_1 then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Sat' \n\t\t\t\tand dateadd(day,-5,last_day(V_DATE_1)) = V_DATE_1  then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Sun' \n\t\t\t\tand dateadd(day,-6,last_day(V_DATE_1)) = V_DATE_1 then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Mon' \n\t\t\t\tand last_day(V_DATE_1) = V_DATE_1 then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Tue' \n\t\t\t\tand dateadd(day,-1 ,last_day(V_DATE_1)) = V_DATE_1  then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Wed' \n\t\t\t\tand dateadd(day,5,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Thu' \n\t\t\t\tand dateadd(day,4,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Fri' \n\t\t\t\tand dateadd(day,3,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sat' \n\t\t\t\tand dateadd(day,2,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sun' \n\t\t\t\tand dateadd(day,1,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Mon' \n\t\t\t\tand date_part(year, V_DATE_1)||'-09-01' = V_DATE_1 then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Tue' \n\t\t\t\tand dateadd(day,6 ,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Wed' \n\t\t\t\tand (dateadd(day,23,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1  or \n\t\t\t\t\t dateadd(day,22,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Thu' \n\t\t\t\tand ( dateadd(day,22,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n\t\t\t\t\t dateadd(day,21,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Fri' \n\t\t\t\tand ( dateadd(day,21,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n\t\t\t\t\t dateadd(day,20,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n\t\t\t\t 'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sat' \n\t\t\t\tand ( dateadd(day,27,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n\t\t\t\t\t dateadd(day,26,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sun' \n\t\t\t\tand ( dateadd(day,26,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n\t\t\t\t\t dateadd(day,25,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Mon' \n\t\t\t\tand (dateadd(day,25,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n\t\t\t\t\t dateadd(day,24,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Tue' \n\t\t\t\tand (dateadd(day,24,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n\t\t\t\t\t dateadd(day,23,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n\t\t\t\t 'Holiday'    \n\t\t\t\telse\n\t\t\t\t'Not-Holiday' end as US_HOLIDAY_IND,\n\t\t\t/*Modify the following for Company Specific Holidays*/\n\t\t\tcase \n\t\t\t\twhen (DATE_KEY = date_part(year, V_DATE)||'0101' or DATE_KEY = date_part(year, V_DATE)||'0219'\n\t\t\t\tor DATE_KEY = date_part(year, V_DATE)||'0528' or DATE_KEY = date_part(year, V_DATE)||'0704' \n\t\t\t\tor DATE_KEY = date_part(year, V_DATE)||'1225' )then \n\t\t\t\t'Holiday'               \n                when monthname(V_DATE_1) ='Mar' and dayname(last_day(V_DATE_1)) = 'Fri' \n\t\t\t\tand last_day(V_DATE_1) = V_DATE_1 then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Mar' and dayname(last_day(V_DATE_1)) = 'Sat' \n\t\t\t\tand dateadd(day,-1,last_day(V_DATE_1)) = V_DATE_1  then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Mar' and dayname(last_day(V_DATE_1)) = 'Sun' \n\t\t\t\tand dateadd(day,-2,last_day(V_DATE_1)) = V_DATE_1 then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Tue'\n                and dateadd(day,3,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Wed' \n\t\t\t\tand dateadd(day,2,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Thu'\n                and dateadd(day,1,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Fri' \n\t\t\t\tand date_part(year, V_DATE_1)||'-04-01' = V_DATE_1 then\n\t\t\t\t'Holiday'\n                when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Wed' \n\t\t\t\tand dateadd(day,5,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Thu' \n\t\t\t\tand dateadd(day,4,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Fri' \n\t\t\t\tand dateadd(day,3,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Sat' \n\t\t\t\tand dateadd(day,2,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Sun' \n\t\t\t\tand dateadd(day,1,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Mon' \n                and date_part(year, V_DATE_1)||'-04-01'= V_DATE_1 then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Tue' \n\t\t\t\tand dateadd(day,6 ,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\n\t\t\t\t'Holiday'   \n\t\t\t\twhen monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Wed' \n\t\t\t\tand dateadd(day,5,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Thu' \n\t\t\t\tand dateadd(day,4,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Fri' \n\t\t\t\tand dateadd(day,3,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sat' \n\t\t\t\tand dateadd(day,2,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sun' \n\t\t\t\tand dateadd(day,1,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Mon' \n                and date_part(year, V_DATE_1)||'-09-01' = V_DATE_1 then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Tue' \n\t\t\t\tand dateadd(day,6 ,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n\t\t\t\t'Holiday' \n\t\t\t\twhen monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Wed' \n\t\t\t\tand dateadd(day,23,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Thu' \n\t\t\t\tand dateadd(day,22,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Fri' \n\t\t\t\tand dateadd(day,21,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1  then\n\t\t\t\t 'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sat' \n\t\t\t\tand dateadd(day,27,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sun' \n\t\t\t\tand dateadd(day,26,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Mon' \n\t\t\t\tand dateadd(day,25,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n\t\t\t\t'Holiday'\n\t\t\t\twhen monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Tue' \n\t\t\t\tand dateadd(day,24,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1  then\n\t\t\t\t 'Holiday'     \n\t\t\t\telse\n\t\t\t\t'Not-Holiday' end as COMPANY_HOLIDAY_IND,\n\t\t\tcase                                           \n\t\t\t\twhen last_day(V_DATE_1) = V_DATE_1 then \n\t\t\t\t'Month-end'\n\t\t\t\telse 'Not-Month-end' end as MONTH_END_IND,\n\t\t\t\t\t\n\t\t\tcase when date_part(mm,date_trunc('week',V_DATE_1)) < 10 and date_part(dd,date_trunc('week',V_DATE_1)) < 10 then\n\t\t\t\t\t  date_part(yyyy,date_trunc('week',V_DATE_1))||'0'||\n\t\t\t\t\t  date_part(mm,date_trunc('week',V_DATE_1))||'0'||\n\t\t\t\t\t  date_part(dd,date_trunc('week',V_DATE_1))  \n\t\t\t\t when date_part(mm,date_trunc('week',V_DATE_1)) < 10 and date_part(dd,date_trunc('week',V_DATE_1)) > 9 then\n\t\t\t\t\t\tdate_part(yyyy,date_trunc('week',V_DATE_1))||'0'||\n\t\t\t\t\t\tdate_part(mm,date_trunc('week',V_DATE_1))||date_part(dd,date_trunc('week',V_DATE_1))    \n\t\t\t\t when date_part(mm,date_trunc('week',V_DATE_1)) > 9 and date_part(dd,date_trunc('week',V_DATE_1)) < 10 then\n\t\t\t\t\t\tdate_part(yyyy,date_trunc('week',V_DATE_1))||date_part(mm,date_trunc('week',V_DATE_1))||\n\t\t\t\t\t\t'0'||date_part(dd,date_trunc('week',V_DATE_1))    \n\t\t\t\twhen date_part(mm,date_trunc('week',V_DATE_1)) > 9 and date_part(dd,date_trunc('week',V_DATE_1)) > 9 then\n\t\t\t\t\t\tdate_part(yyyy,date_trunc('week',V_DATE_1))||\n\t\t\t\t\t\tdate_part(mm,date_trunc('week',V_DATE_1))||\n\t\t\t\t\t\tdate_part(dd,date_trunc('week',V_DATE_1)) end as WEEK_BEGIN_DATE_NKEY,\n\t\t\tdate_trunc('week',V_DATE_1) as WEEK_BEGIN_DATE,\n\n\t\t\tcase when  date_part(mm,last_day(V_DATE_1,'week')) < 10 and date_part(dd,last_day(V_DATE_1,'week')) < 10 then\n\t\t\t\t\t  date_part(yyyy,last_day(V_DATE_1,'week'))||'0'||\n\t\t\t\t\t  date_part(mm,last_day(V_DATE_1,'week'))||'0'||\n\t\t\t\t\t  date_part(dd,last_day(V_DATE_1,'week')) \n\t\t\t\t when  date_part(mm,last_day(V_DATE_1,'week')) < 10 and date_part(dd,last_day(V_DATE_1,'week')) > 9 then\n\t\t\t\t\t  date_part(yyyy,last_day(V_DATE_1,'week'))||'0'||\n\t\t\t\t\t  date_part(mm,last_day(V_DATE_1,'week'))||date_part(dd,last_day(V_DATE_1,'week'))   \n\t\t\t\t when  date_part(mm,last_day(V_DATE_1,'week')) > 9 and date_part(dd,last_day(V_DATE_1,'week')) < 10  then\n\t\t\t\t\t  date_part(yyyy,last_day(V_DATE_1,'week'))||date_part(mm,last_day(V_DATE_1,'week'))||'0'||\n\t\t\t\t\t  date_part(dd,last_day(V_DATE_1,'week'))   \n\t\t\t\t when  date_part(mm,last_day(V_DATE_1,'week')) > 9 and date_part(dd,last_day(V_DATE_1,'week')) > 9 then\n\t\t\t\t\t  date_part(yyyy,last_day(V_DATE_1,'week'))||\n\t\t\t\t\t  date_part(mm,last_day(V_DATE_1,'week'))||\n\t\t\t\t\t  date_part(dd,last_day(V_DATE_1,'week')) end as WEEK_END_DATE_NKEY,\n\t\t\tlast_day(V_DATE_1,'week') as WEEK_END_DATE,\n\t\t\tweek(V_DATE_1) as WEEK_NUM_IN_YEAR,\n\t\t\tcase when monthname(V_DATE_1) ='Jan' then 'January'\n\t\t\t\t   when monthname(V_DATE_1) ='Feb' then 'February'\n\t\t\t\t   when monthname(V_DATE_1) ='Mar' then 'March'\n\t\t\t\t   when monthname(V_DATE_1) ='Apr' then 'April'\n\t\t\t\t   when monthname(V_DATE_1) ='May' then 'May'\n\t\t\t\t   when monthname(V_DATE_1) ='Jun' then 'June'\n\t\t\t\t   when monthname(V_DATE_1) ='Jul' then 'July'\n\t\t\t\t   when monthname(V_DATE_1) ='Aug' then 'August'\n\t\t\t\t   when monthname(V_DATE_1) ='Sep' then 'September'\n\t\t\t\t   when monthname(V_DATE_1) ='Oct' then 'October'\n\t\t\t\t   when monthname(V_DATE_1) ='Nov' then 'November'\n\t\t\t\t   when monthname(V_DATE_1) ='Dec' then 'December' end as MONTH_NAME,\n\t\t\tmonthname(V_DATE_1) as MONTH_ABBREV,\n\t\t\tmonth(V_DATE_1) as MONTH_NUM_IN_YEAR,\n\t\t\tcase when month(V_DATE_1) < 10 then \n\t\t\tyear(V_DATE_1)||'-0'||month(V_DATE_1)   \n\t\t\telse year(V_DATE_1)||'-'||month(V_DATE_1) end as YEARMONTH,\n\t\t\tquarter(V_DATE_1) as CURRENT_QUARTER,\n\t\t\tyear(V_DATE_1)||'-0'||quarter(V_DATE_1) as YEARQUARTER,\n\t\t\tyear(V_DATE_1) as CURRENT_YEAR,\n\t\t\t/*Modify the following based on company fiscal year - assumes Jan 01*/\n            to_date(year(V_DATE_1)||'-01-01','YYYY-MM-DD') as FISCAL_CUR_YEAR,\n            to_date(year(V_DATE_1) -1||'-01-01','YYYY-MM-DD') as FISCAL_PREV_YEAR,\n\t\t\tcase when   V_DATE_1 < FISCAL_CUR_YEAR then\n\t\t\tdatediff('week', FISCAL_PREV_YEAR,V_DATE_1)\n\t\t\telse \n\t\t\tdatediff('week', FISCAL_CUR_YEAR,V_DATE_1)  end as FISCAL_WEEK_NUM  ,\n\t\t\tdecode(datediff('MONTH',FISCAL_CUR_YEAR, V_DATE_1)+1 ,-2,10,-1,11,0,12,\n                   datediff('MONTH',FISCAL_CUR_YEAR, V_DATE_1)+1 ) as FISCAL_MONTH_NUM,\n\t\t\tconcat( year(FISCAL_CUR_YEAR) \n\t\t\t\t   ,case when to_number(FISCAL_MONTH_NUM) = 10 or \n\t\t\t\t\t\t\tto_number(FISCAL_MONTH_NUM) = 11 or \n                            to_number(FISCAL_MONTH_NUM) = 12  then\n\t\t\t\t\t\t\t'-'||FISCAL_MONTH_NUM\n\t\t\t\t\telse  concat('-0',FISCAL_MONTH_NUM) end ) as FISCAL_YEARMONTH,\n\t\t\tcase when quarter(V_DATE_1) = 4 then 4\n\t\t\t\t when quarter(V_DATE_1) = 3 then 3\n\t\t\t\t when quarter(V_DATE_1) = 2 then 2\n\t\t\t\t when quarter(V_DATE_1) = 1 then 1 end as FISCAL_QUARTER,\n\t\t\t\n\t\t\tcase when   V_DATE_1 < FISCAL_CUR_YEAR then\n\t\t\t\t\tyear(FISCAL_CUR_YEAR)\n\t\t\t\t\telse year(FISCAL_CUR_YEAR)+1 end\n\t\t\t\t\t||'-0'||case when quarter(V_DATE_1) = 4 then 4\n\t\t\t\t\t when quarter(V_DATE_1) = 3 then 3\n\t\t\t\t\t when quarter(V_DATE_1) = 2 then 2\n\t\t\t\t\t when quarter(V_DATE_1) = 1 then 1 end as FISCAL_YEARQUARTER,\n\t\t\tcase when quarter(V_DATE_1) = 4  then 2 when quarter(V_DATE_1) = 3 then 2\n\t\t\t\twhen quarter(V_DATE_1) = 1  then 1 when quarter(V_DATE_1) = 2 then 1\n\t\t\tend as FISCAL_HALFYEAR,\n\t\t\tyear(FISCAL_CUR_YEAR) as FISCAL_YEAR,\n\t\t\tto_timestamp_ntz(V_DATE) as SQL_TIMESTAMP,\n\t\t\t'Y' as CURRENT_ROW_IND,\n\t\t\tto_date(current_timestamp) as EFFECTIVE_DATE,\n\t\t\tto_date('9999-12-31') as EXPIRA_DATE\n\t\t\tfrom table(generator(rowcount => 8401)) /*<< Set to generate 20 years. Modify rowcount to increase or decrease size*/", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_DATE_STG"}, "model.dlh_quickbooks.V_ACCOUNTS_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema=var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    {{source(var('source_schema'),'ACCOUNT')}}\n),\nrename AS \n(   \nSELECT \n    --MD5\n    MD5( TRIM(COALESCE(A.ID,'00000000000000000000000000000000')) ) AS K_ACCOUNT_DLHK\n    --BUSINESS KEYS\n    ,A.ID AS K_ACCOUNT_BK\n    ,A.CURRENCY_ID AS K_CURRENCY_BK\n    ,A.PARENT_ACCOUNT_ID AS K_PARENT_ACCOUNT_BK\n    --ATTRIBUTES    \n    ,A.\"DESCRIPTION\" AS A_DESCRIPTION\n    ,A.FULLY_QUALIFIED_NAME AS A_FULLY_QUALIFIED_NAME\n    ,regexp_count(A.FULLY_QUALIFIED_NAME, '\\\\b:\\\\b', 1) AS A_ACCOUNT_LEVEL\n    ,NULLIF(SPLIT_PART(A.FULLY_QUALIFIED_NAME,':',1),'') AS A_FIRST_LEVEL_ACCOUNT_NAME\n    ,NULLIF(SPLIT_PART(A.FULLY_QUALIFIED_NAME,':',2),'') AS A_SECOND_LEVEL_ACCOUNT_NAME\n    ,NULLIF(SPLIT_PART(A.FULLY_QUALIFIED_NAME,':',3),'') AS A_THIRD_LEVEL_ACCOUNT_NAME\n    ,NULLIF(SPLIT_PART(A.FULLY_QUALIFIED_NAME,':',4),'') AS A_FOURTH_LEVEL_ACCOUNT_NAME\n    ,NULLIF(SPLIT_PART(A.FULLY_QUALIFIED_NAME,':',5),'') AS A_FIFTH_LEVEL_ACCOUNT_NAME\n    ,NULLIF(SPLIT_PART(A.FULLY_QUALIFIED_NAME,':',6),'') AS A_SIXTH_LEVEL_ACCOUNT_NAME   \n    ,A.ACCOUNT_TYPE AS A_ACCOUNT_TYPE\n    ,A.ACCOUNT_SUB_TYPE AS A_ACCOUNT_SUB_TYPE\n    ,A.\"NAME\" AS A_ACCOUNT_NAME\n    ,A.ACTIVE AS A_ACTIVE\n    ,A.CLASSIFICATION AS A_CLASSIFICATION    \n    ,A.ACCOUNT_NUMBER AS A_ACCOUNT_NUMBER\n    ,CASE\n        WHEN A.PARENT_ACCOUNT_ID = A.ID \n            THEN A.ACCOUNT_NUMBER \n            ELSE B.ACCOUNT_NUMBER \n        END AS A_PARENT_ACCOUNT_NUMBER\n    --TIMESTAMP\n    ,A.CREATED_AT AS A_CREATED_AT_DTS\n    ,A.UPDATED_AT AS A_UPDATED_AT_DTS\n    ,A.SYNC_TOKEN AS B_SYNC_TOKEN\n    --METRICS\n    ,A.BALANCE_WITH_SUB_ACCOUNTS::decimal(15,2) AS M_BALANCE_WITH_SUB_ACCOUNTS\n    ,A.BALANCE::decimal(15,2) AS M_BALANCE    \n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\n  FROM\n    source  A\n    left join source B on B.ID = A.PARENT_ACCOUNT_ID    \n)\n\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_quickbooks.DEMO_QUICKBOOKS.ACCOUNT"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "staging", "ACCOUNTS", "V_ACCOUNTS_STG"], "unique_id": "model.dlh_quickbooks.V_ACCOUNTS_STG", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "staging/ACCOUNTS/V_ACCOUNTS_STG.sql", "original_file_path": "models/staging/ACCOUNTS/V_ACCOUNTS_STG.sql", "name": "V_ACCOUNTS_STG", "alias": "V_ACCOUNTS_STG", "checksum": {"name": "sha256", "checksum": "3e605ced4e084245b0fb35de6112e3d6a753b950f24f7e149cffb04886c9c07b"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_QUICKBOOKS", "ACCOUNT"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/staging/ACCOUNTS/V_ACCOUNTS_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "view", "schema": "QUICKBOOKS", "tags": ["staging", "daily"]}, "created_at": 1648040066, "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"ACCOUNT\"\n),\nrename AS \n(   \nSELECT \n    --MD5\n    MD5( TRIM(COALESCE(A.ID,'00000000000000000000000000000000')) ) AS K_ACCOUNT_DLHK\n    --BUSINESS KEYS\n    ,A.ID AS K_ACCOUNT_BK\n    ,A.CURRENCY_ID AS K_CURRENCY_BK\n    ,A.PARENT_ACCOUNT_ID AS K_PARENT_ACCOUNT_BK\n    --ATTRIBUTES    \n    ,A.\"DESCRIPTION\" AS A_DESCRIPTION\n    ,A.FULLY_QUALIFIED_NAME AS A_FULLY_QUALIFIED_NAME\n    ,regexp_count(A.FULLY_QUALIFIED_NAME, '\\\\b:\\\\b', 1) AS A_ACCOUNT_LEVEL\n    ,NULLIF(SPLIT_PART(A.FULLY_QUALIFIED_NAME,':',1),'') AS A_FIRST_LEVEL_ACCOUNT_NAME\n    ,NULLIF(SPLIT_PART(A.FULLY_QUALIFIED_NAME,':',2),'') AS A_SECOND_LEVEL_ACCOUNT_NAME\n    ,NULLIF(SPLIT_PART(A.FULLY_QUALIFIED_NAME,':',3),'') AS A_THIRD_LEVEL_ACCOUNT_NAME\n    ,NULLIF(SPLIT_PART(A.FULLY_QUALIFIED_NAME,':',4),'') AS A_FOURTH_LEVEL_ACCOUNT_NAME\n    ,NULLIF(SPLIT_PART(A.FULLY_QUALIFIED_NAME,':',5),'') AS A_FIFTH_LEVEL_ACCOUNT_NAME\n    ,NULLIF(SPLIT_PART(A.FULLY_QUALIFIED_NAME,':',6),'') AS A_SIXTH_LEVEL_ACCOUNT_NAME   \n    ,A.ACCOUNT_TYPE AS A_ACCOUNT_TYPE\n    ,A.ACCOUNT_SUB_TYPE AS A_ACCOUNT_SUB_TYPE\n    ,A.\"NAME\" AS A_ACCOUNT_NAME\n    ,A.ACTIVE AS A_ACTIVE\n    ,A.CLASSIFICATION AS A_CLASSIFICATION    \n    ,A.ACCOUNT_NUMBER AS A_ACCOUNT_NUMBER\n    ,CASE\n        WHEN A.PARENT_ACCOUNT_ID = A.ID \n            THEN A.ACCOUNT_NUMBER \n            ELSE B.ACCOUNT_NUMBER \n        END AS A_PARENT_ACCOUNT_NUMBER\n    --TIMESTAMP\n    ,A.CREATED_AT AS A_CREATED_AT_DTS\n    ,A.UPDATED_AT AS A_UPDATED_AT_DTS\n    ,A.SYNC_TOKEN AS B_SYNC_TOKEN\n    --METRICS\n    ,A.BALANCE_WITH_SUB_ACCOUNTS::decimal(15,2) AS M_BALANCE_WITH_SUB_ACCOUNTS\n    ,A.BALANCE::decimal(15,2) AS M_BALANCE    \n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'ac401bff-43bb-4502-a9f4-e7bb93cec807' AS MD_INTGR_ID\n  FROM\n    source  A\n    left join source B on B.ID = A.PARENT_ACCOUNT_ID    \n)\n\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_ACCOUNTS_STG"}, "model.dlh_quickbooks.V_ITEMS_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    {{source(var('source_schema'),'ITEM')}}\n),\nrename AS \n(   \nSELECT \n    --MD5\n    MD5( TRIM(COALESCE(A.ID, '00000000000000000000000000000000')) ) AS K_ITEM_DLHK\n    ,MD5( TRIM(COALESCE(A.EXPENSE_ACCOUNT_ID, '00000000000000000000000000000000')) ) AS K_EXPENSE_ACCOUNT_DLHK\n    --BUSINESS KEYS\n    ,A.ID AS K_ITEM_BK\n    ,A.ASSET_ACCOUNT_ID AS K_ASSET_ACCOUNT_BK\n\t,A.INCOME_ACCOUNT_ID  AS K_INCOME_ACCOUNT_BK\n\t,A.EXPENSE_ACCOUNT_ID AS K_EXPENSE_ACCOUNT_BK\n\t,A.PARENT_ITEM_ID AS  K_PARENT_ITEM_ACCOUNT_BK\n\t,A.SALES_TAX_CODE_ID AS K_SALES_TAX_CODE_BK\n\t,A.PURCHASE_TAX_CODE_ID AS K_PURCHASE_TAX_CODE_BK\n    --ATTRIBUTES\n    ,A.\"DESCRIPTION\" AS A_ITEM_DESCRIPTION\n    ,A.FULLY_QUALIFIED_NAME AS A_FULLY_QUALIFIED_NAME    \n    ,regexp_count(A.FULLY_QUALIFIED_NAME, '\\\\b:\\\\b', 1) AS A_ITEM_LEVEL\n    \n    ,NULLIF(SPLIT_PART(A.FULLY_QUALIFIED_NAME,':',1),'') AS A_FIRST_LEVEL_ITEM_NAME\n    ,NULLIF(SPLIT_PART(A.FULLY_QUALIFIED_NAME,':',2),'') AS A_SECOND_LEVEL_ITEM_NAME\n    ,NULLIF(SPLIT_PART(A.FULLY_QUALIFIED_NAME,':',3),'') AS A_THIRD_LEVEL_ITEM_NAME\n    ,NULLIF(SPLIT_PART(A.FULLY_QUALIFIED_NAME,':',4),'') AS A_FOURTH_LEVEL_ITEM_NAME\n    ,NULLIF(SPLIT_PART(A.FULLY_QUALIFIED_NAME,':',5),'') AS A_FIFTH_LEVEL_ITEM_NAME\n    ,NULLIF(SPLIT_PART(A.FULLY_QUALIFIED_NAME,':',6),'') AS A_SIXTH_LEVEL_ITEM_NAME   \n    ,A.\"NAME\" AS A_ITEM_NAME\n    ,A.ACTIVE AS A_ACTIVE\n    ,A.TYPE AS A_ITEM_TYPE\n        \n    ,A.LEVEL AS A_LEVEL\n    ,A.SUB_ITEM AS A_SUB_ITEM\n    ,A.STOCK_KEEPING_UNIT AS A_STOCK_KEEPING_UNIT\n    ,A.PURCHASE_DESCRIPTION AS A_PURCHASE_DESCRIPTION\n    ,A.INVENTORY_START_DATE::DATE AS A_INVENTORY_START_DATE\n\n    --BOOLEAN\n    ,A.SALES_TAX_INCLUDED::BOOLEAN AS B_SALES_TAX_INCLUDED\n    ,A.PURCHASE_TAX_INCLUDED::BOOLEAN AS B_PURCHASE_TAX_INCLUDED\n    ,A.TRACK_QUANTITY_ON_HAND:BOOLEAN AS B_TRACK_QUANTITY_ON_HAND\n    --TIMESTAMP\n    ,A.CREATED_AT AS A_CREATED_AT_DTS\n    ,A.UPDATED_AT AS A_UPDATED_AT_DTS\n    ,A.SYNC_TOKEN AS B_SYNC_TOKEN\n    --METRICS\n    ,A.QUANTITY_ON_HAND::decimal(15,2) AS M_QUANTITY_ON_HAND\n    ,A.UNIT_PRICE::decimal(15,2) AS M_UNITY_PRICE\n    ,A.PURCHASE_COST::decimal(15,2) AS M_PURCHASE_COST    \n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\n  FROM\n    source  A\n    left join source B on B.ID = A.PARENT_ITEM_ID    \n)\n\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_quickbooks.DEMO_QUICKBOOKS.ITEM"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "staging", "ITEM", "V_ITEMS_STG"], "unique_id": "model.dlh_quickbooks.V_ITEMS_STG", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "staging/ITEM/V_ITEMS_STG.sql", "original_file_path": "models/staging/ITEM/V_ITEMS_STG.sql", "name": "V_ITEMS_STG", "alias": "V_ITEMS_STG", "checksum": {"name": "sha256", "checksum": "205746f3cd70c83d51e695fad1abbe9aabf53e499b290c8c2755a4ad038c8ddd"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_QUICKBOOKS", "ITEM"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/staging/ITEM/V_ITEMS_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "view", "schema": "QUICKBOOKS", "tags": ["staging", "daily"]}, "created_at": 1648040066, "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"ITEM\"\n),\nrename AS \n(   \nSELECT \n    --MD5\n    MD5( TRIM(COALESCE(A.ID, '00000000000000000000000000000000')) ) AS K_ITEM_DLHK\n    ,MD5( TRIM(COALESCE(A.EXPENSE_ACCOUNT_ID, '00000000000000000000000000000000')) ) AS K_EXPENSE_ACCOUNT_DLHK\n    --BUSINESS KEYS\n    ,A.ID AS K_ITEM_BK\n    ,A.ASSET_ACCOUNT_ID AS K_ASSET_ACCOUNT_BK\n\t,A.INCOME_ACCOUNT_ID  AS K_INCOME_ACCOUNT_BK\n\t,A.EXPENSE_ACCOUNT_ID AS K_EXPENSE_ACCOUNT_BK\n\t,A.PARENT_ITEM_ID AS  K_PARENT_ITEM_ACCOUNT_BK\n\t,A.SALES_TAX_CODE_ID AS K_SALES_TAX_CODE_BK\n\t,A.PURCHASE_TAX_CODE_ID AS K_PURCHASE_TAX_CODE_BK\n    --ATTRIBUTES\n    ,A.\"DESCRIPTION\" AS A_ITEM_DESCRIPTION\n    ,A.FULLY_QUALIFIED_NAME AS A_FULLY_QUALIFIED_NAME    \n    ,regexp_count(A.FULLY_QUALIFIED_NAME, '\\\\b:\\\\b', 1) AS A_ITEM_LEVEL\n    \n    ,NULLIF(SPLIT_PART(A.FULLY_QUALIFIED_NAME,':',1),'') AS A_FIRST_LEVEL_ITEM_NAME\n    ,NULLIF(SPLIT_PART(A.FULLY_QUALIFIED_NAME,':',2),'') AS A_SECOND_LEVEL_ITEM_NAME\n    ,NULLIF(SPLIT_PART(A.FULLY_QUALIFIED_NAME,':',3),'') AS A_THIRD_LEVEL_ITEM_NAME\n    ,NULLIF(SPLIT_PART(A.FULLY_QUALIFIED_NAME,':',4),'') AS A_FOURTH_LEVEL_ITEM_NAME\n    ,NULLIF(SPLIT_PART(A.FULLY_QUALIFIED_NAME,':',5),'') AS A_FIFTH_LEVEL_ITEM_NAME\n    ,NULLIF(SPLIT_PART(A.FULLY_QUALIFIED_NAME,':',6),'') AS A_SIXTH_LEVEL_ITEM_NAME   \n    ,A.\"NAME\" AS A_ITEM_NAME\n    ,A.ACTIVE AS A_ACTIVE\n    ,A.TYPE AS A_ITEM_TYPE\n        \n    ,A.LEVEL AS A_LEVEL\n    ,A.SUB_ITEM AS A_SUB_ITEM\n    ,A.STOCK_KEEPING_UNIT AS A_STOCK_KEEPING_UNIT\n    ,A.PURCHASE_DESCRIPTION AS A_PURCHASE_DESCRIPTION\n    ,A.INVENTORY_START_DATE::DATE AS A_INVENTORY_START_DATE\n\n    --BOOLEAN\n    ,A.SALES_TAX_INCLUDED::BOOLEAN AS B_SALES_TAX_INCLUDED\n    ,A.PURCHASE_TAX_INCLUDED::BOOLEAN AS B_PURCHASE_TAX_INCLUDED\n    ,A.TRACK_QUANTITY_ON_HAND:BOOLEAN AS B_TRACK_QUANTITY_ON_HAND\n    --TIMESTAMP\n    ,A.CREATED_AT AS A_CREATED_AT_DTS\n    ,A.UPDATED_AT AS A_UPDATED_AT_DTS\n    ,A.SYNC_TOKEN AS B_SYNC_TOKEN\n    --METRICS\n    ,A.QUANTITY_ON_HAND::decimal(15,2) AS M_QUANTITY_ON_HAND\n    ,A.UNIT_PRICE::decimal(15,2) AS M_UNITY_PRICE\n    ,A.PURCHASE_COST::decimal(15,2) AS M_PURCHASE_COST    \n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'ac401bff-43bb-4502-a9f4-e7bb93cec807' AS MD_INTGR_ID\n  FROM\n    source  A\n    left join source B on B.ID = A.PARENT_ITEM_ID    \n)\n\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_ITEMS_STG"}, "model.dlh_quickbooks.V_CLASS_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    {{source(var('source_schema'),'CLASS')}}\n),\nrename AS \n(   \nSELECT\n    MD5( TRIM(COALESCE(I.ID,'00000000000000000000000000000000')) ) AS K_CLASS_DLHK\n    ,I.ID AS K_CLASS_BK\n    ,I.PARENT_CLASS_ID AS K_PARENT_CLASS_BK\n    ,I.FULLY_QUALIFIED_NAME AS A_FULLY_QUALIFIED_NAME\n    ,regexp_count(I.FULLY_QUALIFIED_NAME, '\\\\b:\\\\b', 1) AS A_ITEM_LEVEL    \n    ,NULLIF(SPLIT_PART(I.FULLY_QUALIFIED_NAME,':',1),'') AS A_FIRST_LEVEL_CLASS_NAME\n    ,NULLIF(SPLIT_PART(I.FULLY_QUALIFIED_NAME,':',2),'') AS A_SECOND_LEVEL_CLASS_NAME\n    ,NULLIF(SPLIT_PART(I.FULLY_QUALIFIED_NAME,':',3),'') AS A_THIRD_LEVEL_CLASS_NAME\n    ,NULLIF(SPLIT_PART(I.FULLY_QUALIFIED_NAME,':',4),'') AS A_FOURTH_LEVEL_CLASS_NAME\n    ,NULLIF(SPLIT_PART(I.FULLY_QUALIFIED_NAME,':',5),'') AS A_FIFTH_LEVEL_CLASS_NAME\n    ,NULLIF(SPLIT_PART(I.FULLY_QUALIFIED_NAME,':',6),'') AS A_SIXTH_LEVEL_CLASS_NAME\n    ,I.NAME AS A_CLASS_NAME\n    ,I.ACTIVE AS B_IS_ACTIVE\n    ,I.SUB_CLASS AS B_IS_SUB_CLASS    \n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID     \n\n  FROM\n    source  I\n    left join source B on B.ID = I.PARENT_CLASS_ID\n    \n)\n\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_quickbooks.DEMO_QUICKBOOKS.CLASS"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "staging", "CLASS", "V_CLASS_STG"], "unique_id": "model.dlh_quickbooks.V_CLASS_STG", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "staging/CLASS/V_CLASS_STG.sql", "original_file_path": "models/staging/CLASS/V_CLASS_STG.sql", "name": "V_CLASS_STG", "alias": "V_CLASS_STG", "checksum": {"name": "sha256", "checksum": "86bc56108858bbd215e7b04c43dbeab87783861277d47a0467276c89add97d18"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_QUICKBOOKS", "CLASS"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/staging/CLASS/V_CLASS_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "view", "schema": "QUICKBOOKS", "tags": ["staging", "daily"]}, "created_at": 1648040066, "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"CLASS\"\n),\nrename AS \n(   \nSELECT\n    MD5( TRIM(COALESCE(I.ID,'00000000000000000000000000000000')) ) AS K_CLASS_DLHK\n    ,I.ID AS K_CLASS_BK\n    ,I.PARENT_CLASS_ID AS K_PARENT_CLASS_BK\n    ,I.FULLY_QUALIFIED_NAME AS A_FULLY_QUALIFIED_NAME\n    ,regexp_count(I.FULLY_QUALIFIED_NAME, '\\\\b:\\\\b', 1) AS A_ITEM_LEVEL    \n    ,NULLIF(SPLIT_PART(I.FULLY_QUALIFIED_NAME,':',1),'') AS A_FIRST_LEVEL_CLASS_NAME\n    ,NULLIF(SPLIT_PART(I.FULLY_QUALIFIED_NAME,':',2),'') AS A_SECOND_LEVEL_CLASS_NAME\n    ,NULLIF(SPLIT_PART(I.FULLY_QUALIFIED_NAME,':',3),'') AS A_THIRD_LEVEL_CLASS_NAME\n    ,NULLIF(SPLIT_PART(I.FULLY_QUALIFIED_NAME,':',4),'') AS A_FOURTH_LEVEL_CLASS_NAME\n    ,NULLIF(SPLIT_PART(I.FULLY_QUALIFIED_NAME,':',5),'') AS A_FIFTH_LEVEL_CLASS_NAME\n    ,NULLIF(SPLIT_PART(I.FULLY_QUALIFIED_NAME,':',6),'') AS A_SIXTH_LEVEL_CLASS_NAME\n    ,I.NAME AS A_CLASS_NAME\n    ,I.ACTIVE AS B_IS_ACTIVE\n    ,I.SUB_CLASS AS B_IS_SUB_CLASS    \n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'ac401bff-43bb-4502-a9f4-e7bb93cec807' AS MD_INTGR_ID     \n\n  FROM\n    source  I\n    left join source B on B.ID = I.PARENT_CLASS_ID\n    \n)\n\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_CLASS_STG"}, "model.dlh_quickbooks.V_PURCHASES_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\nWITH PURCHASE AS (\n    SELECT *\n    FROM {{ref('V_QKB_PURCHASE_HEADER_STG')}}\n),\n\nPURCHASE_LINES AS (\n    SELECT *\n    FROM {{ref('V_QKB_PURCHASE_LINE_STG')}}\n),\nITEMS AS (\n    SELECT *\n    FROM {{ref('W_QKB_ITEMS_D')}}\n),\nFINAL AS (\n    SELECT\n        --DLHK\n        PURCHASE_LINES.K_PURCHASE_LINE_DLHK\n        ,PURCHASE.K_PURCHASE_DLHK\n        ,PURCHASE.K_ACCOUNT_DLHK AS K_PURCHASE_ACCOUNT_DLHK\n        ,PURCHASE.K_CURRENCY_DLHK AS K_PURCHASE_CURRENCY_DLHK\n        ,PURCHASE.K_CUSTOMER_DLHK AS K_PURCHASE_CUSTOMER_DLHK\n        ,PURCHASE.K_EMPLOYEE_DLHK     \n        ,PURCHASE.K_VENDOR_DLHK\n        ,PURCHASE_LINES.K_ACCOUNT_EXPENSE_DLHK\n        ,PURCHASE_LINES.K_ITEM_EXPENSE_CUSTOMER_DLHK\n        ,PURCHASE_LINES.K_ACCOUNT_EXPENSE_CUSTOMER_DLHK\n        ,PURCHASE_LINES.K_ITEM_EXPENSE_DLHK\n        ,PURCHASE_LINES.K_ITEM_EXPENSE_ACCOUNT_DLHK        \n        ,COALESCE(PURCHASE_LINES.K_ACCOUNT_EXPENSE_DLHK,PURCHASE_LINES.K_ITEM_EXPENSE_ACCOUNT_DLHK) AS K_ACCOUNT_DLHK\n        ,COALESCE(PURCHASE_LINES.K_ACCOUNT_EXPENSE_CUSTOMER_DLHK,PURCHASE_LINES.K_ITEM_EXPENSE_CUSTOMER_DLHK) AS K_CUSTOMER_DLHK\n        --BK \n        ,PURCHASE.K_PURCHASE_BK\n        ,PURCHASE.K_CURRENCY_BK\n        ,PURCHASE.K_ACCOUNT_BK AS K_PURCHASE_ACCOUNT_BK\n        ,PURCHASE.K_DEPARTMENT_BK\n        ,PURCHASE.K_PAYMENT_METHOD_BK\n        ,PURCHASE.K_CUSTOMER_BK AS K_PURCHASE_CUSTOMER_BK\n        ,PURCHASE.K_VENDOR_BK\n        ,PURCHASE.K_EMPLOYEE_BK\n        ,PURCHASE.K_TAX_CODE_BK AS K_PURCHASE_TAX_CODE_BK\n        ,PURCHASE_LINES.K_ITEM_EXPENSE_ACCOUNT_BK\n        ,PURCHASE_LINES.K_ACCOUNT_EXPENSE_ACCOUNT_BK\n        ,PURCHASE_LINES.K_ACCOUNT_EXPENSE_CLASS_BK\n        ,PURCHASE_LINES.K_ACCOUNT_EXPENSE_CUSTOMER_BK\n        ,PURCHASE_LINES.K_ACCOUNT_EXPENSE_TAX_CODE_BK\n        ,PURCHASE_LINES.K_ITEM_EXPENSE_CLASS_BK\n        ,PURCHASE_LINES.K_ITEM_EXPENSE_CUSTOMER_BK\n        ,PURCHASE_LINES.K_ITEM_EXPENSE_ITEM_BK\n        ,PURCHASE_LINES.K_ITEM_EXPENSE_TAX_CODE_BK\n\n        ,COALESCE(PURCHASE_LINES.K_ACCOUNT_EXPENSE_ACCOUNT_BK,PURCHASE_LINES.K_ITEM_EXPENSE_ACCOUNT_BK) AS K_ACCOUNT_BK\n        ,COALESCE(PURCHASE_LINES.K_ACCOUNT_EXPENSE_CUSTOMER_BK,PURCHASE_LINES.K_ITEM_EXPENSE_CUSTOMER_BK) AS K_CUSTOMER_BK\n        \n        --ATTRIBUTES\n        ,PURCHASE_LINES.A_INDEX AS A_PURCHASE_LINE_INDEX\n        ,COALESCE(PURCHASE_LINES.A_ACCOUNT_EXPENSE_BILLABLE_STATUS,PURCHASE_LINES.A_ITEM_EXPENSE_BILLABLE_STATUS) AS A_BILLABLE_STATUS        \n        ,coalesce(PURCHASE_LINES.A_DESCRIPTION, ITEMS.A_ITEM_NAME) as A_DESCRIPTION       \n                \n        ,PURCHASE.A_PAYMENT_TYPE\n        ,PURCHASE.A_PRINT_STATUS\n        ,PURCHASE.A_GLOBAL_TAX_CALCULATION\n        ,PURCHASE.A_CREATED_AT_DTS AS A_PURCHASE_CREATED_AT_DTS\n        ,PURCHASE.A_UPDATED_AT_DTS AS A_PURCHASE_UPDATED_AT_DTS        \n        ,PURCHASE.A_TRANSACTION_DATE AS A_PURCHASE_TRANSACTION_DATE\n        ,PURCHASE.A_TRANSACTION_SOURCE AS A_PURCHASE_TRANSACTION_SOURCE\n\n        --METRICS\n        ,PURCHASE_LINES.M_AMOUNT\n        ,PURCHASE_LINES.M_ACCOUNT_EXPENSE_TAX_AMOUNT        \n        ,PURCHASE_LINES.M_ITEM_EXPENSE_UNIT_PRICE\n        ,PURCHASE_LINES.M_ITEM_EXPENSE_QUANTITY\n\n         --METADATA\n        ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n        ,'{{invocation_id}}' AS MD_INTGR_ID\n    FROM PURCHASE\n\n    INNER JOIN PURCHASE_LINES \n        ON PURCHASE.K_PURCHASE_DLHK = PURCHASE_LINES.K_PURCHASE_DLHK\n    LEFT JOIN ITEMS\n        ON ITEMS.K_ITEM_DLHK = PURCHASE_LINES.K_ITEM_EXPENSE_DLHK\n)\n\nSELECT *\nFROM FINAL", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_quickbooks.V_PURCHASE_HEADER_STG", "model.dlh_quickbooks.V_PURCHASE_LINE_STG", "model.dlh_quickbooks.W_ITEMS_D"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "staging", "PURCHASE", "V_PURCHASES_STG"], "unique_id": "model.dlh_quickbooks.V_PURCHASES_STG", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "staging/PURCHASE/V_PURCHASES_STG.sql", "original_file_path": "models/staging/PURCHASE/V_PURCHASES_STG.sql", "name": "V_PURCHASES_STG", "alias": "V_PURCHASES_STG", "checksum": {"name": "sha256", "checksum": "bfe71423ebec1c7e3f4ddc89eaea445fc4e26cffc38193f97237d4702c36ba9a"}, "tags": ["staging", "daily"], "refs": [["V_PURCHASE_HEADER_STG"], ["V_PURCHASE_LINE_STG"], ["W_ITEMS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/staging/PURCHASE/V_PURCHASES_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "view", "schema": "QUICKBOOKS", "tags": ["staging", "daily"]}, "created_at": 1648040066, "compiled_sql": "\n\nWITH PURCHASE AS (\n    SELECT *\n    FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_PURCHASE_HEADER_STG\n),\n\nPURCHASE_LINES AS (\n    SELECT *\n    FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_PURCHASE_LINE_STG\n),\nITEMS AS (\n    SELECT *\n    FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_ITEMS_D\n),\nFINAL AS (\n    SELECT\n        --DLHK\n        PURCHASE_LINES.K_PURCHASE_LINE_DLHK\n        ,PURCHASE.K_PURCHASE_DLHK\n        ,PURCHASE.K_ACCOUNT_DLHK AS K_PURCHASE_ACCOUNT_DLHK\n        ,PURCHASE.K_CURRENCY_DLHK AS K_PURCHASE_CURRENCY_DLHK\n        ,PURCHASE.K_CUSTOMER_DLHK AS K_PURCHASE_CUSTOMER_DLHK\n        ,PURCHASE.K_EMPLOYEE_DLHK     \n        ,PURCHASE.K_VENDOR_DLHK\n        ,PURCHASE_LINES.K_ACCOUNT_EXPENSE_DLHK\n        ,PURCHASE_LINES.K_ITEM_EXPENSE_CUSTOMER_DLHK\n        ,PURCHASE_LINES.K_ACCOUNT_EXPENSE_CUSTOMER_DLHK\n        ,PURCHASE_LINES.K_ITEM_EXPENSE_DLHK\n        ,PURCHASE_LINES.K_ITEM_EXPENSE_ACCOUNT_DLHK        \n        ,COALESCE(PURCHASE_LINES.K_ACCOUNT_EXPENSE_DLHK,PURCHASE_LINES.K_ITEM_EXPENSE_ACCOUNT_DLHK) AS K_ACCOUNT_DLHK\n        ,COALESCE(PURCHASE_LINES.K_ACCOUNT_EXPENSE_CUSTOMER_DLHK,PURCHASE_LINES.K_ITEM_EXPENSE_CUSTOMER_DLHK) AS K_CUSTOMER_DLHK\n        --BK \n        ,PURCHASE.K_PURCHASE_BK\n        ,PURCHASE.K_CURRENCY_BK\n        ,PURCHASE.K_ACCOUNT_BK AS K_PURCHASE_ACCOUNT_BK\n        ,PURCHASE.K_DEPARTMENT_BK\n        ,PURCHASE.K_PAYMENT_METHOD_BK\n        ,PURCHASE.K_CUSTOMER_BK AS K_PURCHASE_CUSTOMER_BK\n        ,PURCHASE.K_VENDOR_BK\n        ,PURCHASE.K_EMPLOYEE_BK\n        ,PURCHASE.K_TAX_CODE_BK AS K_PURCHASE_TAX_CODE_BK\n        ,PURCHASE_LINES.K_ITEM_EXPENSE_ACCOUNT_BK\n        ,PURCHASE_LINES.K_ACCOUNT_EXPENSE_ACCOUNT_BK\n        ,PURCHASE_LINES.K_ACCOUNT_EXPENSE_CLASS_BK\n        ,PURCHASE_LINES.K_ACCOUNT_EXPENSE_CUSTOMER_BK\n        ,PURCHASE_LINES.K_ACCOUNT_EXPENSE_TAX_CODE_BK\n        ,PURCHASE_LINES.K_ITEM_EXPENSE_CLASS_BK\n        ,PURCHASE_LINES.K_ITEM_EXPENSE_CUSTOMER_BK\n        ,PURCHASE_LINES.K_ITEM_EXPENSE_ITEM_BK\n        ,PURCHASE_LINES.K_ITEM_EXPENSE_TAX_CODE_BK\n\n        ,COALESCE(PURCHASE_LINES.K_ACCOUNT_EXPENSE_ACCOUNT_BK,PURCHASE_LINES.K_ITEM_EXPENSE_ACCOUNT_BK) AS K_ACCOUNT_BK\n        ,COALESCE(PURCHASE_LINES.K_ACCOUNT_EXPENSE_CUSTOMER_BK,PURCHASE_LINES.K_ITEM_EXPENSE_CUSTOMER_BK) AS K_CUSTOMER_BK\n        \n        --ATTRIBUTES\n        ,PURCHASE_LINES.A_INDEX AS A_PURCHASE_LINE_INDEX\n        ,COALESCE(PURCHASE_LINES.A_ACCOUNT_EXPENSE_BILLABLE_STATUS,PURCHASE_LINES.A_ITEM_EXPENSE_BILLABLE_STATUS) AS A_BILLABLE_STATUS        \n        ,coalesce(PURCHASE_LINES.A_DESCRIPTION, ITEMS.A_ITEM_NAME) as A_DESCRIPTION       \n                \n        ,PURCHASE.A_PAYMENT_TYPE\n        ,PURCHASE.A_PRINT_STATUS\n        ,PURCHASE.A_GLOBAL_TAX_CALCULATION\n        ,PURCHASE.A_CREATED_AT_DTS AS A_PURCHASE_CREATED_AT_DTS\n        ,PURCHASE.A_UPDATED_AT_DTS AS A_PURCHASE_UPDATED_AT_DTS        \n        ,PURCHASE.A_TRANSACTION_DATE AS A_PURCHASE_TRANSACTION_DATE\n        ,PURCHASE.A_TRANSACTION_SOURCE AS A_PURCHASE_TRANSACTION_SOURCE\n\n        --METRICS\n        ,PURCHASE_LINES.M_AMOUNT\n        ,PURCHASE_LINES.M_ACCOUNT_EXPENSE_TAX_AMOUNT        \n        ,PURCHASE_LINES.M_ITEM_EXPENSE_UNIT_PRICE\n        ,PURCHASE_LINES.M_ITEM_EXPENSE_QUANTITY\n\n         --METADATA\n        ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n        ,'ac401bff-43bb-4502-a9f4-e7bb93cec807' AS MD_INTGR_ID\n    FROM PURCHASE\n\n    INNER JOIN PURCHASE_LINES \n        ON PURCHASE.K_PURCHASE_DLHK = PURCHASE_LINES.K_PURCHASE_DLHK\n    LEFT JOIN ITEMS\n        ON ITEMS.K_ITEM_DLHK = PURCHASE_LINES.K_ITEM_EXPENSE_DLHK\n)\n\nSELECT *\nFROM FINAL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_PURCHASES_STG"}, "model.dlh_quickbooks.V_PURCHASE_HEADER_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\nWITH source AS(\n    SELECT * FROM  {{source(var('source_schema'),'PURCHASE')}}\n),\nvendors AS (\n    SELECT * FROM {{ref('W_QKB_VENDORS_D')}}\n),\naccounts AS (\n    SELECT * FROM {{ref('W_QKB_ACCOUNTS_D')}}\n),\ncurrency AS (\n    SELECT * FROM {{ref('W_QKB_CURRENCY_D')}}\n),\ncustomers AS (\n    SELECT * FROM {{ref('W_QKB_CUSTOMERS_D')}}\n),\nemployees AS (\n    SELECT * FROM {{ref('W_QKB_EMPLOYEES_D')}}\n),\nrename AS (\nSELECT\n--DLHK\nMD5( TRIM(COALESCE(P.ID,'00000000000000000000000000000000')) ) AS K_PURCHASE_DLHK\n,v.K_VENDOR_DLHK\n,a.K_ACCOUNT_DLHK\n,c.K_CURRENCY_DLHK\n,cus.K_CUSTOMER_DLHK\n,e.K_EMPLOYEE_DLHK\n--BK\n,P.ID AS K_PURCHASE_BK\n,P.CURRENCY_ID AS K_CURRENCY_BK\n,P.ACCOUNT_ID AS K_ACCOUNT_BK\n,P.DEPARTMENT_ID AS K_DEPARTMENT_BK\n,P.PAYMENT_METHOD_ID AS K_PAYMENT_METHOD_BK\n,P.CUSTOMER_ID AS K_CUSTOMER_BK\n,P.VENDOR_ID AS K_VENDOR_BK\n,P.EMPLOYEE_ID AS K_EMPLOYEE_BK\n,P.TAX_CODE_ID AS K_TAX_CODE_BK\n\n--ATTRIBUTES\n,P.SYNC_TOKEN AS A_SYNC_TOKEN\n,P.DOC_NUMBER AS A_DOC_NUMBER\n,P.PAYMENT_TYPE AS A_PAYMENT_TYPE\n,P.PRINT_STATUS AS A_PRINT_STATUS\n,P.PRIVATE_NOTE AS A_PRIVATE_NOTE\n,P.GLOBAL_TAX_CALCULATION AS A_GLOBAL_TAX_CALCULATION\n,P.CREATED_AT AS A_CREATED_AT_DTS\n,P.UPDATED_AT AS A_UPDATED_AT_DTS\n,P.REMIT_TO_ADDRESS_ID AS A_REMIT_TO_ADDRESS_ID\n,P.TRANSACTION_DATE AS A_TRANSACTION_DATE\n,P.TRANSACTION_SOURCE AS A_TRANSACTION_SOURCE\n\n--BOOLEAN\n,P.CREDIT AS B_CREDIT\n\n--METRICS\n,P.EXCHANGE_RATE::DECIMAL(15,2) AS M_EXCHANGE_RATE\n,P.TOTAL_TAX AS M_TOTAL_TAX\n,P.TOTAL_AMOUNT AS M_TOTAL_AMOUNT\n\n --METADATA\n,CURRENT_TIMESTAMP as MD_LOAD_DTS\n,'{{invocation_id}}' AS MD_INTGR_ID\n\nFROM\nsource as P\nLEFT JOIN vendors as v on v.K_VENDOR_BK = P.VENDOR_ID\nLEFT JOIN accounts AS a on a.K_ACCOUNT_BK = P.ACCOUNT_ID\nLEFT JOIN currency AS c on c.K_CURRENCY_BK = P.CURRENCY_ID\nLEFT JOIN customers AS cus on cus.K_CUSTOMER_BK = P.CUSTOMER_ID\nLEFT JOIN employees AS e on e.K_EMPLOYEE_BK = P.EMPLOYEE_ID\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_quickbooks.DEMO_QUICKBOOKS.PURCHASE", "model.dlh_quickbooks.W_VENDORS_D", "model.dlh_quickbooks.W_ACCOUNTS_D", "model.dlh_quickbooks.W_CURRENCY_D", "model.dlh_quickbooks.W_CUSTOMERS_D", "model.dlh_quickbooks.W_EMPLOYEES_D"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "staging", "PURCHASE", "V_PURCHASE_HEADER_STG"], "unique_id": "model.dlh_quickbooks.V_PURCHASE_HEADER_STG", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "staging/PURCHASE/V_PURCHASE_HEADER_STG.sql", "original_file_path": "models/staging/PURCHASE/V_PURCHASE_HEADER_STG.sql", "name": "V_PURCHASE_HEADER_STG", "alias": "V_PURCHASE_HEADER_STG", "checksum": {"name": "sha256", "checksum": "cd8a62b9ebafdced2095ac110c2f0b0172d3512dfbd5fdd9d46fbe41e62d40de"}, "tags": ["staging", "daily"], "refs": [["W_VENDORS_D"], ["W_ACCOUNTS_D"], ["W_CURRENCY_D"], ["W_CUSTOMERS_D"], ["W_EMPLOYEES_D"]], "sources": [["DEMO_QUICKBOOKS", "PURCHASE"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/staging/PURCHASE/V_PURCHASE_HEADER_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "view", "schema": "QUICKBOOKS", "tags": ["staging", "daily"]}, "created_at": 1648040066, "compiled_sql": "\n\nWITH source AS(\n    SELECT * FROM  DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"PURCHASE\"\n),\nvendors AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_VENDORS_D\n),\naccounts AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_ACCOUNTS_D\n),\ncurrency AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_CURRENCY_D\n),\ncustomers AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_CUSTOMERS_D\n),\nemployees AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_EMPLOYEES_D\n),\nrename AS (\nSELECT\n--DLHK\nMD5( TRIM(COALESCE(P.ID,'00000000000000000000000000000000')) ) AS K_PURCHASE_DLHK\n,v.K_VENDOR_DLHK\n,a.K_ACCOUNT_DLHK\n,c.K_CURRENCY_DLHK\n,cus.K_CUSTOMER_DLHK\n,e.K_EMPLOYEE_DLHK\n--BK\n,P.ID AS K_PURCHASE_BK\n,P.CURRENCY_ID AS K_CURRENCY_BK\n,P.ACCOUNT_ID AS K_ACCOUNT_BK\n,P.DEPARTMENT_ID AS K_DEPARTMENT_BK\n,P.PAYMENT_METHOD_ID AS K_PAYMENT_METHOD_BK\n,P.CUSTOMER_ID AS K_CUSTOMER_BK\n,P.VENDOR_ID AS K_VENDOR_BK\n,P.EMPLOYEE_ID AS K_EMPLOYEE_BK\n,P.TAX_CODE_ID AS K_TAX_CODE_BK\n\n--ATTRIBUTES\n,P.SYNC_TOKEN AS A_SYNC_TOKEN\n,P.DOC_NUMBER AS A_DOC_NUMBER\n,P.PAYMENT_TYPE AS A_PAYMENT_TYPE\n,P.PRINT_STATUS AS A_PRINT_STATUS\n,P.PRIVATE_NOTE AS A_PRIVATE_NOTE\n,P.GLOBAL_TAX_CALCULATION AS A_GLOBAL_TAX_CALCULATION\n,P.CREATED_AT AS A_CREATED_AT_DTS\n,P.UPDATED_AT AS A_UPDATED_AT_DTS\n,P.REMIT_TO_ADDRESS_ID AS A_REMIT_TO_ADDRESS_ID\n,P.TRANSACTION_DATE AS A_TRANSACTION_DATE\n,P.TRANSACTION_SOURCE AS A_TRANSACTION_SOURCE\n\n--BOOLEAN\n,P.CREDIT AS B_CREDIT\n\n--METRICS\n,P.EXCHANGE_RATE::DECIMAL(15,2) AS M_EXCHANGE_RATE\n,P.TOTAL_TAX AS M_TOTAL_TAX\n,P.TOTAL_AMOUNT AS M_TOTAL_AMOUNT\n\n --METADATA\n,CURRENT_TIMESTAMP as MD_LOAD_DTS\n,'ac401bff-43bb-4502-a9f4-e7bb93cec807' AS MD_INTGR_ID\n\nFROM\nsource as P\nLEFT JOIN vendors as v on v.K_VENDOR_BK = P.VENDOR_ID\nLEFT JOIN accounts AS a on a.K_ACCOUNT_BK = P.ACCOUNT_ID\nLEFT JOIN currency AS c on c.K_CURRENCY_BK = P.CURRENCY_ID\nLEFT JOIN customers AS cus on cus.K_CUSTOMER_BK = P.CUSTOMER_ID\nLEFT JOIN employees AS e on e.K_EMPLOYEE_BK = P.EMPLOYEE_ID\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_PURCHASE_HEADER_STG"}, "model.dlh_quickbooks.V_PURCHASE_LINE_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\nWITH source AS(\n    SELECT * FROM  {{source(var('source_schema'),'PURCHASE_LINE')}}\n),\n\naccounts AS (\n    SELECT * FROM {{ref('W_QKB_ACCOUNTS_D')}}\n),\n\ncustomers AS (\n    SELECT * FROM {{ref('W_QKB_CUSTOMERS_D')}}\n),\n\nitems AS (\n    SELECT * FROM {{ref('W_QKB_ITEMS_D')}}\n),\n\nrename AS (\nSELECT\n--DLHK\nMD5( TRIM(COALESCE(CONCAT(P.PURCHASE_ID,'-',P.INDEX),'00000000000000000000000000000000')) ) AS K_PURCHASE_LINE_DLHK\n,MD5( TRIM(COALESCE(P.PURCHASE_ID,'00000000000000000000000000000000')) ) AS K_PURCHASE_DLHK\n,a.K_ACCOUNT_DLHK AS K_ACCOUNT_EXPENSE_DLHK\n,cus.K_CUSTOMER_DLHK AS K_ITEM_EXPENSE_CUSTOMER_DLHK\n,cus_account.K_CUSTOMER_DLHK AS K_ACCOUNT_EXPENSE_CUSTOMER_DLHK\n,I.K_ITEM_DLHK AS K_ITEM_EXPENSE_DLHK\n,I.K_EXPENSE_ACCOUNT_DLHK AS K_ITEM_EXPENSE_ACCOUNT_DLHK\n--BK\n,P.PURCHASE_ID AS K_PURCHASE_BK\n,P.ACCOUNT_EXPENSE_ACCOUNT_ID AS K_ACCOUNT_EXPENSE_ACCOUNT_BK\n,P.ACCOUNT_EXPENSE_CLASS_ID AS K_ACCOUNT_EXPENSE_CLASS_BK\n,P.ACCOUNT_EXPENSE_CUSTOMER_ID AS K_ACCOUNT_EXPENSE_CUSTOMER_BK\n,P.ACCOUNT_EXPENSE_TAX_CODE_ID AS K_ACCOUNT_EXPENSE_TAX_CODE_BK\n,P.ITEM_EXPENSE_CLASS_ID AS K_ITEM_EXPENSE_CLASS_BK\n,P.ITEM_EXPENSE_CUSTOMER_ID AS K_ITEM_EXPENSE_CUSTOMER_BK\n,P.ITEM_EXPENSE_ITEM_ID AS K_ITEM_EXPENSE_ITEM_BK\n,P.ITEM_EXPENSE_TAX_CODE_ID AS K_ITEM_EXPENSE_TAX_CODE_BK\n,I.K_EXPENSE_ACCOUNT_DLHK AS K_ITEM_EXPENSE_ACCOUNT_BK\n--ATTRIBUTES\n,P.ACCOUNT_EXPENSE_BILLABLE_STATUS AS A_ACCOUNT_EXPENSE_BILLABLE_STATUS\n,P.DESCRIPTION AS A_DESCRIPTION\n,P.INDEX AS A_INDEX\n,P.ITEM_EXPENSE_BILLABLE_STATUS AS A_ITEM_EXPENSE_BILLABLE_STATUS\n--METRICS\n,P.ACCOUNT_EXPENSE_TAX_AMOUNT::DECIMAL(15,2) AS M_ACCOUNT_EXPENSE_TAX_AMOUNT\n,P.AMOUNT::DECIMAL(15,2) AS M_AMOUNT\n,P.ITEM_EXPENSE_QUANTITY::DECIMAL(15,2) AS M_ITEM_EXPENSE_QUANTITY\n,P.ITEM_EXPENSE_UNIT_PRICE::DECIMAL(15,2) AS M_ITEM_EXPENSE_UNIT_PRICE\n\n --METADATA\n,CURRENT_TIMESTAMP as MD_LOAD_DTS\n,'{{invocation_id}}' AS MD_INTGR_ID\nFROM\nsource as P\nLEFT JOIN items I on I.K_ITEM_BK = P.ITEM_EXPENSE_ITEM_ID\nLEFT JOIN accounts AS a on a.K_ACCOUNT_BK = P.ACCOUNT_EXPENSE_ACCOUNT_ID\nLEFT JOIN customers AS cus on cus.K_CUSTOMER_BK = P.ITEM_EXPENSE_CUSTOMER_ID\nLEFT JOIN customers AS cus_account on cus_account.K_CUSTOMER_BK = P.ACCOUNT_EXPENSE_CUSTOMER_ID\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_quickbooks.DEMO_QUICKBOOKS.PURCHASE_LINE", "model.dlh_quickbooks.W_ACCOUNTS_D", "model.dlh_quickbooks.W_CUSTOMERS_D", "model.dlh_quickbooks.W_ITEMS_D"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "staging", "PURCHASE", "V_PURCHASE_LINE_STG"], "unique_id": "model.dlh_quickbooks.V_PURCHASE_LINE_STG", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "staging/PURCHASE/V_PURCHASE_LINE_STG.sql", "original_file_path": "models/staging/PURCHASE/V_PURCHASE_LINE_STG.sql", "name": "V_PURCHASE_LINE_STG", "alias": "V_PURCHASE_LINE_STG", "checksum": {"name": "sha256", "checksum": "8ea08e05d03593c378aa5c7e5323b6af150b33c95846249a9441e1df78267db2"}, "tags": ["staging", "daily"], "refs": [["W_ACCOUNTS_D"], ["W_CUSTOMERS_D"], ["W_ITEMS_D"]], "sources": [["DEMO_QUICKBOOKS", "PURCHASE_LINE"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/staging/PURCHASE/V_PURCHASE_LINE_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "view", "schema": "QUICKBOOKS", "tags": ["staging", "daily"]}, "created_at": 1648040067, "compiled_sql": "\n\nWITH source AS(\n    SELECT * FROM  DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"PURCHASE_LINE\"\n),\n\naccounts AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_ACCOUNTS_D\n),\n\ncustomers AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_CUSTOMERS_D\n),\n\nitems AS (\n    SELECT * FROM DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_ITEMS_D\n),\n\nrename AS (\nSELECT\n--DLHK\nMD5( TRIM(COALESCE(CONCAT(P.PURCHASE_ID,'-',P.INDEX),'00000000000000000000000000000000')) ) AS K_PURCHASE_LINE_DLHK\n,MD5( TRIM(COALESCE(P.PURCHASE_ID,'00000000000000000000000000000000')) ) AS K_PURCHASE_DLHK\n,a.K_ACCOUNT_DLHK AS K_ACCOUNT_EXPENSE_DLHK\n,cus.K_CUSTOMER_DLHK AS K_ITEM_EXPENSE_CUSTOMER_DLHK\n,cus_account.K_CUSTOMER_DLHK AS K_ACCOUNT_EXPENSE_CUSTOMER_DLHK\n,I.K_ITEM_DLHK AS K_ITEM_EXPENSE_DLHK\n,I.K_EXPENSE_ACCOUNT_DLHK AS K_ITEM_EXPENSE_ACCOUNT_DLHK\n--BK\n,P.PURCHASE_ID AS K_PURCHASE_BK\n,P.ACCOUNT_EXPENSE_ACCOUNT_ID AS K_ACCOUNT_EXPENSE_ACCOUNT_BK\n,P.ACCOUNT_EXPENSE_CLASS_ID AS K_ACCOUNT_EXPENSE_CLASS_BK\n,P.ACCOUNT_EXPENSE_CUSTOMER_ID AS K_ACCOUNT_EXPENSE_CUSTOMER_BK\n,P.ACCOUNT_EXPENSE_TAX_CODE_ID AS K_ACCOUNT_EXPENSE_TAX_CODE_BK\n,P.ITEM_EXPENSE_CLASS_ID AS K_ITEM_EXPENSE_CLASS_BK\n,P.ITEM_EXPENSE_CUSTOMER_ID AS K_ITEM_EXPENSE_CUSTOMER_BK\n,P.ITEM_EXPENSE_ITEM_ID AS K_ITEM_EXPENSE_ITEM_BK\n,P.ITEM_EXPENSE_TAX_CODE_ID AS K_ITEM_EXPENSE_TAX_CODE_BK\n,I.K_EXPENSE_ACCOUNT_DLHK AS K_ITEM_EXPENSE_ACCOUNT_BK\n--ATTRIBUTES\n,P.ACCOUNT_EXPENSE_BILLABLE_STATUS AS A_ACCOUNT_EXPENSE_BILLABLE_STATUS\n,P.DESCRIPTION AS A_DESCRIPTION\n,P.INDEX AS A_INDEX\n,P.ITEM_EXPENSE_BILLABLE_STATUS AS A_ITEM_EXPENSE_BILLABLE_STATUS\n--METRICS\n,P.ACCOUNT_EXPENSE_TAX_AMOUNT::DECIMAL(15,2) AS M_ACCOUNT_EXPENSE_TAX_AMOUNT\n,P.AMOUNT::DECIMAL(15,2) AS M_AMOUNT\n,P.ITEM_EXPENSE_QUANTITY::DECIMAL(15,2) AS M_ITEM_EXPENSE_QUANTITY\n,P.ITEM_EXPENSE_UNIT_PRICE::DECIMAL(15,2) AS M_ITEM_EXPENSE_UNIT_PRICE\n\n --METADATA\n,CURRENT_TIMESTAMP as MD_LOAD_DTS\n,'ac401bff-43bb-4502-a9f4-e7bb93cec807' AS MD_INTGR_ID\nFROM\nsource as P\nLEFT JOIN items I on I.K_ITEM_BK = P.ITEM_EXPENSE_ITEM_ID\nLEFT JOIN accounts AS a on a.K_ACCOUNT_BK = P.ACCOUNT_EXPENSE_ACCOUNT_ID\nLEFT JOIN customers AS cus on cus.K_CUSTOMER_BK = P.ITEM_EXPENSE_CUSTOMER_ID\nLEFT JOIN customers AS cus_account on cus_account.K_CUSTOMER_BK = P.ACCOUNT_EXPENSE_CUSTOMER_ID\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_PURCHASE_LINE_STG"}, "model.dlh_quickbooks.V_EMPLOYEES_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    {{source(var('source_schema'),'EMPLOYEE')}}\n),\nrename AS \n(   \nSELECT \n    --MD5\n    MD5( TRIM(COALESCE(ID, '00000000000000000000000000000000')) ) AS K_EMPLOYEE_DLHK\n    --BUSINESS KEYS\n    ,ID AS K_EMPLOYEE_BK    \n    ,ADDRESS_ID AS K_ADDRESS_BK\n    --ATTRIBUTES\n    ,{{full_name('GIVEN_NAME','MIDDLE_NAME', 'FAMILY_NAME')}} AS A_FULL_NAME\n    ,GIVEN_NAME AS A_GIVEN_NAME\n    ,MIDDLE_NAME AS A_MIDDLE_NAME\n    ,FAMILY_NAME AS A_FAMILY_NAME\n    ,DISPLAY_NAME AS A_DISPLAY_NAME\n    ,EMPLOYEE_NUMBER AS A_EMPLOYEE_NUMBER\n    ,ACTIVE AS A_ACTIVE      \n    ,PRINT_ON_CHECK_NAME AS A_PRINT_ON_CHECK_NAME\n    ,EMAIL AS A_EMAIL    \n    ,PHONE_NUMBER AS A_PHONE_NUMBER    \n    ,MOBILE_PHONE AS A_MOBILE_NUMBER\n    ,RELEASED_DATE::DATE AS A_RELEASED_DATE\n    ,HIRED_DATE::DATE AS A_HIRED_DATE\n    ,BIRTH_DATE::DATE AS A_BIRTH_DATE\n    ,SOCIAL_SECURITY_NUMBER AS A_SOCIAL_SECURITY_NUMBER    \n    ,SYNC_TOKEN AS A_SYNC_TOKEN\n    --TIMESTAMP\n    ,CREATED_AT AS A_CREATED_AT_DTS\n    ,UPDATED_AT AS A_UPDATED_AT_DTS        \n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\n  FROM\n      source    \n)\n\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dlh_quickbooks.full_name"], "nodes": ["source.dlh_quickbooks.DEMO_QUICKBOOKS.EMPLOYEE"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "staging", "EMPLOYEE", "V_EMPLOYEES_STG"], "unique_id": "model.dlh_quickbooks.V_EMPLOYEES_STG", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "staging/EMPLOYEE/V_EMPLOYEES_STG.sql", "original_file_path": "models/staging/EMPLOYEE/V_EMPLOYEES_STG.sql", "name": "V_EMPLOYEES_STG", "alias": "V_EMPLOYEES_STG", "checksum": {"name": "sha256", "checksum": "81a4ac27e449ea19b0f3b052a85481e405f4145945abb65a498e34e55ec663e0"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_QUICKBOOKS", "EMPLOYEE"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/staging/EMPLOYEE/V_EMPLOYEES_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "view", "schema": "QUICKBOOKS", "tags": ["staging", "daily"]}, "created_at": 1648040067, "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"EMPLOYEE\"\n),\nrename AS \n(   \nSELECT \n    --MD5\n    MD5( TRIM(COALESCE(ID, '00000000000000000000000000000000')) ) AS K_EMPLOYEE_DLHK\n    --BUSINESS KEYS\n    ,ID AS K_EMPLOYEE_BK    \n    ,ADDRESS_ID AS K_ADDRESS_BK\n    --ATTRIBUTES\n    ,\n    (COALESCE(GIVEN_NAME,'') || ' ' || COALESCE(MIDDLE_NAME || ' ','') || COALESCE(FAMILY_NAME,''))\n AS A_FULL_NAME\n    ,GIVEN_NAME AS A_GIVEN_NAME\n    ,MIDDLE_NAME AS A_MIDDLE_NAME\n    ,FAMILY_NAME AS A_FAMILY_NAME\n    ,DISPLAY_NAME AS A_DISPLAY_NAME\n    ,EMPLOYEE_NUMBER AS A_EMPLOYEE_NUMBER\n    ,ACTIVE AS A_ACTIVE      \n    ,PRINT_ON_CHECK_NAME AS A_PRINT_ON_CHECK_NAME\n    ,EMAIL AS A_EMAIL    \n    ,PHONE_NUMBER AS A_PHONE_NUMBER    \n    ,MOBILE_PHONE AS A_MOBILE_NUMBER\n    ,RELEASED_DATE::DATE AS A_RELEASED_DATE\n    ,HIRED_DATE::DATE AS A_HIRED_DATE\n    ,BIRTH_DATE::DATE AS A_BIRTH_DATE\n    ,SOCIAL_SECURITY_NUMBER AS A_SOCIAL_SECURITY_NUMBER    \n    ,SYNC_TOKEN AS A_SYNC_TOKEN\n    --TIMESTAMP\n    ,CREATED_AT AS A_CREATED_AT_DTS\n    ,UPDATED_AT AS A_UPDATED_AT_DTS        \n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'ac401bff-43bb-4502-a9f4-e7bb93cec807' AS MD_INTGR_ID\n  FROM\n      source    \n)\n\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_EMPLOYEES_STG"}, "model.dlh_quickbooks.V_CURRENCY_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\nwith rename as (\n\nSELECT\n    'USD' as K_CURRENCY_BK\n    , MD5('USD') AS K_CURRENCY_DLHK\n    , 'USD' AS K_CURRENCY_CODE\n    , 'USD' AS A_CURRENCY_NAME\n    , 'United States Dollars' as A_CURRENCY_NAME_FULL\n    ,'' AS MD_HASH_COL\n    , '{{invocation_id}}' AS MD_INTGR_ID\n\nUNION\n\nSELECT\n    'EUR' as K_CURRENCY_BK\n    , MD5('EUR') AS K_CURRENCY_DLHK\n    , 'EUR' AS K_CURRENCY_CODE\n    , 'EUR' AS A_CURRENCY_NAME\n    , 'Euros' as A_CURRENCY_NAME_FULL\n    ,'' AS MD_HASH_COL\n    , '{{invocation_id}}' AS MD_INTGR_ID\n\n)\n\nselect * from rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "staging", "CURRENCY", "V_CURRENCY_STG"], "unique_id": "model.dlh_quickbooks.V_CURRENCY_STG", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "staging/CURRENCY/V_CURRENCY_STG.sql", "original_file_path": "models/staging/CURRENCY/V_CURRENCY_STG.sql", "name": "V_CURRENCY_STG", "alias": "V_CURRENCY_STG", "checksum": {"name": "sha256", "checksum": "6e0071909389b21f0202d3082642b5a22103922fabab8669d632f11991d6325a"}, "tags": ["staging", "daily"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/staging/CURRENCY/V_CURRENCY_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "view", "schema": "QUICKBOOKS", "tags": ["staging", "daily"]}, "created_at": 1648040067, "compiled_sql": "\n\nwith rename as (\n\nSELECT\n    'USD' as K_CURRENCY_BK\n    , MD5('USD') AS K_CURRENCY_DLHK\n    , 'USD' AS K_CURRENCY_CODE\n    , 'USD' AS A_CURRENCY_NAME\n    , 'United States Dollars' as A_CURRENCY_NAME_FULL\n    ,'' AS MD_HASH_COL\n    , 'ac401bff-43bb-4502-a9f4-e7bb93cec807' AS MD_INTGR_ID\n\nUNION\n\nSELECT\n    'EUR' as K_CURRENCY_BK\n    , MD5('EUR') AS K_CURRENCY_DLHK\n    , 'EUR' AS K_CURRENCY_CODE\n    , 'EUR' AS A_CURRENCY_NAME\n    , 'Euros' as A_CURRENCY_NAME_FULL\n    ,'' AS MD_HASH_COL\n    , 'ac401bff-43bb-4502-a9f4-e7bb93cec807' AS MD_INTGR_ID\n\n)\n\nselect * from rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_CURRENCY_STG"}, "model.dlh_quickbooks.V_VENDORS_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema=var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    {{source(var('source_schema'),'VENDOR')}}\n),\nsource_term AS (\n  SELECT \n  * \n  FROM  \t\n    {{ref('W_QKB_TERM_D')}}\n),\nrename AS \n(   \nSELECT \n    --MD5\n    MD5( TRIM(COALESCE(A.ID,'00000000000000000000000000000000')) ) AS K_VENDOR_DLHK\n    ,B.K_TERM_DLHK\n    --BUSINESS KEYS\n    ,A.ID AS K_VENDOR_BK\n    ,A.CURRENCY_ID AS K_CURRENCY_BK\n    ,A.BILLING_ADDRESS_ID AS K_BILLING_ADDRESS_BK\n    ,B.K_TERM_BK\n     --ATTRIBUTES    \n    --ATTRIBUTES\n    ,{{full_name('GIVEN_NAME','MIDDLE_NAME', 'FAMILY_NAME')}} AS A_FULL_NAME\n    ,A.GIVEN_NAME AS A_GIVEN_NAME\n    ,A.MIDDLE_NAME AS A_MIDDLE_NAME\n    ,A.FAMILY_NAME AS A_FAMILY_NAME\n    ,A.DISPLAY_NAME AS A_DISPLAY_NAME\n    ,A.TAX_IDENTIFIER AS A_TAX_IDENTIFIER\n    ,A.COMPANY_NAME AS A_COMPANY_NAME\n    ,A.SUFFIX AS A_SUFFIX\n    ,A.TITLE AS A_TITLE    \n    ,A.PRINT_ON_CHECK_NAME AS A_PRINT_ON_CHECK_NAME\n    ,A.EMAIL AS A_EMAIL\n    ,A.WEB_URL AS A_WEB_URL    \n    ,A.ALTERNATE_PHONE AS A_ALTERNATE_PHONE_NUMBER    \n    ,A.PRIMARY_PHONE AS A_PRIMARY_PHONE\n    ,A.MOBILE_PHONE AS A_MOBILE_NUMBER\n    ,A.FAX_NUMBER AS A_FAX_NUMBER\n    ,A.ACCOUNT_NUMBER AS A_ACCOUND_NUMBER\n    ,A.SYNC_TOKEN AS A_SYNC_TOKEN\n    ,A.OTHER_CONTACTS AS A_OTHER_CONTACTS\n    ,B.A_NAME AS A_TERM_NAME\n    ,B.A_TYPE AS A_TERM_TYPE\n    ,B.A_DUE_DAYS AS A_TERM_DUE_DAYS\n    --BOOLEAN\n    ,A.VENDOR_1099:BOOLEAN AS B_VENDOR_1099\n    ,A.ACTIVE:BOOLEAN AS B_ACTIVE\n    --TIMESTAMP\n    ,A.CREATED_AT AS A_CREATED_AT_DTS\n    ,A.UPDATED_AT AS A_UPDATED_AT_DTS    \n    --METRICS    \n    ,A.BALANCE::decimal(15,2) AS M_BALANCE    \n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\n  FROM\n    source  A\n    LEFT JOIN source_term B on B.K_TERM_BK = A.TERM_ID\n)\n\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dlh_quickbooks.full_name"], "nodes": ["source.dlh_quickbooks.DEMO_QUICKBOOKS.VENDOR", "model.dlh_quickbooks.W_TERM_D"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "staging", "VENDOR", "V_VENDORS_STG"], "unique_id": "model.dlh_quickbooks.V_VENDORS_STG", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "staging/VENDOR/V_VENDORS_STG.sql", "original_file_path": "models/staging/VENDOR/V_VENDORS_STG.sql", "name": "V_VENDORS_STG", "alias": "V_VENDORS_STG", "checksum": {"name": "sha256", "checksum": "77621faa42ae2c6694e344efb3cfce88fa7cc62167a97fcecdb3deb257445129"}, "tags": ["staging", "daily"], "refs": [["W_TERM_D"]], "sources": [["DEMO_QUICKBOOKS", "VENDOR"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/staging/VENDOR/V_VENDORS_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "view", "schema": "QUICKBOOKS", "tags": ["staging", "daily"]}, "created_at": 1648040067, "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"VENDOR\"\n),\nsource_term AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_TERM_D\n),\nrename AS \n(   \nSELECT \n    --MD5\n    MD5( TRIM(COALESCE(A.ID,'00000000000000000000000000000000')) ) AS K_VENDOR_DLHK\n    ,B.K_TERM_DLHK\n    --BUSINESS KEYS\n    ,A.ID AS K_VENDOR_BK\n    ,A.CURRENCY_ID AS K_CURRENCY_BK\n    ,A.BILLING_ADDRESS_ID AS K_BILLING_ADDRESS_BK\n    ,B.K_TERM_BK\n     --ATTRIBUTES    \n    --ATTRIBUTES\n    ,\n    (COALESCE(GIVEN_NAME,'') || ' ' || COALESCE(MIDDLE_NAME || ' ','') || COALESCE(FAMILY_NAME,''))\n AS A_FULL_NAME\n    ,A.GIVEN_NAME AS A_GIVEN_NAME\n    ,A.MIDDLE_NAME AS A_MIDDLE_NAME\n    ,A.FAMILY_NAME AS A_FAMILY_NAME\n    ,A.DISPLAY_NAME AS A_DISPLAY_NAME\n    ,A.TAX_IDENTIFIER AS A_TAX_IDENTIFIER\n    ,A.COMPANY_NAME AS A_COMPANY_NAME\n    ,A.SUFFIX AS A_SUFFIX\n    ,A.TITLE AS A_TITLE    \n    ,A.PRINT_ON_CHECK_NAME AS A_PRINT_ON_CHECK_NAME\n    ,A.EMAIL AS A_EMAIL\n    ,A.WEB_URL AS A_WEB_URL    \n    ,A.ALTERNATE_PHONE AS A_ALTERNATE_PHONE_NUMBER    \n    ,A.PRIMARY_PHONE AS A_PRIMARY_PHONE\n    ,A.MOBILE_PHONE AS A_MOBILE_NUMBER\n    ,A.FAX_NUMBER AS A_FAX_NUMBER\n    ,A.ACCOUNT_NUMBER AS A_ACCOUND_NUMBER\n    ,A.SYNC_TOKEN AS A_SYNC_TOKEN\n    ,A.OTHER_CONTACTS AS A_OTHER_CONTACTS\n    ,B.A_NAME AS A_TERM_NAME\n    ,B.A_TYPE AS A_TERM_TYPE\n    ,B.A_DUE_DAYS AS A_TERM_DUE_DAYS\n    --BOOLEAN\n    ,A.VENDOR_1099:BOOLEAN AS B_VENDOR_1099\n    ,A.ACTIVE:BOOLEAN AS B_ACTIVE\n    --TIMESTAMP\n    ,A.CREATED_AT AS A_CREATED_AT_DTS\n    ,A.UPDATED_AT AS A_UPDATED_AT_DTS    \n    --METRICS    \n    ,A.BALANCE::decimal(15,2) AS M_BALANCE    \n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'ac401bff-43bb-4502-a9f4-e7bb93cec807' AS MD_INTGR_ID\n  FROM\n    source  A\n    LEFT JOIN source_term B on B.K_TERM_BK = A.TERM_ID\n)\n\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_VENDORS_STG"}, "model.dlh_quickbooks.W_ITEMS_D": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\n\nSELECT\n  *\nFROM\n  {{ref('V_QKB_ITEMS_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_quickbooks.V_ITEMS_STG"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "master", "W_ITEMS_D"], "unique_id": "model.dlh_quickbooks.W_ITEMS_D", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "master/W_ITEMS_D.sql", "original_file_path": "models/master/W_ITEMS_D.sql", "name": "W_ITEMS_D", "alias": "W_ITEMS_D", "checksum": {"name": "sha256", "checksum": "5895c905848579f909b11721761ce98616fc74eb8bb7ed9e9fc41e591757dd96"}, "tags": ["staging", "daily"], "refs": [["V_ITEMS_STG"]], "sources": [], "description": "This is the items dimension table", "columns": {"K_ITEM_DLHK": {"name": "K_ITEM_DLHK", "description": "DataLakeHouse key of the item", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dlh_quickbooks://models/schema.yml", "compiled_path": "target/compiled/dlh_quickbooks/models/master/W_ITEMS_D.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "table", "schema": "QUICKBOOKS", "tags": ["staging", "daily"], "transient": false}, "created_at": 1648040067, "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_ITEMS_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_ITEMS_D"}, "model.dlh_quickbooks.W_ACCOUNTS_D": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\n\nSELECT\n  *\nFROM\n  {{ref('V_QKB_ACCOUNTS_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_quickbooks.V_ACCOUNTS_STG"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "master", "W_ACCOUNTS_D"], "unique_id": "model.dlh_quickbooks.W_ACCOUNTS_D", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "master/W_ACCOUNTS_D.sql", "original_file_path": "models/master/W_ACCOUNTS_D.sql", "name": "W_ACCOUNTS_D", "alias": "W_ACCOUNTS_D", "checksum": {"name": "sha256", "checksum": "9e1d0b195cd9721438f7db061611ac26ff19733e60762db974b1c13843c9526c"}, "tags": ["staging", "daily"], "refs": [["V_ACCOUNTS_STG"]], "sources": [], "description": "This is the acounts dimension table", "columns": {"K_ACCOUNT_DLHK": {"name": "K_ACCOUNT_DLHK", "description": "DataLakeHouse key of the account", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dlh_quickbooks://models/schema.yml", "compiled_path": "target/compiled/dlh_quickbooks/models/master/W_ACCOUNTS_D.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "table", "schema": "QUICKBOOKS", "tags": ["staging", "daily"], "transient": false}, "created_at": 1648040067, "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_ACCOUNTS_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_ACCOUNTS_D"}, "model.dlh_quickbooks.W_BILLS_F": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\n\nSELECT\n  *\nFROM\n  {{ref('V_QKB_BILLS_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_quickbooks.V_BILLS_STG"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "master", "W_BILLS_F"], "unique_id": "model.dlh_quickbooks.W_BILLS_F", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "master/W_BILLS_F.sql", "original_file_path": "models/master/W_BILLS_F.sql", "name": "W_BILLS_F", "alias": "W_BILLS_F", "checksum": {"name": "sha256", "checksum": "4e592a4e0c4a1a8da3916cd14ab2337768d17154d6a5b27586ea7ceb6d85e291"}, "tags": ["staging", "daily"], "refs": [["V_BILLS_STG"]], "sources": [], "description": "This is the bills fact table", "columns": {"K_BILL_LINE_DLHK": {"name": "K_BILL_LINE_DLHK", "description": "DataLakeHouse key of the bill line", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_ACCOUNT_DLHK": {"name": "K_ACCOUNT_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_BILL_PAYABLE_ACCOUNT_DLHK": {"name": "K_BILL_PAYABLE_ACCOUNT_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_SALES_TERM_DLHK": {"name": "K_SALES_TERM_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_VENDOR_DLHK": {"name": "K_VENDOR_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_BILL_CURRENCY_DLHK": {"name": "K_BILL_CURRENCY_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_ITEM_EXPENSE_DLHK": {"name": "K_ITEM_EXPENSE_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dlh_quickbooks://models/schema.yml", "compiled_path": "target/compiled/dlh_quickbooks/models/master/W_BILLS_F.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "table", "schema": "QUICKBOOKS", "tags": ["staging", "daily"], "transient": false}, "created_at": 1648040067, "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_BILLS_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_BILLS_F"}, "model.dlh_quickbooks.W_DATE_D": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\nSELECT \n\tCAST(DATE_KEY AS NUMBER(9)) AS K_DATE_INTEGER_BK\n\t,CAST(DATE_COLUMN AS DATE) AS K_DATE_BK\n\t,CAST(FULL_DATE_DESC AS VARCHAR(64)) AS A_FULL_DATE_DESC\n\t,CAST(DAY_NUM_IN_WEEK AS NUMBER(1)) AS A_DAY_NUM_IN_WEEK\n\t,CAST(DAY_NUM_IN_MONTH AS NUMBER(2)) AS A_DAY_NUM_IN_MONTH\n\t,CAST(DAY_NUM_IN_YEAR AS NUMBER(3)) AS A_DAY_NUM_IN_YEAR\n\t,CAST(DAY_NAME AS VARCHAR(10)) AS A_DAY_NAME\n\t,CAST(DAY_ABBREV AS VARCHAR(3)) AS A_DAY_ABBREV\n\t,CAST(WEEKDAY_IND AS VARCHAR(64)) AS A_WEEKDAY_IND\n\t,CAST(US_HOLIDAY_IND AS VARCHAR(64)) AS A_US_HOLIDAY_IND\n\t,CAST(COMPANY_HOLIDAY_IND AS VARCHAR(64)) AS A_COMPANY_HOLIDAY_IND\n\t,CAST(MONTH_END_IND AS VARCHAR(64)) AS A_MONTH_END_IND\n\t,CAST(WEEK_BEGIN_DATE_NKEY AS NUMBER(9)) AS A_WEEK_BEGIN_DATE_NKEY\n\t,CAST(WEEK_BEGIN_DATE AS DATE) AS A_WEEK_BEGIN_DATE\n\t,CAST(WEEK_END_DATE_NKEY AS NUMBER(9)) AS A_WEEK_END_DATE_NKEY\n\t,CAST(WEEK_END_DATE AS DATE) AS A_WEEK_END_DATE\n\t,CAST(WEEK_NUM_IN_YEAR AS NUMBER(9)) AS A_WEEK_NUM_IN_YEAR\n\t,CAST(MONTH_NAME AS VARCHAR(10)) AS A_MONTH_NAME\n\t,CAST(MONTH_ABBREV AS VARCHAR(3)) AS A_MONTH_ABBREV\n\t,CAST(MONTH_NUM_IN_YEAR AS NUMBER(2)) AS A_MONTH_NUM_IN_YEAR\n\t,CAST(YEARMONTH AS VARCHAR(10)) AS A_YEARMONTH\n\t,CAST(CURRENT_QUARTER AS NUMBER(1)) AS A_QUARTER\n\t,CAST(YEARQUARTER AS VARCHAR(10)) AS A_YEARQUARTER\n\t,CAST(CURRENT_YEAR AS NUMBER(5)) AS A_YEAR\n\t,CAST(FISCAL_WEEK_NUM AS NUMBER(2)) AS A_FISCAL_WEEK_NUM\n\t,CAST(FISCAL_MONTH_NUM AS NUMBER(2)) AS A_FISCAL_MONTH_NUM\n\t,CAST(FISCAL_YEARMONTH AS VARCHAR(10)) AS A_FISCAL_YEARMONTH\n\t,CAST(FISCAL_QUARTER AS NUMBER(1)) AS A_FISCAL_QUARTER\n\t,CAST(FISCAL_YEARQUARTER AS VARCHAR(10)) AS A_FISCAL_YEARQUARTER\n\t,CAST(FISCAL_HALFYEAR AS NUMBER(1)) AS A_FISCAL_HALFYEAR\n\t,CAST(FISCAL_YEAR AS NUMBER(5)) AS A_FISCAL_YEAR\n\t,CAST(SQL_TIMESTAMP AS TIMESTAMP_NTZ) AS A_SQL_TIMESTAMP_DTS\n\t,CAST(CURRENT_ROW_IND AS CHAR(1)) AS A_CURRENT_ROW_IND\n\t,CAST(EFFECTIVE_DATE AS DATE) AS A_EFFECTIVE_DATE\n\t,CAST(EXPIRA_DATE AS DATE) AS A_EXPIRATION_DATE\nFROM\n{{ref('V_QKB_DATE_STG')}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_quickbooks.V_DATE_STG"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "master", "W_DATE_D"], "unique_id": "model.dlh_quickbooks.W_DATE_D", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "master/W_DATE_D.sql", "original_file_path": "models/master/W_DATE_D.sql", "name": "W_DATE_D", "alias": "W_DATE_D", "checksum": {"name": "sha256", "checksum": "da687474dacc1eadbdac9816282f5700eaf79601279abb1037e58e5394cb1af7"}, "tags": ["staging", "daily"], "refs": [["V_DATE_STG"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/master/W_DATE_D.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "table", "schema": "QUICKBOOKS", "tags": ["staging", "daily"], "transient": false}, "created_at": 1648040067, "compiled_sql": "\n\nSELECT \n\tCAST(DATE_KEY AS NUMBER(9)) AS K_DATE_INTEGER_BK\n\t,CAST(DATE_COLUMN AS DATE) AS K_DATE_BK\n\t,CAST(FULL_DATE_DESC AS VARCHAR(64)) AS A_FULL_DATE_DESC\n\t,CAST(DAY_NUM_IN_WEEK AS NUMBER(1)) AS A_DAY_NUM_IN_WEEK\n\t,CAST(DAY_NUM_IN_MONTH AS NUMBER(2)) AS A_DAY_NUM_IN_MONTH\n\t,CAST(DAY_NUM_IN_YEAR AS NUMBER(3)) AS A_DAY_NUM_IN_YEAR\n\t,CAST(DAY_NAME AS VARCHAR(10)) AS A_DAY_NAME\n\t,CAST(DAY_ABBREV AS VARCHAR(3)) AS A_DAY_ABBREV\n\t,CAST(WEEKDAY_IND AS VARCHAR(64)) AS A_WEEKDAY_IND\n\t,CAST(US_HOLIDAY_IND AS VARCHAR(64)) AS A_US_HOLIDAY_IND\n\t,CAST(COMPANY_HOLIDAY_IND AS VARCHAR(64)) AS A_COMPANY_HOLIDAY_IND\n\t,CAST(MONTH_END_IND AS VARCHAR(64)) AS A_MONTH_END_IND\n\t,CAST(WEEK_BEGIN_DATE_NKEY AS NUMBER(9)) AS A_WEEK_BEGIN_DATE_NKEY\n\t,CAST(WEEK_BEGIN_DATE AS DATE) AS A_WEEK_BEGIN_DATE\n\t,CAST(WEEK_END_DATE_NKEY AS NUMBER(9)) AS A_WEEK_END_DATE_NKEY\n\t,CAST(WEEK_END_DATE AS DATE) AS A_WEEK_END_DATE\n\t,CAST(WEEK_NUM_IN_YEAR AS NUMBER(9)) AS A_WEEK_NUM_IN_YEAR\n\t,CAST(MONTH_NAME AS VARCHAR(10)) AS A_MONTH_NAME\n\t,CAST(MONTH_ABBREV AS VARCHAR(3)) AS A_MONTH_ABBREV\n\t,CAST(MONTH_NUM_IN_YEAR AS NUMBER(2)) AS A_MONTH_NUM_IN_YEAR\n\t,CAST(YEARMONTH AS VARCHAR(10)) AS A_YEARMONTH\n\t,CAST(CURRENT_QUARTER AS NUMBER(1)) AS A_QUARTER\n\t,CAST(YEARQUARTER AS VARCHAR(10)) AS A_YEARQUARTER\n\t,CAST(CURRENT_YEAR AS NUMBER(5)) AS A_YEAR\n\t,CAST(FISCAL_WEEK_NUM AS NUMBER(2)) AS A_FISCAL_WEEK_NUM\n\t,CAST(FISCAL_MONTH_NUM AS NUMBER(2)) AS A_FISCAL_MONTH_NUM\n\t,CAST(FISCAL_YEARMONTH AS VARCHAR(10)) AS A_FISCAL_YEARMONTH\n\t,CAST(FISCAL_QUARTER AS NUMBER(1)) AS A_FISCAL_QUARTER\n\t,CAST(FISCAL_YEARQUARTER AS VARCHAR(10)) AS A_FISCAL_YEARQUARTER\n\t,CAST(FISCAL_HALFYEAR AS NUMBER(1)) AS A_FISCAL_HALFYEAR\n\t,CAST(FISCAL_YEAR AS NUMBER(5)) AS A_FISCAL_YEAR\n\t,CAST(SQL_TIMESTAMP AS TIMESTAMP_NTZ) AS A_SQL_TIMESTAMP_DTS\n\t,CAST(CURRENT_ROW_IND AS CHAR(1)) AS A_CURRENT_ROW_IND\n\t,CAST(EFFECTIVE_DATE AS DATE) AS A_EFFECTIVE_DATE\n\t,CAST(EXPIRA_DATE AS DATE) AS A_EXPIRATION_DATE\nFROM\nDEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_DATE_STG", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_DATE_D"}, "model.dlh_quickbooks.W_VENDORS_D": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\n\nSELECT\n  *\nFROM\n  {{ref('V_QKB_VENDORS_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_quickbooks.V_VENDORS_STG"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "master", "W_VENDORS_D"], "unique_id": "model.dlh_quickbooks.W_VENDORS_D", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "master/W_VENDORS_D.sql", "original_file_path": "models/master/W_VENDORS_D.sql", "name": "W_VENDORS_D", "alias": "W_VENDORS_D", "checksum": {"name": "sha256", "checksum": "f68c805a4b0eb67756e8abdb6be1de23807186ae00349b8a0838ffce4a00c4f1"}, "tags": ["staging", "daily"], "refs": [["V_VENDORS_STG"]], "sources": [], "description": "This is the vendors dimension table", "columns": {"K_VENDOR_DLHK": {"name": "K_VENDOR_DLHK", "description": "DataLakeHouse key of the vendor", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dlh_quickbooks://models/schema.yml", "compiled_path": "target/compiled/dlh_quickbooks/models/master/W_VENDORS_D.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "table", "schema": "QUICKBOOKS", "tags": ["staging", "daily"], "transient": false}, "created_at": 1648040067, "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_VENDORS_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_VENDORS_D"}, "model.dlh_quickbooks.W_EMPLOYEES_D": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\n\nSELECT\n  *\nFROM\n  {{ref('V_QKB_EMPLOYEES_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_quickbooks.V_EMPLOYEES_STG"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "master", "W_EMPLOYEES_D"], "unique_id": "model.dlh_quickbooks.W_EMPLOYEES_D", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "master/W_EMPLOYEES_D.sql", "original_file_path": "models/master/W_EMPLOYEES_D.sql", "name": "W_EMPLOYEES_D", "alias": "W_EMPLOYEES_D", "checksum": {"name": "sha256", "checksum": "a7dcad00f4ca3edc194d70ad7bdf66df99d03cf458e26534130c3187b48bc47c"}, "tags": ["staging", "daily"], "refs": [["V_EMPLOYEES_STG"]], "sources": [], "description": "This is the employees dimension table", "columns": {"K_EMPLOYEE_DLHK": {"name": "K_EMPLOYEE_DLHK", "description": "DataLakeHouse key of the employee", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dlh_quickbooks://models/schema.yml", "compiled_path": "target/compiled/dlh_quickbooks/models/master/W_EMPLOYEES_D.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "table", "schema": "QUICKBOOKS", "tags": ["staging", "daily"], "transient": false}, "created_at": 1648040067, "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_EMPLOYEES_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_EMPLOYEES_D"}, "model.dlh_quickbooks.W_INVOICES_F": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\n\nSELECT\n  *\nFROM\n  {{ref('V_QKB_INVOICES_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_quickbooks.V_INVOICES_STG"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "master", "W_INVOICES_F"], "unique_id": "model.dlh_quickbooks.W_INVOICES_F", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "master/W_INVOICES_F.sql", "original_file_path": "models/master/W_INVOICES_F.sql", "name": "W_INVOICES_F", "alias": "W_INVOICES_F", "checksum": {"name": "sha256", "checksum": "1952b10a9bc6c9f334387c41d2ba2c073129bd93b0502876c200143e396fa1ee"}, "tags": ["staging", "daily"], "refs": [["V_INVOICES_STG"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/master/W_INVOICES_F.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "table", "schema": "QUICKBOOKS", "tags": ["staging", "daily"], "transient": false}, "created_at": 1648040067, "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_INVOICES_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_INVOICES_F"}, "model.dlh_quickbooks.W_PAYMENTS_F": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\n\nSELECT\n  *\nFROM\n  {{ref('V_QKB_PAYMENTS_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_quickbooks.V_PAYMENTS_STG"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "master", "W_PAYMENTS_F"], "unique_id": "model.dlh_quickbooks.W_PAYMENTS_F", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "master/W_PAYMENTS_F.sql", "original_file_path": "models/master/W_PAYMENTS_F.sql", "name": "W_PAYMENTS_F", "alias": "W_PAYMENTS_F", "checksum": {"name": "sha256", "checksum": "76d62f4e04284950fce1e5b8caf91a395990b9d4abd2e030929bbdf4fc6d5ef0"}, "tags": ["staging", "daily"], "refs": [["V_PAYMENTS_STG"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/master/W_PAYMENTS_F.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "table", "schema": "QUICKBOOKS", "tags": ["staging", "daily"], "transient": false}, "created_at": 1648040067, "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_PAYMENTS_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_PAYMENTS_F"}, "model.dlh_quickbooks.W_TERM_D": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\n\nSELECT\n  *\nFROM\n  {{ref('V_QKB_TERM_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_quickbooks.V_TERM_STG"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "master", "W_TERM_D"], "unique_id": "model.dlh_quickbooks.W_TERM_D", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "master/W_TERM_D.sql", "original_file_path": "models/master/W_TERM_D.sql", "name": "W_TERM_D", "alias": "W_TERM_D", "checksum": {"name": "sha256", "checksum": "c3a1797a9486e2dab38308b0a53e0249d89c7b86ceeac75b5e292905a2ceef53"}, "tags": ["staging", "daily"], "refs": [["V_TERM_STG"]], "sources": [], "description": "This is the terms dimension table", "columns": {"K_TERM_DLHK": {"name": "K_TERM_DLHK", "description": "DataLakeHouse key of the term", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dlh_quickbooks://models/schema.yml", "compiled_path": "target/compiled/dlh_quickbooks/models/master/W_TERM_D.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "table", "schema": "QUICKBOOKS", "tags": ["staging", "daily"], "transient": false}, "created_at": 1648040067, "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_TERM_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_TERM_D"}, "model.dlh_quickbooks.W_CUSTOMERS_D": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\n\nSELECT\n  *\nFROM\n  {{ref('V_QKB_CUSTOMERS_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_quickbooks.V_CUSTOMERS_STG"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "master", "W_CUSTOMERS_D"], "unique_id": "model.dlh_quickbooks.W_CUSTOMERS_D", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "master/W_CUSTOMERS_D.sql", "original_file_path": "models/master/W_CUSTOMERS_D.sql", "name": "W_CUSTOMERS_D", "alias": "W_CUSTOMERS_D", "checksum": {"name": "sha256", "checksum": "0ae4e0aa47fbee1363fef6a9eb6d246531c94ef640dfeb9be27ad436de893733"}, "tags": ["staging", "daily"], "refs": [["V_CUSTOMERS_STG"]], "sources": [], "description": "This is the customers dimension table", "columns": {"K_CUSTOMER_DLHK": {"name": "K_CUSTOMER_DLHK", "description": "DataLakeHouse key of the customer", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dlh_quickbooks://models/schema.yml", "compiled_path": "target/compiled/dlh_quickbooks/models/master/W_CUSTOMERS_D.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "table", "schema": "QUICKBOOKS", "tags": ["staging", "daily"], "transient": false}, "created_at": 1648040067, "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_CUSTOMERS_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_CUSTOMERS_D"}, "model.dlh_quickbooks.W_PURCHASES_F": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\n\nSELECT\n  *\nFROM\n  {{ref('V_QKB_PURCHASES_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_quickbooks.V_PURCHASES_STG"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "master", "W_PURCHASES_F"], "unique_id": "model.dlh_quickbooks.W_PURCHASES_F", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "master/W_PURCHASES_F.sql", "original_file_path": "models/master/W_PURCHASES_F.sql", "name": "W_PURCHASES_F", "alias": "W_PURCHASES_F", "checksum": {"name": "sha256", "checksum": "963561b38930ccf62ed316aba11a2a8006edaeb041566ab29a70577e27d8a650"}, "tags": ["staging", "daily"], "refs": [["V_PURCHASES_STG"]], "sources": [], "description": "This is the purchases fact table", "columns": {"K_PURCHASE_LINE_DLHK": {"name": "K_PURCHASE_LINE_DLHK", "description": "DataLakeHouse key of the purchase line", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_ACCOUNT_DLHK": {"name": "K_ACCOUNT_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_CUSTOMER_DLHK": {"name": "K_CUSTOMER_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_VENDOR_DLHK": {"name": "K_VENDOR_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_PURCHASE_CURRENCY_DLHK": {"name": "K_PURCHASE_CURRENCY_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_ITEM_EXPENSE_DLHK": {"name": "K_ITEM_EXPENSE_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dlh_quickbooks://models/schema.yml", "compiled_path": "target/compiled/dlh_quickbooks/models/master/W_PURCHASES_F.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "table", "schema": "QUICKBOOKS", "tags": ["staging", "daily"], "transient": false}, "created_at": 1648040067, "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_PURCHASES_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_PURCHASES_F"}, "model.dlh_quickbooks.W_CLASS_D": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\n\nSELECT\n  *\nFROM\n  {{ref('V_QKB_CLASS_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_quickbooks.V_CLASS_STG"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "master", "W_CLASS_D"], "unique_id": "model.dlh_quickbooks.W_CLASS_D", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "master/W_CLASS_D.sql", "original_file_path": "models/master/W_CLASS_D.sql", "name": "W_CLASS_D", "alias": "W_CLASS_D", "checksum": {"name": "sha256", "checksum": "6dfa116b5209faf8f5f58b477ba27b7bd87a41babd4c7bbef05eaac7596964e9"}, "tags": ["staging", "daily"], "refs": [["V_CLASS_STG"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/master/W_CLASS_D.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "table", "schema": "QUICKBOOKS", "tags": ["staging", "daily"], "transient": false}, "created_at": 1648040067, "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_CLASS_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_CLASS_D"}, "model.dlh_quickbooks.W_CURRENCY_D": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema=var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\n\nSELECT\n  *\nFROM\n  {{ref('V_QKB_CURRENCY_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_quickbooks.V_CURRENCY_STG"]}, "config": {"enabled": true, "alias": null, "schema": "QUICKBOOKS", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_quickbooks": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_QUICKBOOKS", "fqn": ["dlh_quickbooks", "master", "W_CURRENCY_D"], "unique_id": "model.dlh_quickbooks.W_CURRENCY_D", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "master/W_CURRENCY_D.sql", "original_file_path": "models/master/W_CURRENCY_D.sql", "name": "W_CURRENCY_D", "alias": "W_CURRENCY_D", "checksum": {"name": "sha256", "checksum": "285dee05a4f8fce82f4a8590b424c7abe9a5015a28b0217f034b3a627b4de657"}, "tags": ["staging", "daily"], "refs": [["V_CURRENCY_STG"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/master/W_CURRENCY_D.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_quickbooks": null, "materialized": "table", "schema": "QUICKBOOKS", "tags": ["staging", "daily"], "transient": false}, "created_at": 1648040067, "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_QUICKBOOKS.V_CURRENCY_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_CURRENCY_D"}, "test.dlh_quickbooks.unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK.cba900fa78": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_ACCOUNT_DLHK", "model": "{{ get_where_subquery(ref('W_ACCOUNTS_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_quickbooks.W_ACCOUNTS_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_quickbooks", "schema_test", "unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK"], "unique_id": "test.dlh_quickbooks.unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK.cba900fa78", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "schema_test/unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK", "alias": "unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ACCOUNTS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/schema.yml/schema_test/unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1648040067, "compiled_sql": "\n    \n    \n\nselect\n    K_ACCOUNT_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_ACCOUNTS_D\nwhere K_ACCOUNT_DLHK is not null\ngroup by K_ACCOUNT_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_ACCOUNT_DLHK"}, "test.dlh_quickbooks.not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK.918e0fe908": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_ACCOUNT_DLHK", "model": "{{ get_where_subquery(ref('W_ACCOUNTS_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_quickbooks.W_ACCOUNTS_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_quickbooks", "schema_test", "not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK"], "unique_id": "test.dlh_quickbooks.not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK.918e0fe908", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "schema_test/not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK", "alias": "not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ACCOUNTS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/schema.yml/schema_test/not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1648040067, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_ACCOUNTS_D\nwhere K_ACCOUNT_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_ACCOUNT_DLHK"}, "test.dlh_quickbooks.unique_W_CUSTOMERS_D_K_CUSTOMER_DLHK.190cadd98a": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_CUSTOMER_DLHK", "model": "{{ get_where_subquery(ref('W_CUSTOMERS_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_quickbooks.W_CUSTOMERS_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_quickbooks", "schema_test", "unique_W_CUSTOMERS_D_K_CUSTOMER_DLHK"], "unique_id": "test.dlh_quickbooks.unique_W_CUSTOMERS_D_K_CUSTOMER_DLHK.190cadd98a", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "schema_test/unique_W_CUSTOMERS_D_K_CUSTOMER_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_CUSTOMERS_D_K_CUSTOMER_DLHK", "alias": "unique_W_CUSTOMERS_D_K_CUSTOMER_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_CUSTOMERS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/schema.yml/schema_test/unique_W_CUSTOMERS_D_K_CUSTOMER_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1648040067, "compiled_sql": "\n    \n    \n\nselect\n    K_CUSTOMER_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_CUSTOMERS_D\nwhere K_CUSTOMER_DLHK is not null\ngroup by K_CUSTOMER_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CUSTOMER_DLHK"}, "test.dlh_quickbooks.not_null_W_CUSTOMERS_D_K_CUSTOMER_DLHK.d428ec020e": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_CUSTOMER_DLHK", "model": "{{ get_where_subquery(ref('W_CUSTOMERS_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_quickbooks.W_CUSTOMERS_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_quickbooks", "schema_test", "not_null_W_CUSTOMERS_D_K_CUSTOMER_DLHK"], "unique_id": "test.dlh_quickbooks.not_null_W_CUSTOMERS_D_K_CUSTOMER_DLHK.d428ec020e", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "schema_test/not_null_W_CUSTOMERS_D_K_CUSTOMER_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_CUSTOMERS_D_K_CUSTOMER_DLHK", "alias": "not_null_W_CUSTOMERS_D_K_CUSTOMER_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_CUSTOMERS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/schema.yml/schema_test/not_null_W_CUSTOMERS_D_K_CUSTOMER_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1648040067, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_CUSTOMERS_D\nwhere K_CUSTOMER_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CUSTOMER_DLHK"}, "test.dlh_quickbooks.unique_W_EMPLOYEES_D_K_EMPLOYEE_DLHK.83d2f33139": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_EMPLOYEE_DLHK", "model": "{{ get_where_subquery(ref('W_EMPLOYEES_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_quickbooks.W_EMPLOYEES_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_quickbooks", "schema_test", "unique_W_EMPLOYEES_D_K_EMPLOYEE_DLHK"], "unique_id": "test.dlh_quickbooks.unique_W_EMPLOYEES_D_K_EMPLOYEE_DLHK.83d2f33139", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "schema_test/unique_W_EMPLOYEES_D_K_EMPLOYEE_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_EMPLOYEES_D_K_EMPLOYEE_DLHK", "alias": "unique_W_EMPLOYEES_D_K_EMPLOYEE_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_EMPLOYEES_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/schema.yml/schema_test/unique_W_EMPLOYEES_D_K_EMPLOYEE_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1648040067, "compiled_sql": "\n    \n    \n\nselect\n    K_EMPLOYEE_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_EMPLOYEES_D\nwhere K_EMPLOYEE_DLHK is not null\ngroup by K_EMPLOYEE_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_EMPLOYEE_DLHK"}, "test.dlh_quickbooks.not_null_W_EMPLOYEES_D_K_EMPLOYEE_DLHK.dc599328ef": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_EMPLOYEE_DLHK", "model": "{{ get_where_subquery(ref('W_EMPLOYEES_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_quickbooks.W_EMPLOYEES_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_quickbooks", "schema_test", "not_null_W_EMPLOYEES_D_K_EMPLOYEE_DLHK"], "unique_id": "test.dlh_quickbooks.not_null_W_EMPLOYEES_D_K_EMPLOYEE_DLHK.dc599328ef", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "schema_test/not_null_W_EMPLOYEES_D_K_EMPLOYEE_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_EMPLOYEES_D_K_EMPLOYEE_DLHK", "alias": "not_null_W_EMPLOYEES_D_K_EMPLOYEE_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_EMPLOYEES_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/schema.yml/schema_test/not_null_W_EMPLOYEES_D_K_EMPLOYEE_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1648040067, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_EMPLOYEES_D\nwhere K_EMPLOYEE_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_EMPLOYEE_DLHK"}, "test.dlh_quickbooks.unique_W_ITEMS_D_K_ITEM_DLHK.0d69e5b7fa": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_ITEM_DLHK", "model": "{{ get_where_subquery(ref('W_ITEMS_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_quickbooks.W_ITEMS_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_quickbooks", "schema_test", "unique_W_ITEMS_D_K_ITEM_DLHK"], "unique_id": "test.dlh_quickbooks.unique_W_ITEMS_D_K_ITEM_DLHK.0d69e5b7fa", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "schema_test/unique_W_ITEMS_D_K_ITEM_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_ITEMS_D_K_ITEM_DLHK", "alias": "unique_W_ITEMS_D_K_ITEM_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ITEMS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/schema.yml/schema_test/unique_W_ITEMS_D_K_ITEM_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1648040067, "compiled_sql": "\n    \n    \n\nselect\n    K_ITEM_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_ITEMS_D\nwhere K_ITEM_DLHK is not null\ngroup by K_ITEM_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_ITEM_DLHK"}, "test.dlh_quickbooks.not_null_W_ITEMS_D_K_ITEM_DLHK.fe14e7111c": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_ITEM_DLHK", "model": "{{ get_where_subquery(ref('W_ITEMS_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_quickbooks.W_ITEMS_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_quickbooks", "schema_test", "not_null_W_ITEMS_D_K_ITEM_DLHK"], "unique_id": "test.dlh_quickbooks.not_null_W_ITEMS_D_K_ITEM_DLHK.fe14e7111c", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "schema_test/not_null_W_ITEMS_D_K_ITEM_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_ITEMS_D_K_ITEM_DLHK", "alias": "not_null_W_ITEMS_D_K_ITEM_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ITEMS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/schema.yml/schema_test/not_null_W_ITEMS_D_K_ITEM_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1648040067, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_ITEMS_D\nwhere K_ITEM_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_ITEM_DLHK"}, "test.dlh_quickbooks.unique_W_TERM_D_K_TERM_DLHK.9a114fa514": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_TERM_DLHK", "model": "{{ get_where_subquery(ref('W_TERM_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_quickbooks.W_TERM_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_quickbooks", "schema_test", "unique_W_TERM_D_K_TERM_DLHK"], "unique_id": "test.dlh_quickbooks.unique_W_TERM_D_K_TERM_DLHK.9a114fa514", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "schema_test/unique_W_TERM_D_K_TERM_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_TERM_D_K_TERM_DLHK", "alias": "unique_W_TERM_D_K_TERM_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_TERM_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/schema.yml/schema_test/unique_W_TERM_D_K_TERM_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1648040067, "compiled_sql": "\n    \n    \n\nselect\n    K_TERM_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_TERM_D\nwhere K_TERM_DLHK is not null\ngroup by K_TERM_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_TERM_DLHK"}, "test.dlh_quickbooks.not_null_W_TERM_D_K_TERM_DLHK.90ba40ae08": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_TERM_DLHK", "model": "{{ get_where_subquery(ref('W_TERM_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_quickbooks.W_TERM_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_quickbooks", "schema_test", "not_null_W_TERM_D_K_TERM_DLHK"], "unique_id": "test.dlh_quickbooks.not_null_W_TERM_D_K_TERM_DLHK.90ba40ae08", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "schema_test/not_null_W_TERM_D_K_TERM_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_TERM_D_K_TERM_DLHK", "alias": "not_null_W_TERM_D_K_TERM_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_TERM_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/schema.yml/schema_test/not_null_W_TERM_D_K_TERM_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1648040067, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_TERM_D\nwhere K_TERM_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_TERM_DLHK"}, "test.dlh_quickbooks.unique_W_VENDORS_D_K_VENDOR_DLHK.5a807966e7": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_VENDOR_DLHK", "model": "{{ get_where_subquery(ref('W_VENDORS_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_quickbooks.W_VENDORS_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_quickbooks", "schema_test", "unique_W_VENDORS_D_K_VENDOR_DLHK"], "unique_id": "test.dlh_quickbooks.unique_W_VENDORS_D_K_VENDOR_DLHK.5a807966e7", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "schema_test/unique_W_VENDORS_D_K_VENDOR_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_VENDORS_D_K_VENDOR_DLHK", "alias": "unique_W_VENDORS_D_K_VENDOR_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_VENDORS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/schema.yml/schema_test/unique_W_VENDORS_D_K_VENDOR_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1648040067, "compiled_sql": "\n    \n    \n\nselect\n    K_VENDOR_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_VENDORS_D\nwhere K_VENDOR_DLHK is not null\ngroup by K_VENDOR_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_VENDOR_DLHK"}, "test.dlh_quickbooks.not_null_W_VENDORS_D_K_VENDOR_DLHK.accc567e7f": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_VENDOR_DLHK", "model": "{{ get_where_subquery(ref('W_VENDORS_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_quickbooks.W_VENDORS_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_quickbooks", "schema_test", "not_null_W_VENDORS_D_K_VENDOR_DLHK"], "unique_id": "test.dlh_quickbooks.not_null_W_VENDORS_D_K_VENDOR_DLHK.accc567e7f", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "schema_test/not_null_W_VENDORS_D_K_VENDOR_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_VENDORS_D_K_VENDOR_DLHK", "alias": "not_null_W_VENDORS_D_K_VENDOR_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_VENDORS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/schema.yml/schema_test/not_null_W_VENDORS_D_K_VENDOR_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1648040067, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_VENDORS_D\nwhere K_VENDOR_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_VENDOR_DLHK"}, "test.dlh_quickbooks.unique_W_BILLS_F_K_BILL_LINE_DLHK.192663321f": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_BILL_LINE_DLHK", "model": "{{ get_where_subquery(ref('W_BILLS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_quickbooks.W_BILLS_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_quickbooks", "schema_test", "unique_W_BILLS_F_K_BILL_LINE_DLHK"], "unique_id": "test.dlh_quickbooks.unique_W_BILLS_F_K_BILL_LINE_DLHK.192663321f", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "schema_test/unique_W_BILLS_F_K_BILL_LINE_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_BILLS_F_K_BILL_LINE_DLHK", "alias": "unique_W_BILLS_F_K_BILL_LINE_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_BILLS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/schema.yml/schema_test/unique_W_BILLS_F_K_BILL_LINE_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1648040067, "compiled_sql": "\n    \n    \n\nselect\n    K_BILL_LINE_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_BILLS_F\nwhere K_BILL_LINE_DLHK is not null\ngroup by K_BILL_LINE_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_BILL_LINE_DLHK"}, "test.dlh_quickbooks.not_null_W_BILLS_F_K_BILL_LINE_DLHK.2cfbee0ddf": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_BILL_LINE_DLHK", "model": "{{ get_where_subquery(ref('W_BILLS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_quickbooks.W_BILLS_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_quickbooks", "schema_test", "not_null_W_BILLS_F_K_BILL_LINE_DLHK"], "unique_id": "test.dlh_quickbooks.not_null_W_BILLS_F_K_BILL_LINE_DLHK.2cfbee0ddf", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "schema_test/not_null_W_BILLS_F_K_BILL_LINE_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_BILLS_F_K_BILL_LINE_DLHK", "alias": "not_null_W_BILLS_F_K_BILL_LINE_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_BILLS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/schema.yml/schema_test/not_null_W_BILLS_F_K_BILL_LINE_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1648040067, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_BILLS_F\nwhere K_BILL_LINE_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_BILL_LINE_DLHK"}, "test.dlh_quickbooks.relationships_W_BILLS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.635efc2ad0": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_BILLS_F_8d76c57633cd6ccd7bce9c24101d6364\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_ACCOUNTS_D')", "field": "K_ACCOUNT_DLHK", "column_name": "K_ACCOUNT_DLHK", "model": "{{ get_where_subquery(ref('W_BILLS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_quickbooks.W_ACCOUNTS_D", "model.dlh_quickbooks.W_BILLS_F"]}, "config": {"enabled": true, "alias": "relationships_W_BILLS_F_8d76c57633cd6ccd7bce9c24101d6364", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_quickbooks", "schema_test", "relationships_W_BILLS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_"], "unique_id": "test.dlh_quickbooks.relationships_W_BILLS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.635efc2ad0", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "schema_test/relationships_W_BILLS_F_8d76c57633cd6ccd7bce9c24101d6364.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_BILLS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_", "alias": "relationships_W_BILLS_F_8d76c57633cd6ccd7bce9c24101d6364", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ACCOUNTS_D"], ["W_BILLS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/schema.yml/schema_test/relationships_W_BILLS_F_8d76c57633cd6ccd7bce9c24101d6364.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_BILLS_F_8d76c57633cd6ccd7bce9c24101d6364"}, "created_at": 1648040067, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_ACCOUNT_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_BILLS_F\n    where K_ACCOUNT_DLHK is not null\n),\n\nparent as (\n    select K_ACCOUNT_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_ACCOUNTS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_ACCOUNT_DLHK"}, "test.dlh_quickbooks.relationships_W_BILLS_F_K_BILL_PAYABLE_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.199cac82b1": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_BILLS_F_187a8be9d4550cb3c44ddcd47defc4a5\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_ACCOUNTS_D')", "field": "K_ACCOUNT_DLHK", "column_name": "K_BILL_PAYABLE_ACCOUNT_DLHK", "model": "{{ get_where_subquery(ref('W_BILLS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_quickbooks.W_ACCOUNTS_D", "model.dlh_quickbooks.W_BILLS_F"]}, "config": {"enabled": true, "alias": "relationships_W_BILLS_F_187a8be9d4550cb3c44ddcd47defc4a5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_quickbooks", "schema_test", "relationships_W_BILLS_F_K_BILL_PAYABLE_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_"], "unique_id": "test.dlh_quickbooks.relationships_W_BILLS_F_K_BILL_PAYABLE_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.199cac82b1", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "schema_test/relationships_W_BILLS_F_187a8be9d4550cb3c44ddcd47defc4a5.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_BILLS_F_K_BILL_PAYABLE_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_", "alias": "relationships_W_BILLS_F_187a8be9d4550cb3c44ddcd47defc4a5", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ACCOUNTS_D"], ["W_BILLS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/schema.yml/schema_test/relationships_W_BILLS_F_187a8be9d4550cb3c44ddcd47defc4a5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_BILLS_F_187a8be9d4550cb3c44ddcd47defc4a5"}, "created_at": 1648040067, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_BILL_PAYABLE_ACCOUNT_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_BILLS_F\n    where K_BILL_PAYABLE_ACCOUNT_DLHK is not null\n),\n\nparent as (\n    select K_ACCOUNT_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_ACCOUNTS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_BILL_PAYABLE_ACCOUNT_DLHK"}, "test.dlh_quickbooks.relationships_W_BILLS_F_K_SALES_TERM_DLHK__K_TERM_DLHK__ref_W_TERM_D_.fcd9c52512": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_BILLS_F_82867a0391d5076d9429c8d96ff4722f\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_TERM_D')", "field": "K_TERM_DLHK", "column_name": "K_SALES_TERM_DLHK", "model": "{{ get_where_subquery(ref('W_BILLS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_quickbooks.W_TERM_D", "model.dlh_quickbooks.W_BILLS_F"]}, "config": {"enabled": true, "alias": "relationships_W_BILLS_F_82867a0391d5076d9429c8d96ff4722f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_quickbooks", "schema_test", "relationships_W_BILLS_F_K_SALES_TERM_DLHK__K_TERM_DLHK__ref_W_TERM_D_"], "unique_id": "test.dlh_quickbooks.relationships_W_BILLS_F_K_SALES_TERM_DLHK__K_TERM_DLHK__ref_W_TERM_D_.fcd9c52512", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "schema_test/relationships_W_BILLS_F_82867a0391d5076d9429c8d96ff4722f.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_BILLS_F_K_SALES_TERM_DLHK__K_TERM_DLHK__ref_W_TERM_D_", "alias": "relationships_W_BILLS_F_82867a0391d5076d9429c8d96ff4722f", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_TERM_D"], ["W_BILLS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/schema.yml/schema_test/relationships_W_BILLS_F_82867a0391d5076d9429c8d96ff4722f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_BILLS_F_82867a0391d5076d9429c8d96ff4722f"}, "created_at": 1648040067, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_SALES_TERM_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_BILLS_F\n    where K_SALES_TERM_DLHK is not null\n),\n\nparent as (\n    select K_TERM_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_TERM_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_SALES_TERM_DLHK"}, "test.dlh_quickbooks.relationships_W_BILLS_F_K_VENDOR_DLHK__K_VENDOR_DLHK__ref_W_VENDORS_D_.d8f62067a5": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_BILLS_F_ad9833fd88c7d9ebe2c522ca3833366e\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_VENDORS_D')", "field": "K_VENDOR_DLHK", "column_name": "K_VENDOR_DLHK", "model": "{{ get_where_subquery(ref('W_BILLS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_quickbooks.W_VENDORS_D", "model.dlh_quickbooks.W_BILLS_F"]}, "config": {"enabled": true, "alias": "relationships_W_BILLS_F_ad9833fd88c7d9ebe2c522ca3833366e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_quickbooks", "schema_test", "relationships_W_BILLS_F_K_VENDOR_DLHK__K_VENDOR_DLHK__ref_W_VENDORS_D_"], "unique_id": "test.dlh_quickbooks.relationships_W_BILLS_F_K_VENDOR_DLHK__K_VENDOR_DLHK__ref_W_VENDORS_D_.d8f62067a5", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "schema_test/relationships_W_BILLS_F_ad9833fd88c7d9ebe2c522ca3833366e.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_BILLS_F_K_VENDOR_DLHK__K_VENDOR_DLHK__ref_W_VENDORS_D_", "alias": "relationships_W_BILLS_F_ad9833fd88c7d9ebe2c522ca3833366e", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_VENDORS_D"], ["W_BILLS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/schema.yml/schema_test/relationships_W_BILLS_F_ad9833fd88c7d9ebe2c522ca3833366e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_BILLS_F_ad9833fd88c7d9ebe2c522ca3833366e"}, "created_at": 1648040067, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_VENDOR_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_BILLS_F\n    where K_VENDOR_DLHK is not null\n),\n\nparent as (\n    select K_VENDOR_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_VENDORS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_VENDOR_DLHK"}, "test.dlh_quickbooks.relationships_W_BILLS_F_K_BILL_CURRENCY_DLHK__K_CURRENCY_DLHK__ref_W_CURRENCY_D_.9a644c3d77": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_BILLS_F_da2266191b95bbfff33d2e89fd065660\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_CURRENCY_D')", "field": "K_CURRENCY_DLHK", "column_name": "K_BILL_CURRENCY_DLHK", "model": "{{ get_where_subquery(ref('W_BILLS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_quickbooks.W_CURRENCY_D", "model.dlh_quickbooks.W_BILLS_F"]}, "config": {"enabled": true, "alias": "relationships_W_BILLS_F_da2266191b95bbfff33d2e89fd065660", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_quickbooks", "schema_test", "relationships_W_BILLS_F_K_BILL_CURRENCY_DLHK__K_CURRENCY_DLHK__ref_W_CURRENCY_D_"], "unique_id": "test.dlh_quickbooks.relationships_W_BILLS_F_K_BILL_CURRENCY_DLHK__K_CURRENCY_DLHK__ref_W_CURRENCY_D_.9a644c3d77", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "schema_test/relationships_W_BILLS_F_da2266191b95bbfff33d2e89fd065660.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_BILLS_F_K_BILL_CURRENCY_DLHK__K_CURRENCY_DLHK__ref_W_CURRENCY_D_", "alias": "relationships_W_BILLS_F_da2266191b95bbfff33d2e89fd065660", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_CURRENCY_D"], ["W_BILLS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/schema.yml/schema_test/relationships_W_BILLS_F_da2266191b95bbfff33d2e89fd065660.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_BILLS_F_da2266191b95bbfff33d2e89fd065660"}, "created_at": 1648040067, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_BILL_CURRENCY_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_BILLS_F\n    where K_BILL_CURRENCY_DLHK is not null\n),\n\nparent as (\n    select K_CURRENCY_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_CURRENCY_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_BILL_CURRENCY_DLHK"}, "test.dlh_quickbooks.relationships_W_BILLS_F_K_ITEM_EXPENSE_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.2fcf0b2c13": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_BILLS_F_5f857a3337aa06cc8b72830652160dc4\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_ITEMS_D')", "field": "K_ITEM_DLHK", "column_name": "K_ITEM_EXPENSE_DLHK", "model": "{{ get_where_subquery(ref('W_BILLS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_quickbooks.W_ITEMS_D", "model.dlh_quickbooks.W_BILLS_F"]}, "config": {"enabled": true, "alias": "relationships_W_BILLS_F_5f857a3337aa06cc8b72830652160dc4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_quickbooks", "schema_test", "relationships_W_BILLS_F_K_ITEM_EXPENSE_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_"], "unique_id": "test.dlh_quickbooks.relationships_W_BILLS_F_K_ITEM_EXPENSE_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.2fcf0b2c13", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "schema_test/relationships_W_BILLS_F_5f857a3337aa06cc8b72830652160dc4.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_BILLS_F_K_ITEM_EXPENSE_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_", "alias": "relationships_W_BILLS_F_5f857a3337aa06cc8b72830652160dc4", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ITEMS_D"], ["W_BILLS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/schema.yml/schema_test/relationships_W_BILLS_F_5f857a3337aa06cc8b72830652160dc4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_BILLS_F_5f857a3337aa06cc8b72830652160dc4"}, "created_at": 1648040067, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_ITEM_EXPENSE_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_BILLS_F\n    where K_ITEM_EXPENSE_DLHK is not null\n),\n\nparent as (\n    select K_ITEM_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_ITEMS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_ITEM_EXPENSE_DLHK"}, "test.dlh_quickbooks.unique_W_PURCHASES_F_K_PURCHASE_LINE_DLHK.bcc44b3a6e": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_PURCHASE_LINE_DLHK", "model": "{{ get_where_subquery(ref('W_PURCHASES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_quickbooks.W_PURCHASES_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_quickbooks", "schema_test", "unique_W_PURCHASES_F_K_PURCHASE_LINE_DLHK"], "unique_id": "test.dlh_quickbooks.unique_W_PURCHASES_F_K_PURCHASE_LINE_DLHK.bcc44b3a6e", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "schema_test/unique_W_PURCHASES_F_K_PURCHASE_LINE_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_PURCHASES_F_K_PURCHASE_LINE_DLHK", "alias": "unique_W_PURCHASES_F_K_PURCHASE_LINE_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_PURCHASES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/schema.yml/schema_test/unique_W_PURCHASES_F_K_PURCHASE_LINE_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1648040067, "compiled_sql": "\n    \n    \n\nselect\n    K_PURCHASE_LINE_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_PURCHASES_F\nwhere K_PURCHASE_LINE_DLHK is not null\ngroup by K_PURCHASE_LINE_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_PURCHASE_LINE_DLHK"}, "test.dlh_quickbooks.not_null_W_PURCHASES_F_K_PURCHASE_LINE_DLHK.d4ba8cdddc": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_PURCHASE_LINE_DLHK", "model": "{{ get_where_subquery(ref('W_PURCHASES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_quickbooks.W_PURCHASES_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_quickbooks", "schema_test", "not_null_W_PURCHASES_F_K_PURCHASE_LINE_DLHK"], "unique_id": "test.dlh_quickbooks.not_null_W_PURCHASES_F_K_PURCHASE_LINE_DLHK.d4ba8cdddc", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "schema_test/not_null_W_PURCHASES_F_K_PURCHASE_LINE_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_PURCHASES_F_K_PURCHASE_LINE_DLHK", "alias": "not_null_W_PURCHASES_F_K_PURCHASE_LINE_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_PURCHASES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/schema.yml/schema_test/not_null_W_PURCHASES_F_K_PURCHASE_LINE_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1648040067, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_PURCHASES_F\nwhere K_PURCHASE_LINE_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_PURCHASE_LINE_DLHK"}, "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.c4fd97a3ed": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_PURCHASES_F_5b7bbfb0a713d7a3c9fba8e87809a5aa\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_ACCOUNTS_D')", "field": "K_ACCOUNT_DLHK", "column_name": "K_ACCOUNT_DLHK", "model": "{{ get_where_subquery(ref('W_PURCHASES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_quickbooks.W_ACCOUNTS_D", "model.dlh_quickbooks.W_PURCHASES_F"]}, "config": {"enabled": true, "alias": "relationships_W_PURCHASES_F_5b7bbfb0a713d7a3c9fba8e87809a5aa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_quickbooks", "schema_test", "relationships_W_PURCHASES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_"], "unique_id": "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.c4fd97a3ed", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "schema_test/relationships_W_PURCHASES_F_5b7bbfb0a713d7a3c9fba8e87809a5aa.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_PURCHASES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_", "alias": "relationships_W_PURCHASES_F_5b7bbfb0a713d7a3c9fba8e87809a5aa", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ACCOUNTS_D"], ["W_PURCHASES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/schema.yml/schema_test/relationships_W_PURCHASES_F_5b7bbfb0a713d7a3c9fba8e87809a5aa.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_PURCHASES_F_5b7bbfb0a713d7a3c9fba8e87809a5aa"}, "created_at": 1648040067, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_ACCOUNT_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_PURCHASES_F\n    where K_ACCOUNT_DLHK is not null\n),\n\nparent as (\n    select K_ACCOUNT_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_ACCOUNTS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_ACCOUNT_DLHK"}, "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_CUSTOMERS_D_.6cd34eb3a1": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_PURCHASES_F_6d108fdc58d2ad6407c0a778e8d84dc4\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_CUSTOMERS_D')", "field": "K_CUSTOMER_DLHK", "column_name": "K_CUSTOMER_DLHK", "model": "{{ get_where_subquery(ref('W_PURCHASES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_quickbooks.W_CUSTOMERS_D", "model.dlh_quickbooks.W_PURCHASES_F"]}, "config": {"enabled": true, "alias": "relationships_W_PURCHASES_F_6d108fdc58d2ad6407c0a778e8d84dc4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_quickbooks", "schema_test", "relationships_W_PURCHASES_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_CUSTOMERS_D_"], "unique_id": "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_CUSTOMERS_D_.6cd34eb3a1", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "schema_test/relationships_W_PURCHASES_F_6d108fdc58d2ad6407c0a778e8d84dc4.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_PURCHASES_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_CUSTOMERS_D_", "alias": "relationships_W_PURCHASES_F_6d108fdc58d2ad6407c0a778e8d84dc4", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_CUSTOMERS_D"], ["W_PURCHASES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/schema.yml/schema_test/relationships_W_PURCHASES_F_6d108fdc58d2ad6407c0a778e8d84dc4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_PURCHASES_F_6d108fdc58d2ad6407c0a778e8d84dc4"}, "created_at": 1648040067, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_CUSTOMER_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_PURCHASES_F\n    where K_CUSTOMER_DLHK is not null\n),\n\nparent as (\n    select K_CUSTOMER_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_CUSTOMERS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CUSTOMER_DLHK"}, "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_VENDOR_DLHK__K_VENDOR_DLHK__ref_W_VENDORS_D_.b45aed1b23": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_PURCHASES_F_b302634a58418411cda6cd464951c6ff\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_VENDORS_D')", "field": "K_VENDOR_DLHK", "column_name": "K_VENDOR_DLHK", "model": "{{ get_where_subquery(ref('W_PURCHASES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_quickbooks.W_VENDORS_D", "model.dlh_quickbooks.W_PURCHASES_F"]}, "config": {"enabled": true, "alias": "relationships_W_PURCHASES_F_b302634a58418411cda6cd464951c6ff", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_quickbooks", "schema_test", "relationships_W_PURCHASES_F_K_VENDOR_DLHK__K_VENDOR_DLHK__ref_W_VENDORS_D_"], "unique_id": "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_VENDOR_DLHK__K_VENDOR_DLHK__ref_W_VENDORS_D_.b45aed1b23", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "schema_test/relationships_W_PURCHASES_F_b302634a58418411cda6cd464951c6ff.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_PURCHASES_F_K_VENDOR_DLHK__K_VENDOR_DLHK__ref_W_VENDORS_D_", "alias": "relationships_W_PURCHASES_F_b302634a58418411cda6cd464951c6ff", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_VENDORS_D"], ["W_PURCHASES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/schema.yml/schema_test/relationships_W_PURCHASES_F_b302634a58418411cda6cd464951c6ff.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_PURCHASES_F_b302634a58418411cda6cd464951c6ff"}, "created_at": 1648040067, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_VENDOR_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_PURCHASES_F\n    where K_VENDOR_DLHK is not null\n),\n\nparent as (\n    select K_VENDOR_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_VENDORS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_VENDOR_DLHK"}, "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_PURCHASE_CURRENCY_DLHK__K_CURRENCY_DLHK__ref_W_CURRENCY_D_.1047265869": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_PURCHASES_F_6d0bd1295b6eac6d8b991b548c13b101\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_CURRENCY_D')", "field": "K_CURRENCY_DLHK", "column_name": "K_PURCHASE_CURRENCY_DLHK", "model": "{{ get_where_subquery(ref('W_PURCHASES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_quickbooks.W_CURRENCY_D", "model.dlh_quickbooks.W_PURCHASES_F"]}, "config": {"enabled": true, "alias": "relationships_W_PURCHASES_F_6d0bd1295b6eac6d8b991b548c13b101", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_quickbooks", "schema_test", "relationships_W_PURCHASES_F_K_PURCHASE_CURRENCY_DLHK__K_CURRENCY_DLHK__ref_W_CURRENCY_D_"], "unique_id": "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_PURCHASE_CURRENCY_DLHK__K_CURRENCY_DLHK__ref_W_CURRENCY_D_.1047265869", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "schema_test/relationships_W_PURCHASES_F_6d0bd1295b6eac6d8b991b548c13b101.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_PURCHASES_F_K_PURCHASE_CURRENCY_DLHK__K_CURRENCY_DLHK__ref_W_CURRENCY_D_", "alias": "relationships_W_PURCHASES_F_6d0bd1295b6eac6d8b991b548c13b101", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_CURRENCY_D"], ["W_PURCHASES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/schema.yml/schema_test/relationships_W_PURCHASES_F_6d0bd1295b6eac6d8b991b548c13b101.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_PURCHASES_F_6d0bd1295b6eac6d8b991b548c13b101"}, "created_at": 1648040067, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_PURCHASE_CURRENCY_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_PURCHASES_F\n    where K_PURCHASE_CURRENCY_DLHK is not null\n),\n\nparent as (\n    select K_CURRENCY_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_CURRENCY_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_PURCHASE_CURRENCY_DLHK"}, "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_ITEM_EXPENSE_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.08b42141a8": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_PURCHASES_F_471fbad42db2688164db636dbbf4d405\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_ITEMS_D')", "field": "K_ITEM_DLHK", "column_name": "K_ITEM_EXPENSE_DLHK", "model": "{{ get_where_subquery(ref('W_PURCHASES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_quickbooks.W_ITEMS_D", "model.dlh_quickbooks.W_PURCHASES_F"]}, "config": {"enabled": true, "alias": "relationships_W_PURCHASES_F_471fbad42db2688164db636dbbf4d405", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_quickbooks", "schema_test", "relationships_W_PURCHASES_F_K_ITEM_EXPENSE_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_"], "unique_id": "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_ITEM_EXPENSE_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.08b42141a8", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "schema_test/relationships_W_PURCHASES_F_471fbad42db2688164db636dbbf4d405.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_PURCHASES_F_K_ITEM_EXPENSE_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_", "alias": "relationships_W_PURCHASES_F_471fbad42db2688164db636dbbf4d405", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ITEMS_D"], ["W_PURCHASES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_quickbooks/models/schema.yml/schema_test/relationships_W_PURCHASES_F_471fbad42db2688164db636dbbf4d405.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_PURCHASES_F_471fbad42db2688164db636dbbf4d405"}, "created_at": 1648040067, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_ITEM_EXPENSE_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_PURCHASES_F\n    where K_ITEM_EXPENSE_DLHK is not null\n),\n\nparent as (\n    select K_ITEM_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_QUICKBOOKS.W_ITEMS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_ITEM_EXPENSE_DLHK"}}, "sources": {"source.dlh_quickbooks.DEMO_QUICKBOOKS.ACCOUNT": {"fqn": ["dlh_quickbooks", "sources", "DEMO_QUICKBOOKS", "ACCOUNT"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_QUICKBOOKS", "unique_id": "source.dlh_quickbooks.DEMO_QUICKBOOKS.ACCOUNT", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "ACCOUNT", "source_name": "DEMO_QUICKBOOKS", "source_description": "", "loader": "", "identifier": "ACCOUNT", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"ACCOUNT\"", "created_at": 1648040067}, "source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL": {"fqn": ["dlh_quickbooks", "sources", "DEMO_QUICKBOOKS", "BILL"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_QUICKBOOKS", "unique_id": "source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "BILL", "source_name": "DEMO_QUICKBOOKS", "source_description": "", "loader": "", "identifier": "BILL", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"BILL\"", "created_at": 1648040067}, "source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL_LINE": {"fqn": ["dlh_quickbooks", "sources", "DEMO_QUICKBOOKS", "BILL_LINE"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_QUICKBOOKS", "unique_id": "source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL_LINE", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "BILL_LINE", "source_name": "DEMO_QUICKBOOKS", "source_description": "", "loader": "", "identifier": "BILL_LINE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"BILL_LINE\"", "created_at": 1648040067}, "source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL_PAYMENT": {"fqn": ["dlh_quickbooks", "sources", "DEMO_QUICKBOOKS", "BILL_PAYMENT"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_QUICKBOOKS", "unique_id": "source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL_PAYMENT", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "BILL_PAYMENT", "source_name": "DEMO_QUICKBOOKS", "source_description": "", "loader": "", "identifier": "BILL_PAYMENT", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"BILL_PAYMENT\"", "created_at": 1648040067}, "source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL_PAYMENT_LINE": {"fqn": ["dlh_quickbooks", "sources", "DEMO_QUICKBOOKS", "BILL_PAYMENT_LINE"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_QUICKBOOKS", "unique_id": "source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL_PAYMENT_LINE", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "BILL_PAYMENT_LINE", "source_name": "DEMO_QUICKBOOKS", "source_description": "", "loader": "", "identifier": "BILL_PAYMENT_LINE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"BILL_PAYMENT_LINE\"", "created_at": 1648040067}, "source.dlh_quickbooks.DEMO_QUICKBOOKS.CURRENCY": {"fqn": ["dlh_quickbooks", "sources", "DEMO_QUICKBOOKS", "CURRENCY"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_QUICKBOOKS", "unique_id": "source.dlh_quickbooks.DEMO_QUICKBOOKS.CURRENCY", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "CURRENCY", "source_name": "DEMO_QUICKBOOKS", "source_description": "", "loader": "", "identifier": "CURRENCY", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"CURRENCY\"", "created_at": 1648040067}, "source.dlh_quickbooks.DEMO_QUICKBOOKS.CUSTOMER": {"fqn": ["dlh_quickbooks", "sources", "DEMO_QUICKBOOKS", "CUSTOMER"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_QUICKBOOKS", "unique_id": "source.dlh_quickbooks.DEMO_QUICKBOOKS.CUSTOMER", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "CUSTOMER", "source_name": "DEMO_QUICKBOOKS", "source_description": "", "loader": "", "identifier": "CUSTOMER", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"CUSTOMER\"", "created_at": 1648040067}, "source.dlh_quickbooks.DEMO_QUICKBOOKS.DEPOSIT": {"fqn": ["dlh_quickbooks", "sources", "DEMO_QUICKBOOKS", "DEPOSIT"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_QUICKBOOKS", "unique_id": "source.dlh_quickbooks.DEMO_QUICKBOOKS.DEPOSIT", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "DEPOSIT", "source_name": "DEMO_QUICKBOOKS", "source_description": "", "loader": "", "identifier": "DEPOSIT", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"DEPOSIT\"", "created_at": 1648040067}, "source.dlh_quickbooks.DEMO_QUICKBOOKS.DEPOSIT_LINE": {"fqn": ["dlh_quickbooks", "sources", "DEMO_QUICKBOOKS", "DEPOSIT_LINE"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_QUICKBOOKS", "unique_id": "source.dlh_quickbooks.DEMO_QUICKBOOKS.DEPOSIT_LINE", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "DEPOSIT_LINE", "source_name": "DEMO_QUICKBOOKS", "source_description": "", "loader": "", "identifier": "DEPOSIT_LINE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"DEPOSIT_LINE\"", "created_at": 1648040067}, "source.dlh_quickbooks.DEMO_QUICKBOOKS.EMPLOYEE": {"fqn": ["dlh_quickbooks", "sources", "DEMO_QUICKBOOKS", "EMPLOYEE"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_QUICKBOOKS", "unique_id": "source.dlh_quickbooks.DEMO_QUICKBOOKS.EMPLOYEE", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "EMPLOYEE", "source_name": "DEMO_QUICKBOOKS", "source_description": "", "loader": "", "identifier": "EMPLOYEE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"EMPLOYEE\"", "created_at": 1648040067}, "source.dlh_quickbooks.DEMO_QUICKBOOKS.ITEM": {"fqn": ["dlh_quickbooks", "sources", "DEMO_QUICKBOOKS", "ITEM"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_QUICKBOOKS", "unique_id": "source.dlh_quickbooks.DEMO_QUICKBOOKS.ITEM", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "ITEM", "source_name": "DEMO_QUICKBOOKS", "source_description": "", "loader": "", "identifier": "ITEM", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"ITEM\"", "created_at": 1648040067}, "source.dlh_quickbooks.DEMO_QUICKBOOKS.JOURNAL_ENTRY": {"fqn": ["dlh_quickbooks", "sources", "DEMO_QUICKBOOKS", "JOURNAL_ENTRY"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_QUICKBOOKS", "unique_id": "source.dlh_quickbooks.DEMO_QUICKBOOKS.JOURNAL_ENTRY", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "JOURNAL_ENTRY", "source_name": "DEMO_QUICKBOOKS", "source_description": "", "loader": "", "identifier": "JOURNAL_ENTRY", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"JOURNAL_ENTRY\"", "created_at": 1648040067}, "source.dlh_quickbooks.DEMO_QUICKBOOKS.JOURNAL_ENTRY_LINE": {"fqn": ["dlh_quickbooks", "sources", "DEMO_QUICKBOOKS", "JOURNAL_ENTRY_LINE"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_QUICKBOOKS", "unique_id": "source.dlh_quickbooks.DEMO_QUICKBOOKS.JOURNAL_ENTRY_LINE", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "JOURNAL_ENTRY_LINE", "source_name": "DEMO_QUICKBOOKS", "source_description": "", "loader": "", "identifier": "JOURNAL_ENTRY_LINE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"JOURNAL_ENTRY_LINE\"", "created_at": 1648040067}, "source.dlh_quickbooks.DEMO_QUICKBOOKS.PURCHASE": {"fqn": ["dlh_quickbooks", "sources", "DEMO_QUICKBOOKS", "PURCHASE"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_QUICKBOOKS", "unique_id": "source.dlh_quickbooks.DEMO_QUICKBOOKS.PURCHASE", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "PURCHASE", "source_name": "DEMO_QUICKBOOKS", "source_description": "", "loader": "", "identifier": "PURCHASE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"PURCHASE\"", "created_at": 1648040067}, "source.dlh_quickbooks.DEMO_QUICKBOOKS.PURCHASE_LINE": {"fqn": ["dlh_quickbooks", "sources", "DEMO_QUICKBOOKS", "PURCHASE_LINE"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_QUICKBOOKS", "unique_id": "source.dlh_quickbooks.DEMO_QUICKBOOKS.PURCHASE_LINE", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "PURCHASE_LINE", "source_name": "DEMO_QUICKBOOKS", "source_description": "", "loader": "", "identifier": "PURCHASE_LINE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"PURCHASE_LINE\"", "created_at": 1648040067}, "source.dlh_quickbooks.DEMO_QUICKBOOKS.VENDOR": {"fqn": ["dlh_quickbooks", "sources", "DEMO_QUICKBOOKS", "VENDOR"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_QUICKBOOKS", "unique_id": "source.dlh_quickbooks.DEMO_QUICKBOOKS.VENDOR", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "VENDOR", "source_name": "DEMO_QUICKBOOKS", "source_description": "", "loader": "", "identifier": "VENDOR", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"VENDOR\"", "created_at": 1648040067}, "source.dlh_quickbooks.DEMO_QUICKBOOKS.TERM": {"fqn": ["dlh_quickbooks", "sources", "DEMO_QUICKBOOKS", "TERM"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_QUICKBOOKS", "unique_id": "source.dlh_quickbooks.DEMO_QUICKBOOKS.TERM", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "TERM", "source_name": "DEMO_QUICKBOOKS", "source_description": "", "loader": "", "identifier": "TERM", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"TERM\"", "created_at": 1648040067}, "source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL_LINKED_TXN": {"fqn": ["dlh_quickbooks", "sources", "DEMO_QUICKBOOKS", "BILL_LINKED_TXN"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_QUICKBOOKS", "unique_id": "source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL_LINKED_TXN", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "BILL_LINKED_TXN", "source_name": "DEMO_QUICKBOOKS", "source_description": "", "loader": "", "identifier": "BILL_LINKED_TXN", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"BILL_LINKED_TXN\"", "created_at": 1648040067}, "source.dlh_quickbooks.DEMO_QUICKBOOKS.INVOICE": {"fqn": ["dlh_quickbooks", "sources", "DEMO_QUICKBOOKS", "INVOICE"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_QUICKBOOKS", "unique_id": "source.dlh_quickbooks.DEMO_QUICKBOOKS.INVOICE", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "INVOICE", "source_name": "DEMO_QUICKBOOKS", "source_description": "", "loader": "", "identifier": "INVOICE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"INVOICE\"", "created_at": 1648040067}, "source.dlh_quickbooks.DEMO_QUICKBOOKS.INVOICE_LINKED_TXN": {"fqn": ["dlh_quickbooks", "sources", "DEMO_QUICKBOOKS", "INVOICE_LINKED_TXN"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_QUICKBOOKS", "unique_id": "source.dlh_quickbooks.DEMO_QUICKBOOKS.INVOICE_LINKED_TXN", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "INVOICE_LINKED_TXN", "source_name": "DEMO_QUICKBOOKS", "source_description": "", "loader": "", "identifier": "INVOICE_LINKED_TXN", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"INVOICE_LINKED_TXN\"", "created_at": 1648040067}, "source.dlh_quickbooks.DEMO_QUICKBOOKS.INVOICE_LINE": {"fqn": ["dlh_quickbooks", "sources", "DEMO_QUICKBOOKS", "INVOICE_LINE"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_QUICKBOOKS", "unique_id": "source.dlh_quickbooks.DEMO_QUICKBOOKS.INVOICE_LINE", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "INVOICE_LINE", "source_name": "DEMO_QUICKBOOKS", "source_description": "", "loader": "", "identifier": "INVOICE_LINE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"INVOICE_LINE\"", "created_at": 1648040067}, "source.dlh_quickbooks.DEMO_QUICKBOOKS.INVOICE_LINE_BUNDLE": {"fqn": ["dlh_quickbooks", "sources", "DEMO_QUICKBOOKS", "INVOICE_LINE_BUNDLE"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_QUICKBOOKS", "unique_id": "source.dlh_quickbooks.DEMO_QUICKBOOKS.INVOICE_LINE_BUNDLE", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "INVOICE_LINE_BUNDLE", "source_name": "DEMO_QUICKBOOKS", "source_description": "", "loader": "", "identifier": "INVOICE_LINE_BUNDLE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"INVOICE_LINE_BUNDLE\"", "created_at": 1648040067}, "source.dlh_quickbooks.DEMO_QUICKBOOKS.CLASS": {"fqn": ["dlh_quickbooks", "sources", "DEMO_QUICKBOOKS", "CLASS"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_QUICKBOOKS", "unique_id": "source.dlh_quickbooks.DEMO_QUICKBOOKS.CLASS", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "CLASS", "source_name": "DEMO_QUICKBOOKS", "source_description": "", "loader": "", "identifier": "CLASS", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"CLASS\"", "created_at": 1648040067}, "source.dlh_quickbooks.DEMO_QUICKBOOKS.PAYMENT": {"fqn": ["dlh_quickbooks", "sources", "DEMO_QUICKBOOKS", "PAYMENT"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_QUICKBOOKS", "unique_id": "source.dlh_quickbooks.DEMO_QUICKBOOKS.PAYMENT", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "PAYMENT", "source_name": "DEMO_QUICKBOOKS", "source_description": "", "loader": "", "identifier": "PAYMENT", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"PAYMENT\"", "created_at": 1648040067}, "source.dlh_quickbooks.DEMO_QUICKBOOKS.PAYMENT_LINE": {"fqn": ["dlh_quickbooks", "sources", "DEMO_QUICKBOOKS", "PAYMENT_LINE"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_QUICKBOOKS", "unique_id": "source.dlh_quickbooks.DEMO_QUICKBOOKS.PAYMENT_LINE", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "PAYMENT_LINE", "source_name": "DEMO_QUICKBOOKS", "source_description": "", "loader": "", "identifier": "PAYMENT_LINE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_QUICKBOOKS.\"PAYMENT_LINE\"", "created_at": 1648040067}}, "macros": {"macro.dlh_quickbooks.full_name": {"unique_id": "macro.dlh_quickbooks.full_name", "package_name": "dlh_quickbooks", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/quickbooks_dbt", "path": "macros/common.sql", "original_file_path": "macros/common.sql", "name": "full_name", "macro_sql": "{% macro full_name(firstName,middleName, lastName) %}\n    (COALESCE({{firstName}},'') || ' ' || COALESCE({{middleName}} || ' ','') || COALESCE({{lastName}},''))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }} {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in column_dict if (column_name in existing_columns) or (column_name|upper in existing_columns) %}\n        {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} COMMENT $${{ column_dict[column_name]['description'] | replace('$', '[$]') }}$$ {{ ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns %}\n    \n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n  \n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n    \n    {% do run_query(sql) %}\n    \n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE \n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n  \n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n    \n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n   \n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {% do process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "materialization_test_default", "macro_sql": "\n\n{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/helpers.sql", "original_file_path": "macros/materializations/incremental/helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    \n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {% do process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.incremental_upsert", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n  \n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change != 'ignore' %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.common_get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/query.sql", "original_file_path": "macros/etc/query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/is_incremental.sql", "original_file_path": "macros/etc/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/where_subquery.sql", "original_file_path": "macros/etc/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/where_subquery.sql", "original_file_path": "macros/etc/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1648040066}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}}, "exposures": {}, "selectors": {}, "disabled": [], "parent_map": {"model.dlh_quickbooks.V_CUSTOMERS_STG": ["source.dlh_quickbooks.DEMO_QUICKBOOKS.CUSTOMER"], "model.dlh_quickbooks.V_PAYMENT_LINE_STG": ["source.dlh_quickbooks.DEMO_QUICKBOOKS.PAYMENT_LINE"], "model.dlh_quickbooks.V_PAYMENTS_STG": ["model.dlh_quickbooks.V_PAYMENT_HEADER_STG", "model.dlh_quickbooks.V_PAYMENT_LINE_STG"], "model.dlh_quickbooks.V_PAYMENT_HEADER_STG": ["model.dlh_quickbooks.W_ACCOUNTS_D", "model.dlh_quickbooks.W_CURRENCY_D", "model.dlh_quickbooks.W_CUSTOMERS_D", "source.dlh_quickbooks.DEMO_QUICKBOOKS.PAYMENT"], "model.dlh_quickbooks.V_BILL_HEADER_STG": ["model.dlh_quickbooks.W_ACCOUNTS_D", "model.dlh_quickbooks.W_CURRENCY_D", "model.dlh_quickbooks.W_TERM_D", "model.dlh_quickbooks.W_VENDORS_D", "source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL", "source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL_LINKED_TXN", "source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL_PAYMENT", "source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL_PAYMENT_LINE"], "model.dlh_quickbooks.V_BILLS_STG": ["model.dlh_quickbooks.V_BILL_HEADER_STG", "model.dlh_quickbooks.V_BILL_LINES_STG", "model.dlh_quickbooks.W_ITEMS_D"], "model.dlh_quickbooks.V_BILL_LINES_STG": ["model.dlh_quickbooks.W_ACCOUNTS_D", "model.dlh_quickbooks.W_CUSTOMERS_D", "model.dlh_quickbooks.W_ITEMS_D", "source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL_LINE"], "model.dlh_quickbooks.V_INVOICE_LINE_STG": ["model.dlh_quickbooks.W_ACCOUNTS_D", "model.dlh_quickbooks.W_CLASS_D", "model.dlh_quickbooks.W_ITEMS_D", "source.dlh_quickbooks.DEMO_QUICKBOOKS.INVOICE_LINE"], "model.dlh_quickbooks.V_INVOICE_HEADER_STG": ["model.dlh_quickbooks.W_ACCOUNTS_D", "model.dlh_quickbooks.W_CLASS_D", "model.dlh_quickbooks.W_CURRENCY_D", "model.dlh_quickbooks.W_CUSTOMERS_D", "model.dlh_quickbooks.W_PAYMENTS_F", "model.dlh_quickbooks.W_TERM_D", "source.dlh_quickbooks.DEMO_QUICKBOOKS.INVOICE", "source.dlh_quickbooks.DEMO_QUICKBOOKS.INVOICE_LINKED_TXN"], "model.dlh_quickbooks.V_INVOICE_LINE_BUNDLE_STG": ["model.dlh_quickbooks.V_INVOICE_LINE_STG", "model.dlh_quickbooks.W_ACCOUNTS_D", "model.dlh_quickbooks.W_CLASS_D", "model.dlh_quickbooks.W_ITEMS_D", "source.dlh_quickbooks.DEMO_QUICKBOOKS.INVOICE_LINE_BUNDLE"], "model.dlh_quickbooks.V_INVOICES_STG": ["model.dlh_quickbooks.V_INVOICE_HEADER_STG", "model.dlh_quickbooks.V_INVOICE_LINE_BUNDLE_STG", "model.dlh_quickbooks.V_INVOICE_LINE_STG"], "model.dlh_quickbooks.V_TERM_STG": ["source.dlh_quickbooks.DEMO_QUICKBOOKS.TERM"], "model.dlh_quickbooks.V_DATE_STG": [], "model.dlh_quickbooks.V_ACCOUNTS_STG": ["source.dlh_quickbooks.DEMO_QUICKBOOKS.ACCOUNT"], "model.dlh_quickbooks.V_ITEMS_STG": ["source.dlh_quickbooks.DEMO_QUICKBOOKS.ITEM"], "model.dlh_quickbooks.V_CLASS_STG": ["source.dlh_quickbooks.DEMO_QUICKBOOKS.CLASS"], "model.dlh_quickbooks.V_PURCHASES_STG": ["model.dlh_quickbooks.V_PURCHASE_HEADER_STG", "model.dlh_quickbooks.V_PURCHASE_LINE_STG", "model.dlh_quickbooks.W_ITEMS_D"], "model.dlh_quickbooks.V_PURCHASE_HEADER_STG": ["model.dlh_quickbooks.W_ACCOUNTS_D", "model.dlh_quickbooks.W_CURRENCY_D", "model.dlh_quickbooks.W_CUSTOMERS_D", "model.dlh_quickbooks.W_EMPLOYEES_D", "model.dlh_quickbooks.W_VENDORS_D", "source.dlh_quickbooks.DEMO_QUICKBOOKS.PURCHASE"], "model.dlh_quickbooks.V_PURCHASE_LINE_STG": ["model.dlh_quickbooks.W_ACCOUNTS_D", "model.dlh_quickbooks.W_CUSTOMERS_D", "model.dlh_quickbooks.W_ITEMS_D", "source.dlh_quickbooks.DEMO_QUICKBOOKS.PURCHASE_LINE"], "model.dlh_quickbooks.V_EMPLOYEES_STG": ["source.dlh_quickbooks.DEMO_QUICKBOOKS.EMPLOYEE"], "model.dlh_quickbooks.V_CURRENCY_STG": [], "model.dlh_quickbooks.V_VENDORS_STG": ["model.dlh_quickbooks.W_TERM_D", "source.dlh_quickbooks.DEMO_QUICKBOOKS.VENDOR"], "model.dlh_quickbooks.W_ITEMS_D": ["model.dlh_quickbooks.V_ITEMS_STG"], "model.dlh_quickbooks.W_ACCOUNTS_D": ["model.dlh_quickbooks.V_ACCOUNTS_STG"], "model.dlh_quickbooks.W_BILLS_F": ["model.dlh_quickbooks.V_BILLS_STG"], "model.dlh_quickbooks.W_DATE_D": ["model.dlh_quickbooks.V_DATE_STG"], "model.dlh_quickbooks.W_VENDORS_D": ["model.dlh_quickbooks.V_VENDORS_STG"], "model.dlh_quickbooks.W_EMPLOYEES_D": ["model.dlh_quickbooks.V_EMPLOYEES_STG"], "model.dlh_quickbooks.W_INVOICES_F": ["model.dlh_quickbooks.V_INVOICES_STG"], "model.dlh_quickbooks.W_PAYMENTS_F": ["model.dlh_quickbooks.V_PAYMENTS_STG"], "model.dlh_quickbooks.W_TERM_D": ["model.dlh_quickbooks.V_TERM_STG"], "model.dlh_quickbooks.W_CUSTOMERS_D": ["model.dlh_quickbooks.V_CUSTOMERS_STG"], "model.dlh_quickbooks.W_PURCHASES_F": ["model.dlh_quickbooks.V_PURCHASES_STG"], "model.dlh_quickbooks.W_CLASS_D": ["model.dlh_quickbooks.V_CLASS_STG"], "model.dlh_quickbooks.W_CURRENCY_D": ["model.dlh_quickbooks.V_CURRENCY_STG"], "test.dlh_quickbooks.unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK.cba900fa78": ["model.dlh_quickbooks.W_ACCOUNTS_D"], "test.dlh_quickbooks.not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK.918e0fe908": ["model.dlh_quickbooks.W_ACCOUNTS_D"], "test.dlh_quickbooks.unique_W_CUSTOMERS_D_K_CUSTOMER_DLHK.190cadd98a": ["model.dlh_quickbooks.W_CUSTOMERS_D"], "test.dlh_quickbooks.not_null_W_CUSTOMERS_D_K_CUSTOMER_DLHK.d428ec020e": ["model.dlh_quickbooks.W_CUSTOMERS_D"], "test.dlh_quickbooks.unique_W_EMPLOYEES_D_K_EMPLOYEE_DLHK.83d2f33139": ["model.dlh_quickbooks.W_EMPLOYEES_D"], "test.dlh_quickbooks.not_null_W_EMPLOYEES_D_K_EMPLOYEE_DLHK.dc599328ef": ["model.dlh_quickbooks.W_EMPLOYEES_D"], "test.dlh_quickbooks.unique_W_ITEMS_D_K_ITEM_DLHK.0d69e5b7fa": ["model.dlh_quickbooks.W_ITEMS_D"], "test.dlh_quickbooks.not_null_W_ITEMS_D_K_ITEM_DLHK.fe14e7111c": ["model.dlh_quickbooks.W_ITEMS_D"], "test.dlh_quickbooks.unique_W_TERM_D_K_TERM_DLHK.9a114fa514": ["model.dlh_quickbooks.W_TERM_D"], "test.dlh_quickbooks.not_null_W_TERM_D_K_TERM_DLHK.90ba40ae08": ["model.dlh_quickbooks.W_TERM_D"], "test.dlh_quickbooks.unique_W_VENDORS_D_K_VENDOR_DLHK.5a807966e7": ["model.dlh_quickbooks.W_VENDORS_D"], "test.dlh_quickbooks.not_null_W_VENDORS_D_K_VENDOR_DLHK.accc567e7f": ["model.dlh_quickbooks.W_VENDORS_D"], "test.dlh_quickbooks.unique_W_BILLS_F_K_BILL_LINE_DLHK.192663321f": ["model.dlh_quickbooks.W_BILLS_F"], "test.dlh_quickbooks.not_null_W_BILLS_F_K_BILL_LINE_DLHK.2cfbee0ddf": ["model.dlh_quickbooks.W_BILLS_F"], "test.dlh_quickbooks.relationships_W_BILLS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.635efc2ad0": ["model.dlh_quickbooks.W_ACCOUNTS_D", "model.dlh_quickbooks.W_BILLS_F"], "test.dlh_quickbooks.relationships_W_BILLS_F_K_BILL_PAYABLE_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.199cac82b1": ["model.dlh_quickbooks.W_ACCOUNTS_D", "model.dlh_quickbooks.W_BILLS_F"], "test.dlh_quickbooks.relationships_W_BILLS_F_K_SALES_TERM_DLHK__K_TERM_DLHK__ref_W_TERM_D_.fcd9c52512": ["model.dlh_quickbooks.W_BILLS_F", "model.dlh_quickbooks.W_TERM_D"], "test.dlh_quickbooks.relationships_W_BILLS_F_K_VENDOR_DLHK__K_VENDOR_DLHK__ref_W_VENDORS_D_.d8f62067a5": ["model.dlh_quickbooks.W_BILLS_F", "model.dlh_quickbooks.W_VENDORS_D"], "test.dlh_quickbooks.relationships_W_BILLS_F_K_BILL_CURRENCY_DLHK__K_CURRENCY_DLHK__ref_W_CURRENCY_D_.9a644c3d77": ["model.dlh_quickbooks.W_BILLS_F", "model.dlh_quickbooks.W_CURRENCY_D"], "test.dlh_quickbooks.relationships_W_BILLS_F_K_ITEM_EXPENSE_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.2fcf0b2c13": ["model.dlh_quickbooks.W_BILLS_F", "model.dlh_quickbooks.W_ITEMS_D"], "test.dlh_quickbooks.unique_W_PURCHASES_F_K_PURCHASE_LINE_DLHK.bcc44b3a6e": ["model.dlh_quickbooks.W_PURCHASES_F"], "test.dlh_quickbooks.not_null_W_PURCHASES_F_K_PURCHASE_LINE_DLHK.d4ba8cdddc": ["model.dlh_quickbooks.W_PURCHASES_F"], "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.c4fd97a3ed": ["model.dlh_quickbooks.W_ACCOUNTS_D", "model.dlh_quickbooks.W_PURCHASES_F"], "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_CUSTOMERS_D_.6cd34eb3a1": ["model.dlh_quickbooks.W_CUSTOMERS_D", "model.dlh_quickbooks.W_PURCHASES_F"], "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_VENDOR_DLHK__K_VENDOR_DLHK__ref_W_VENDORS_D_.b45aed1b23": ["model.dlh_quickbooks.W_PURCHASES_F", "model.dlh_quickbooks.W_VENDORS_D"], "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_PURCHASE_CURRENCY_DLHK__K_CURRENCY_DLHK__ref_W_CURRENCY_D_.1047265869": ["model.dlh_quickbooks.W_CURRENCY_D", "model.dlh_quickbooks.W_PURCHASES_F"], "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_ITEM_EXPENSE_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.08b42141a8": ["model.dlh_quickbooks.W_ITEMS_D", "model.dlh_quickbooks.W_PURCHASES_F"], "source.dlh_quickbooks.DEMO_QUICKBOOKS.ACCOUNT": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL_LINE": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL_PAYMENT": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL_PAYMENT_LINE": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.CURRENCY": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.CUSTOMER": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.DEPOSIT": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.DEPOSIT_LINE": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.EMPLOYEE": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.ITEM": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.JOURNAL_ENTRY": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.JOURNAL_ENTRY_LINE": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.PURCHASE": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.PURCHASE_LINE": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.VENDOR": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.TERM": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL_LINKED_TXN": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.INVOICE": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.INVOICE_LINKED_TXN": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.INVOICE_LINE": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.INVOICE_LINE_BUNDLE": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.CLASS": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.PAYMENT": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.PAYMENT_LINE": []}, "child_map": {"model.dlh_quickbooks.V_CUSTOMERS_STG": ["model.dlh_quickbooks.W_CUSTOMERS_D"], "model.dlh_quickbooks.V_PAYMENT_LINE_STG": ["model.dlh_quickbooks.V_PAYMENTS_STG"], "model.dlh_quickbooks.V_PAYMENTS_STG": ["model.dlh_quickbooks.W_PAYMENTS_F"], "model.dlh_quickbooks.V_PAYMENT_HEADER_STG": ["model.dlh_quickbooks.V_PAYMENTS_STG"], "model.dlh_quickbooks.V_BILL_HEADER_STG": ["model.dlh_quickbooks.V_BILLS_STG"], "model.dlh_quickbooks.V_BILLS_STG": ["model.dlh_quickbooks.W_BILLS_F"], "model.dlh_quickbooks.V_BILL_LINES_STG": ["model.dlh_quickbooks.V_BILLS_STG"], "model.dlh_quickbooks.V_INVOICE_LINE_STG": ["model.dlh_quickbooks.V_INVOICES_STG", "model.dlh_quickbooks.V_INVOICE_LINE_BUNDLE_STG"], "model.dlh_quickbooks.V_INVOICE_HEADER_STG": ["model.dlh_quickbooks.V_INVOICES_STG"], "model.dlh_quickbooks.V_INVOICE_LINE_BUNDLE_STG": ["model.dlh_quickbooks.V_INVOICES_STG"], "model.dlh_quickbooks.V_INVOICES_STG": ["model.dlh_quickbooks.W_INVOICES_F"], "model.dlh_quickbooks.V_TERM_STG": ["model.dlh_quickbooks.W_TERM_D"], "model.dlh_quickbooks.V_DATE_STG": ["model.dlh_quickbooks.W_DATE_D"], "model.dlh_quickbooks.V_ACCOUNTS_STG": ["model.dlh_quickbooks.W_ACCOUNTS_D"], "model.dlh_quickbooks.V_ITEMS_STG": ["model.dlh_quickbooks.W_ITEMS_D"], "model.dlh_quickbooks.V_CLASS_STG": ["model.dlh_quickbooks.W_CLASS_D"], "model.dlh_quickbooks.V_PURCHASES_STG": ["model.dlh_quickbooks.W_PURCHASES_F"], "model.dlh_quickbooks.V_PURCHASE_HEADER_STG": ["model.dlh_quickbooks.V_PURCHASES_STG"], "model.dlh_quickbooks.V_PURCHASE_LINE_STG": ["model.dlh_quickbooks.V_PURCHASES_STG"], "model.dlh_quickbooks.V_EMPLOYEES_STG": ["model.dlh_quickbooks.W_EMPLOYEES_D"], "model.dlh_quickbooks.V_CURRENCY_STG": ["model.dlh_quickbooks.W_CURRENCY_D"], "model.dlh_quickbooks.V_VENDORS_STG": ["model.dlh_quickbooks.W_VENDORS_D"], "model.dlh_quickbooks.W_ITEMS_D": ["model.dlh_quickbooks.V_BILLS_STG", "model.dlh_quickbooks.V_BILL_LINES_STG", "model.dlh_quickbooks.V_INVOICE_LINE_BUNDLE_STG", "model.dlh_quickbooks.V_INVOICE_LINE_STG", "model.dlh_quickbooks.V_PURCHASES_STG", "model.dlh_quickbooks.V_PURCHASE_LINE_STG", "test.dlh_quickbooks.not_null_W_ITEMS_D_K_ITEM_DLHK.fe14e7111c", "test.dlh_quickbooks.relationships_W_BILLS_F_K_ITEM_EXPENSE_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.2fcf0b2c13", "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_ITEM_EXPENSE_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.08b42141a8", "test.dlh_quickbooks.unique_W_ITEMS_D_K_ITEM_DLHK.0d69e5b7fa"], "model.dlh_quickbooks.W_ACCOUNTS_D": ["model.dlh_quickbooks.V_BILL_HEADER_STG", "model.dlh_quickbooks.V_BILL_LINES_STG", "model.dlh_quickbooks.V_INVOICE_HEADER_STG", "model.dlh_quickbooks.V_INVOICE_LINE_BUNDLE_STG", "model.dlh_quickbooks.V_INVOICE_LINE_STG", "model.dlh_quickbooks.V_PAYMENT_HEADER_STG", "model.dlh_quickbooks.V_PURCHASE_HEADER_STG", "model.dlh_quickbooks.V_PURCHASE_LINE_STG", "test.dlh_quickbooks.not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK.918e0fe908", "test.dlh_quickbooks.relationships_W_BILLS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.635efc2ad0", "test.dlh_quickbooks.relationships_W_BILLS_F_K_BILL_PAYABLE_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.199cac82b1", "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.c4fd97a3ed", "test.dlh_quickbooks.unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK.cba900fa78"], "model.dlh_quickbooks.W_BILLS_F": ["test.dlh_quickbooks.not_null_W_BILLS_F_K_BILL_LINE_DLHK.2cfbee0ddf", "test.dlh_quickbooks.relationships_W_BILLS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.635efc2ad0", "test.dlh_quickbooks.relationships_W_BILLS_F_K_BILL_CURRENCY_DLHK__K_CURRENCY_DLHK__ref_W_CURRENCY_D_.9a644c3d77", "test.dlh_quickbooks.relationships_W_BILLS_F_K_BILL_PAYABLE_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.199cac82b1", "test.dlh_quickbooks.relationships_W_BILLS_F_K_ITEM_EXPENSE_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.2fcf0b2c13", "test.dlh_quickbooks.relationships_W_BILLS_F_K_SALES_TERM_DLHK__K_TERM_DLHK__ref_W_TERM_D_.fcd9c52512", "test.dlh_quickbooks.relationships_W_BILLS_F_K_VENDOR_DLHK__K_VENDOR_DLHK__ref_W_VENDORS_D_.d8f62067a5", "test.dlh_quickbooks.unique_W_BILLS_F_K_BILL_LINE_DLHK.192663321f"], "model.dlh_quickbooks.W_DATE_D": [], "model.dlh_quickbooks.W_VENDORS_D": ["model.dlh_quickbooks.V_BILL_HEADER_STG", "model.dlh_quickbooks.V_PURCHASE_HEADER_STG", "test.dlh_quickbooks.not_null_W_VENDORS_D_K_VENDOR_DLHK.accc567e7f", "test.dlh_quickbooks.relationships_W_BILLS_F_K_VENDOR_DLHK__K_VENDOR_DLHK__ref_W_VENDORS_D_.d8f62067a5", "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_VENDOR_DLHK__K_VENDOR_DLHK__ref_W_VENDORS_D_.b45aed1b23", "test.dlh_quickbooks.unique_W_VENDORS_D_K_VENDOR_DLHK.5a807966e7"], "model.dlh_quickbooks.W_EMPLOYEES_D": ["model.dlh_quickbooks.V_PURCHASE_HEADER_STG", "test.dlh_quickbooks.not_null_W_EMPLOYEES_D_K_EMPLOYEE_DLHK.dc599328ef", "test.dlh_quickbooks.unique_W_EMPLOYEES_D_K_EMPLOYEE_DLHK.83d2f33139"], "model.dlh_quickbooks.W_INVOICES_F": [], "model.dlh_quickbooks.W_PAYMENTS_F": ["model.dlh_quickbooks.V_INVOICE_HEADER_STG"], "model.dlh_quickbooks.W_TERM_D": ["model.dlh_quickbooks.V_BILL_HEADER_STG", "model.dlh_quickbooks.V_INVOICE_HEADER_STG", "model.dlh_quickbooks.V_VENDORS_STG", "test.dlh_quickbooks.not_null_W_TERM_D_K_TERM_DLHK.90ba40ae08", "test.dlh_quickbooks.relationships_W_BILLS_F_K_SALES_TERM_DLHK__K_TERM_DLHK__ref_W_TERM_D_.fcd9c52512", "test.dlh_quickbooks.unique_W_TERM_D_K_TERM_DLHK.9a114fa514"], "model.dlh_quickbooks.W_CUSTOMERS_D": ["model.dlh_quickbooks.V_BILL_LINES_STG", "model.dlh_quickbooks.V_INVOICE_HEADER_STG", "model.dlh_quickbooks.V_PAYMENT_HEADER_STG", "model.dlh_quickbooks.V_PURCHASE_HEADER_STG", "model.dlh_quickbooks.V_PURCHASE_LINE_STG", "test.dlh_quickbooks.not_null_W_CUSTOMERS_D_K_CUSTOMER_DLHK.d428ec020e", "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_CUSTOMERS_D_.6cd34eb3a1", "test.dlh_quickbooks.unique_W_CUSTOMERS_D_K_CUSTOMER_DLHK.190cadd98a"], "model.dlh_quickbooks.W_PURCHASES_F": ["test.dlh_quickbooks.not_null_W_PURCHASES_F_K_PURCHASE_LINE_DLHK.d4ba8cdddc", "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.c4fd97a3ed", "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_CUSTOMERS_D_.6cd34eb3a1", "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_ITEM_EXPENSE_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.08b42141a8", "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_PURCHASE_CURRENCY_DLHK__K_CURRENCY_DLHK__ref_W_CURRENCY_D_.1047265869", "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_VENDOR_DLHK__K_VENDOR_DLHK__ref_W_VENDORS_D_.b45aed1b23", "test.dlh_quickbooks.unique_W_PURCHASES_F_K_PURCHASE_LINE_DLHK.bcc44b3a6e"], "model.dlh_quickbooks.W_CLASS_D": ["model.dlh_quickbooks.V_INVOICE_HEADER_STG", "model.dlh_quickbooks.V_INVOICE_LINE_BUNDLE_STG", "model.dlh_quickbooks.V_INVOICE_LINE_STG"], "model.dlh_quickbooks.W_CURRENCY_D": ["model.dlh_quickbooks.V_BILL_HEADER_STG", "model.dlh_quickbooks.V_INVOICE_HEADER_STG", "model.dlh_quickbooks.V_PAYMENT_HEADER_STG", "model.dlh_quickbooks.V_PURCHASE_HEADER_STG", "test.dlh_quickbooks.relationships_W_BILLS_F_K_BILL_CURRENCY_DLHK__K_CURRENCY_DLHK__ref_W_CURRENCY_D_.9a644c3d77", "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_PURCHASE_CURRENCY_DLHK__K_CURRENCY_DLHK__ref_W_CURRENCY_D_.1047265869"], "test.dlh_quickbooks.unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK.cba900fa78": [], "test.dlh_quickbooks.not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK.918e0fe908": [], "test.dlh_quickbooks.unique_W_CUSTOMERS_D_K_CUSTOMER_DLHK.190cadd98a": [], "test.dlh_quickbooks.not_null_W_CUSTOMERS_D_K_CUSTOMER_DLHK.d428ec020e": [], "test.dlh_quickbooks.unique_W_EMPLOYEES_D_K_EMPLOYEE_DLHK.83d2f33139": [], "test.dlh_quickbooks.not_null_W_EMPLOYEES_D_K_EMPLOYEE_DLHK.dc599328ef": [], "test.dlh_quickbooks.unique_W_ITEMS_D_K_ITEM_DLHK.0d69e5b7fa": [], "test.dlh_quickbooks.not_null_W_ITEMS_D_K_ITEM_DLHK.fe14e7111c": [], "test.dlh_quickbooks.unique_W_TERM_D_K_TERM_DLHK.9a114fa514": [], "test.dlh_quickbooks.not_null_W_TERM_D_K_TERM_DLHK.90ba40ae08": [], "test.dlh_quickbooks.unique_W_VENDORS_D_K_VENDOR_DLHK.5a807966e7": [], "test.dlh_quickbooks.not_null_W_VENDORS_D_K_VENDOR_DLHK.accc567e7f": [], "test.dlh_quickbooks.unique_W_BILLS_F_K_BILL_LINE_DLHK.192663321f": [], "test.dlh_quickbooks.not_null_W_BILLS_F_K_BILL_LINE_DLHK.2cfbee0ddf": [], "test.dlh_quickbooks.relationships_W_BILLS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.635efc2ad0": [], "test.dlh_quickbooks.relationships_W_BILLS_F_K_BILL_PAYABLE_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.199cac82b1": [], "test.dlh_quickbooks.relationships_W_BILLS_F_K_SALES_TERM_DLHK__K_TERM_DLHK__ref_W_TERM_D_.fcd9c52512": [], "test.dlh_quickbooks.relationships_W_BILLS_F_K_VENDOR_DLHK__K_VENDOR_DLHK__ref_W_VENDORS_D_.d8f62067a5": [], "test.dlh_quickbooks.relationships_W_BILLS_F_K_BILL_CURRENCY_DLHK__K_CURRENCY_DLHK__ref_W_CURRENCY_D_.9a644c3d77": [], "test.dlh_quickbooks.relationships_W_BILLS_F_K_ITEM_EXPENSE_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.2fcf0b2c13": [], "test.dlh_quickbooks.unique_W_PURCHASES_F_K_PURCHASE_LINE_DLHK.bcc44b3a6e": [], "test.dlh_quickbooks.not_null_W_PURCHASES_F_K_PURCHASE_LINE_DLHK.d4ba8cdddc": [], "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.c4fd97a3ed": [], "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_CUSTOMER_DLHK__K_CUSTOMER_DLHK__ref_W_CUSTOMERS_D_.6cd34eb3a1": [], "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_VENDOR_DLHK__K_VENDOR_DLHK__ref_W_VENDORS_D_.b45aed1b23": [], "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_PURCHASE_CURRENCY_DLHK__K_CURRENCY_DLHK__ref_W_CURRENCY_D_.1047265869": [], "test.dlh_quickbooks.relationships_W_PURCHASES_F_K_ITEM_EXPENSE_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.08b42141a8": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.ACCOUNT": ["model.dlh_quickbooks.V_ACCOUNTS_STG"], "source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL": ["model.dlh_quickbooks.V_BILL_HEADER_STG"], "source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL_LINE": ["model.dlh_quickbooks.V_BILL_LINES_STG"], "source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL_PAYMENT": ["model.dlh_quickbooks.V_BILL_HEADER_STG"], "source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL_PAYMENT_LINE": ["model.dlh_quickbooks.V_BILL_HEADER_STG"], "source.dlh_quickbooks.DEMO_QUICKBOOKS.CURRENCY": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.CUSTOMER": ["model.dlh_quickbooks.V_CUSTOMERS_STG"], "source.dlh_quickbooks.DEMO_QUICKBOOKS.DEPOSIT": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.DEPOSIT_LINE": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.EMPLOYEE": ["model.dlh_quickbooks.V_EMPLOYEES_STG"], "source.dlh_quickbooks.DEMO_QUICKBOOKS.ITEM": ["model.dlh_quickbooks.V_ITEMS_STG"], "source.dlh_quickbooks.DEMO_QUICKBOOKS.JOURNAL_ENTRY": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.JOURNAL_ENTRY_LINE": [], "source.dlh_quickbooks.DEMO_QUICKBOOKS.PURCHASE": ["model.dlh_quickbooks.V_PURCHASE_HEADER_STG"], "source.dlh_quickbooks.DEMO_QUICKBOOKS.PURCHASE_LINE": ["model.dlh_quickbooks.V_PURCHASE_LINE_STG"], "source.dlh_quickbooks.DEMO_QUICKBOOKS.VENDOR": ["model.dlh_quickbooks.V_VENDORS_STG"], "source.dlh_quickbooks.DEMO_QUICKBOOKS.TERM": ["model.dlh_quickbooks.V_TERM_STG"], "source.dlh_quickbooks.DEMO_QUICKBOOKS.BILL_LINKED_TXN": ["model.dlh_quickbooks.V_BILL_HEADER_STG"], "source.dlh_quickbooks.DEMO_QUICKBOOKS.INVOICE": ["model.dlh_quickbooks.V_INVOICE_HEADER_STG"], "source.dlh_quickbooks.DEMO_QUICKBOOKS.INVOICE_LINKED_TXN": ["model.dlh_quickbooks.V_INVOICE_HEADER_STG"], "source.dlh_quickbooks.DEMO_QUICKBOOKS.INVOICE_LINE": ["model.dlh_quickbooks.V_INVOICE_LINE_STG"], "source.dlh_quickbooks.DEMO_QUICKBOOKS.INVOICE_LINE_BUNDLE": ["model.dlh_quickbooks.V_INVOICE_LINE_BUNDLE_STG"], "source.dlh_quickbooks.DEMO_QUICKBOOKS.CLASS": ["model.dlh_quickbooks.V_CLASS_STG"], "source.dlh_quickbooks.DEMO_QUICKBOOKS.PAYMENT": ["model.dlh_quickbooks.V_PAYMENT_HEADER_STG"], "source.dlh_quickbooks.DEMO_QUICKBOOKS.PAYMENT_LINE": ["model.dlh_quickbooks.V_PAYMENT_LINE_STG"]}}